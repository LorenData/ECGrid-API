//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ECGridOS_Mailbox_IO.com.ecgrid.analytics {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ECGridAnalyticsSoap", Namespace="http://ecgrid.com/")]
    public partial class ECGridAnalytics : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback testOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransactionConfirmOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransactionConfirmByInterchangeIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransactionConfirmByInterchangeIdWithTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateStatisticsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ScorePendingOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransactionsPendingOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransactionsPendingListOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransactionsProcessedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChartDataPendingOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChartDataByPostedDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChartDataByConfirmedMinutesOperationCompleted;
        
        private System.Threading.SendOrPostCallback VersionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ECGridAnalytics() {
            this.Url = global::ECGridOS_Mailbox_IO.Properties.Settings.Default.ECGridOS_Mailbox_IO_com_ecgrid_analytics_ECGridAnalytics;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event testCompletedEventHandler testCompleted;
        
        /// <remarks/>
        public event TransactionConfirmCompletedEventHandler TransactionConfirmCompleted;
        
        /// <remarks/>
        public event TransactionConfirmByInterchangeIdCompletedEventHandler TransactionConfirmByInterchangeIdCompleted;
        
        /// <remarks/>
        public event TransactionConfirmByInterchangeIdWithTimeCompletedEventHandler TransactionConfirmByInterchangeIdWithTimeCompleted;
        
        /// <remarks/>
        public event CalculateStatisticsCompletedEventHandler CalculateStatisticsCompleted;
        
        /// <remarks/>
        public event ScorePendingCompletedEventHandler ScorePendingCompleted;
        
        /// <remarks/>
        public event TransactionsPendingCompletedEventHandler TransactionsPendingCompleted;
        
        /// <remarks/>
        public event TransactionsPendingListCompletedEventHandler TransactionsPendingListCompleted;
        
        /// <remarks/>
        public event TransactionsProcessedCompletedEventHandler TransactionsProcessedCompleted;
        
        /// <remarks/>
        public event ChartDataPendingCompletedEventHandler ChartDataPendingCompleted;
        
        /// <remarks/>
        public event ChartDataByPostedDateCompletedEventHandler ChartDataByPostedDateCompleted;
        
        /// <remarks/>
        public event ChartDataByConfirmedMinutesCompletedEventHandler ChartDataByConfirmedMinutesCompleted;
        
        /// <remarks/>
        public event VersionCompletedEventHandler VersionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgrid.com/test", RequestNamespace="http://ecgrid.com/", ResponseNamespace="http://ecgrid.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int test(string APIKey) {
            object[] results = this.Invoke("test", new object[] {
                        APIKey});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void testAsync(string APIKey) {
            this.testAsync(APIKey, null);
        }
        
        /// <remarks/>
        public void testAsync(string APIKey, object userState) {
            if ((this.testOperationCompleted == null)) {
                this.testOperationCompleted = new System.Threading.SendOrPostCallback(this.OntestOperationCompleted);
            }
            this.InvokeAsync("test", new object[] {
                        APIKey}, this.testOperationCompleted, userState);
        }
        
        private void OntestOperationCompleted(object arg) {
            if ((this.testCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.testCompleted(this, new testCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgrid.com/TransactionConfirm", RequestNamespace="http://ecgrid.com/", ResponseNamespace="http://ecgrid.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransStatus TransactionConfirm(string APIKey, ConfirmationEvent Event, DelayCode DelayCode, string SenderQualifier, string SenderId, string ReceiverQualifier, string ReceiverId, string TransactionType, string TransactionId, System.DateTime TransactionDate) {
            object[] results = this.Invoke("TransactionConfirm", new object[] {
                        APIKey,
                        Event,
                        DelayCode,
                        SenderQualifier,
                        SenderId,
                        ReceiverQualifier,
                        ReceiverId,
                        TransactionType,
                        TransactionId,
                        TransactionDate});
            return ((TransStatus)(results[0]));
        }
        
        /// <remarks/>
        public void TransactionConfirmAsync(string APIKey, ConfirmationEvent Event, DelayCode DelayCode, string SenderQualifier, string SenderId, string ReceiverQualifier, string ReceiverId, string TransactionType, string TransactionId, System.DateTime TransactionDate) {
            this.TransactionConfirmAsync(APIKey, Event, DelayCode, SenderQualifier, SenderId, ReceiverQualifier, ReceiverId, TransactionType, TransactionId, TransactionDate, null);
        }
        
        /// <remarks/>
        public void TransactionConfirmAsync(string APIKey, ConfirmationEvent Event, DelayCode DelayCode, string SenderQualifier, string SenderId, string ReceiverQualifier, string ReceiverId, string TransactionType, string TransactionId, System.DateTime TransactionDate, object userState) {
            if ((this.TransactionConfirmOperationCompleted == null)) {
                this.TransactionConfirmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransactionConfirmOperationCompleted);
            }
            this.InvokeAsync("TransactionConfirm", new object[] {
                        APIKey,
                        Event,
                        DelayCode,
                        SenderQualifier,
                        SenderId,
                        ReceiverQualifier,
                        ReceiverId,
                        TransactionType,
                        TransactionId,
                        TransactionDate}, this.TransactionConfirmOperationCompleted, userState);
        }
        
        private void OnTransactionConfirmOperationCompleted(object arg) {
            if ((this.TransactionConfirmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransactionConfirmCompleted(this, new TransactionConfirmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgrid.com/TransactionConfirmByInterchangeId", RequestNamespace="http://ecgrid.com/", ResponseNamespace="http://ecgrid.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransStatus TransactionConfirmByInterchangeId(string APIKey, int InterchangeId, ConfirmationEvent Event, DelayCode DelayCode, string TransactionId) {
            object[] results = this.Invoke("TransactionConfirmByInterchangeId", new object[] {
                        APIKey,
                        InterchangeId,
                        Event,
                        DelayCode,
                        TransactionId});
            return ((TransStatus)(results[0]));
        }
        
        /// <remarks/>
        public void TransactionConfirmByInterchangeIdAsync(string APIKey, int InterchangeId, ConfirmationEvent Event, DelayCode DelayCode, string TransactionId) {
            this.TransactionConfirmByInterchangeIdAsync(APIKey, InterchangeId, Event, DelayCode, TransactionId, null);
        }
        
        /// <remarks/>
        public void TransactionConfirmByInterchangeIdAsync(string APIKey, int InterchangeId, ConfirmationEvent Event, DelayCode DelayCode, string TransactionId, object userState) {
            if ((this.TransactionConfirmByInterchangeIdOperationCompleted == null)) {
                this.TransactionConfirmByInterchangeIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransactionConfirmByInterchangeIdOperationCompleted);
            }
            this.InvokeAsync("TransactionConfirmByInterchangeId", new object[] {
                        APIKey,
                        InterchangeId,
                        Event,
                        DelayCode,
                        TransactionId}, this.TransactionConfirmByInterchangeIdOperationCompleted, userState);
        }
        
        private void OnTransactionConfirmByInterchangeIdOperationCompleted(object arg) {
            if ((this.TransactionConfirmByInterchangeIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransactionConfirmByInterchangeIdCompleted(this, new TransactionConfirmByInterchangeIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgrid.com/TransactionConfirmByInterchangeIdWithTime", RequestNamespace="http://ecgrid.com/", ResponseNamespace="http://ecgrid.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransStatus TransactionConfirmByInterchangeIdWithTime(string APIKey, int InterchangeId, ConfirmationEvent Event, DelayCode DelayCode, string TransactionId, System.DateTime ConfirmationDateTime) {
            object[] results = this.Invoke("TransactionConfirmByInterchangeIdWithTime", new object[] {
                        APIKey,
                        InterchangeId,
                        Event,
                        DelayCode,
                        TransactionId,
                        ConfirmationDateTime});
            return ((TransStatus)(results[0]));
        }
        
        /// <remarks/>
        public void TransactionConfirmByInterchangeIdWithTimeAsync(string APIKey, int InterchangeId, ConfirmationEvent Event, DelayCode DelayCode, string TransactionId, System.DateTime ConfirmationDateTime) {
            this.TransactionConfirmByInterchangeIdWithTimeAsync(APIKey, InterchangeId, Event, DelayCode, TransactionId, ConfirmationDateTime, null);
        }
        
        /// <remarks/>
        public void TransactionConfirmByInterchangeIdWithTimeAsync(string APIKey, int InterchangeId, ConfirmationEvent Event, DelayCode DelayCode, string TransactionId, System.DateTime ConfirmationDateTime, object userState) {
            if ((this.TransactionConfirmByInterchangeIdWithTimeOperationCompleted == null)) {
                this.TransactionConfirmByInterchangeIdWithTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransactionConfirmByInterchangeIdWithTimeOperationCompleted);
            }
            this.InvokeAsync("TransactionConfirmByInterchangeIdWithTime", new object[] {
                        APIKey,
                        InterchangeId,
                        Event,
                        DelayCode,
                        TransactionId,
                        ConfirmationDateTime}, this.TransactionConfirmByInterchangeIdWithTimeOperationCompleted, userState);
        }
        
        private void OnTransactionConfirmByInterchangeIdWithTimeOperationCompleted(object arg) {
            if ((this.TransactionConfirmByInterchangeIdWithTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransactionConfirmByInterchangeIdWithTimeCompleted(this, new TransactionConfirmByInterchangeIdWithTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgrid.com/CalculateStatistics", RequestNamespace="http://ecgrid.com/", ResponseNamespace="http://ecgrid.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CalculateStatistics(string APIKey) {
            object[] results = this.Invoke("CalculateStatistics", new object[] {
                        APIKey});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CalculateStatisticsAsync(string APIKey) {
            this.CalculateStatisticsAsync(APIKey, null);
        }
        
        /// <remarks/>
        public void CalculateStatisticsAsync(string APIKey, object userState) {
            if ((this.CalculateStatisticsOperationCompleted == null)) {
                this.CalculateStatisticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateStatisticsOperationCompleted);
            }
            this.InvokeAsync("CalculateStatistics", new object[] {
                        APIKey}, this.CalculateStatisticsOperationCompleted, userState);
        }
        
        private void OnCalculateStatisticsOperationCompleted(object arg) {
            if ((this.CalculateStatisticsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateStatisticsCompleted(this, new CalculateStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgrid.com/ScorePending", RequestNamespace="http://ecgrid.com/", ResponseNamespace="http://ecgrid.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ScorePending(string APIKey) {
            object[] results = this.Invoke("ScorePending", new object[] {
                        APIKey});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ScorePendingAsync(string APIKey) {
            this.ScorePendingAsync(APIKey, null);
        }
        
        /// <remarks/>
        public void ScorePendingAsync(string APIKey, object userState) {
            if ((this.ScorePendingOperationCompleted == null)) {
                this.ScorePendingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnScorePendingOperationCompleted);
            }
            this.InvokeAsync("ScorePending", new object[] {
                        APIKey}, this.ScorePendingOperationCompleted, userState);
        }
        
        private void OnScorePendingOperationCompleted(object arg) {
            if ((this.ScorePendingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ScorePendingCompleted(this, new ScorePendingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgrid.com/TransactionsPending", RequestNamespace="http://ecgrid.com/", ResponseNamespace="http://ecgrid.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public trans[] TransactionsPending(string APIKey, int SenderNetworkID, int SenderMailboxID, int SenderECGridID, int ReceiverNetworkID, int ReceiverMailboxID, int ReceiverECGridID, bool includeNormal) {
            object[] results = this.Invoke("TransactionsPending", new object[] {
                        APIKey,
                        SenderNetworkID,
                        SenderMailboxID,
                        SenderECGridID,
                        ReceiverNetworkID,
                        ReceiverMailboxID,
                        ReceiverECGridID,
                        includeNormal});
            return ((trans[])(results[0]));
        }
        
        /// <remarks/>
        public void TransactionsPendingAsync(string APIKey, int SenderNetworkID, int SenderMailboxID, int SenderECGridID, int ReceiverNetworkID, int ReceiverMailboxID, int ReceiverECGridID, bool includeNormal) {
            this.TransactionsPendingAsync(APIKey, SenderNetworkID, SenderMailboxID, SenderECGridID, ReceiverNetworkID, ReceiverMailboxID, ReceiverECGridID, includeNormal, null);
        }
        
        /// <remarks/>
        public void TransactionsPendingAsync(string APIKey, int SenderNetworkID, int SenderMailboxID, int SenderECGridID, int ReceiverNetworkID, int ReceiverMailboxID, int ReceiverECGridID, bool includeNormal, object userState) {
            if ((this.TransactionsPendingOperationCompleted == null)) {
                this.TransactionsPendingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransactionsPendingOperationCompleted);
            }
            this.InvokeAsync("TransactionsPending", new object[] {
                        APIKey,
                        SenderNetworkID,
                        SenderMailboxID,
                        SenderECGridID,
                        ReceiverNetworkID,
                        ReceiverMailboxID,
                        ReceiverECGridID,
                        includeNormal}, this.TransactionsPendingOperationCompleted, userState);
        }
        
        private void OnTransactionsPendingOperationCompleted(object arg) {
            if ((this.TransactionsPendingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransactionsPendingCompleted(this, new TransactionsPendingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgrid.com/TransactionsPendingList", RequestNamespace="http://ecgrid.com/", ResponseNamespace="http://ecgrid.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public trans[] TransactionsPendingList(string APIKey, string SenderECGridIDs, string ReceiverECGridIDs, bool includeNormal) {
            object[] results = this.Invoke("TransactionsPendingList", new object[] {
                        APIKey,
                        SenderECGridIDs,
                        ReceiverECGridIDs,
                        includeNormal});
            return ((trans[])(results[0]));
        }
        
        /// <remarks/>
        public void TransactionsPendingListAsync(string APIKey, string SenderECGridIDs, string ReceiverECGridIDs, bool includeNormal) {
            this.TransactionsPendingListAsync(APIKey, SenderECGridIDs, ReceiverECGridIDs, includeNormal, null);
        }
        
        /// <remarks/>
        public void TransactionsPendingListAsync(string APIKey, string SenderECGridIDs, string ReceiverECGridIDs, bool includeNormal, object userState) {
            if ((this.TransactionsPendingListOperationCompleted == null)) {
                this.TransactionsPendingListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransactionsPendingListOperationCompleted);
            }
            this.InvokeAsync("TransactionsPendingList", new object[] {
                        APIKey,
                        SenderECGridIDs,
                        ReceiverECGridIDs,
                        includeNormal}, this.TransactionsPendingListOperationCompleted, userState);
        }
        
        private void OnTransactionsPendingListOperationCompleted(object arg) {
            if ((this.TransactionsPendingListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransactionsPendingListCompleted(this, new TransactionsPendingListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgrid.com/TransactionsProcessed", RequestNamespace="http://ecgrid.com/", ResponseNamespace="http://ecgrid.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public trans[] TransactionsProcessed(string APIKey, System.DateTime BeginDate, System.DateTime EndDate, ConfirmationEvent Event, int MonitorID, int SenderECGridID, int SenderMailboxID, int SenderNetworkID, int ReceiverECGridID, int ReceiverMailboxID, int ReceiverNetworkID) {
            object[] results = this.Invoke("TransactionsProcessed", new object[] {
                        APIKey,
                        BeginDate,
                        EndDate,
                        Event,
                        MonitorID,
                        SenderECGridID,
                        SenderMailboxID,
                        SenderNetworkID,
                        ReceiverECGridID,
                        ReceiverMailboxID,
                        ReceiverNetworkID});
            return ((trans[])(results[0]));
        }
        
        /// <remarks/>
        public void TransactionsProcessedAsync(string APIKey, System.DateTime BeginDate, System.DateTime EndDate, ConfirmationEvent Event, int MonitorID, int SenderECGridID, int SenderMailboxID, int SenderNetworkID, int ReceiverECGridID, int ReceiverMailboxID, int ReceiverNetworkID) {
            this.TransactionsProcessedAsync(APIKey, BeginDate, EndDate, Event, MonitorID, SenderECGridID, SenderMailboxID, SenderNetworkID, ReceiverECGridID, ReceiverMailboxID, ReceiverNetworkID, null);
        }
        
        /// <remarks/>
        public void TransactionsProcessedAsync(string APIKey, System.DateTime BeginDate, System.DateTime EndDate, ConfirmationEvent Event, int MonitorID, int SenderECGridID, int SenderMailboxID, int SenderNetworkID, int ReceiverECGridID, int ReceiverMailboxID, int ReceiverNetworkID, object userState) {
            if ((this.TransactionsProcessedOperationCompleted == null)) {
                this.TransactionsProcessedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransactionsProcessedOperationCompleted);
            }
            this.InvokeAsync("TransactionsProcessed", new object[] {
                        APIKey,
                        BeginDate,
                        EndDate,
                        Event,
                        MonitorID,
                        SenderECGridID,
                        SenderMailboxID,
                        SenderNetworkID,
                        ReceiverECGridID,
                        ReceiverMailboxID,
                        ReceiverNetworkID}, this.TransactionsProcessedOperationCompleted, userState);
        }
        
        private void OnTransactionsProcessedOperationCompleted(object arg) {
            if ((this.TransactionsProcessedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransactionsProcessedCompleted(this, new TransactionsProcessedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgrid.com/ChartDataPending", RequestNamespace="http://ecgrid.com/", ResponseNamespace="http://ecgrid.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChartDataPending(string APIKey, int SenderECGridID, int SenderMailboxID, int SenderNetworkID, int ReceiverECGridID, int ReceiverMailboxId, int ReceiverNetworkID, bool includeNormal) {
            object[] results = this.Invoke("ChartDataPending", new object[] {
                        APIKey,
                        SenderECGridID,
                        SenderMailboxID,
                        SenderNetworkID,
                        ReceiverECGridID,
                        ReceiverMailboxId,
                        ReceiverNetworkID,
                        includeNormal});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChartDataPendingAsync(string APIKey, int SenderECGridID, int SenderMailboxID, int SenderNetworkID, int ReceiverECGridID, int ReceiverMailboxId, int ReceiverNetworkID, bool includeNormal) {
            this.ChartDataPendingAsync(APIKey, SenderECGridID, SenderMailboxID, SenderNetworkID, ReceiverECGridID, ReceiverMailboxId, ReceiverNetworkID, includeNormal, null);
        }
        
        /// <remarks/>
        public void ChartDataPendingAsync(string APIKey, int SenderECGridID, int SenderMailboxID, int SenderNetworkID, int ReceiverECGridID, int ReceiverMailboxId, int ReceiverNetworkID, bool includeNormal, object userState) {
            if ((this.ChartDataPendingOperationCompleted == null)) {
                this.ChartDataPendingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChartDataPendingOperationCompleted);
            }
            this.InvokeAsync("ChartDataPending", new object[] {
                        APIKey,
                        SenderECGridID,
                        SenderMailboxID,
                        SenderNetworkID,
                        ReceiverECGridID,
                        ReceiverMailboxId,
                        ReceiverNetworkID,
                        includeNormal}, this.ChartDataPendingOperationCompleted, userState);
        }
        
        private void OnChartDataPendingOperationCompleted(object arg) {
            if ((this.ChartDataPendingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChartDataPendingCompleted(this, new ChartDataPendingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgrid.com/ChartDataByPostedDate", RequestNamespace="http://ecgrid.com/", ResponseNamespace="http://ecgrid.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChartDataByPostedDate(string APIKey, System.DateTime BeginDate, System.DateTime EndDate, int SenderECGridID, int SenderMailboxID, int SenderNetworkID, int ReceiverECGridID, int ReceiverMailboxID, int ReceiverNetworkID, ConfirmationEvent Event, short MinimumMinutes) {
            object[] results = this.Invoke("ChartDataByPostedDate", new object[] {
                        APIKey,
                        BeginDate,
                        EndDate,
                        SenderECGridID,
                        SenderMailboxID,
                        SenderNetworkID,
                        ReceiverECGridID,
                        ReceiverMailboxID,
                        ReceiverNetworkID,
                        Event,
                        MinimumMinutes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChartDataByPostedDateAsync(string APIKey, System.DateTime BeginDate, System.DateTime EndDate, int SenderECGridID, int SenderMailboxID, int SenderNetworkID, int ReceiverECGridID, int ReceiverMailboxID, int ReceiverNetworkID, ConfirmationEvent Event, short MinimumMinutes) {
            this.ChartDataByPostedDateAsync(APIKey, BeginDate, EndDate, SenderECGridID, SenderMailboxID, SenderNetworkID, ReceiverECGridID, ReceiverMailboxID, ReceiverNetworkID, Event, MinimumMinutes, null);
        }
        
        /// <remarks/>
        public void ChartDataByPostedDateAsync(string APIKey, System.DateTime BeginDate, System.DateTime EndDate, int SenderECGridID, int SenderMailboxID, int SenderNetworkID, int ReceiverECGridID, int ReceiverMailboxID, int ReceiverNetworkID, ConfirmationEvent Event, short MinimumMinutes, object userState) {
            if ((this.ChartDataByPostedDateOperationCompleted == null)) {
                this.ChartDataByPostedDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChartDataByPostedDateOperationCompleted);
            }
            this.InvokeAsync("ChartDataByPostedDate", new object[] {
                        APIKey,
                        BeginDate,
                        EndDate,
                        SenderECGridID,
                        SenderMailboxID,
                        SenderNetworkID,
                        ReceiverECGridID,
                        ReceiverMailboxID,
                        ReceiverNetworkID,
                        Event,
                        MinimumMinutes}, this.ChartDataByPostedDateOperationCompleted, userState);
        }
        
        private void OnChartDataByPostedDateOperationCompleted(object arg) {
            if ((this.ChartDataByPostedDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChartDataByPostedDateCompleted(this, new ChartDataByPostedDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgrid.com/ChartDataByConfirmedMinutes", RequestNamespace="http://ecgrid.com/", ResponseNamespace="http://ecgrid.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChartDataByConfirmedMinutes(string APIKey, System.DateTime BeginDate, System.DateTime EndDate, int SenderECGridID, int SenderMailboxID, int SenderNetworkID, int ReceiverECGridID, int ReceiverMailboxID, int ReceiverNetworkID, ConfirmationEvent Event, short GroupByMinutes, short MinimumMinutes) {
            object[] results = this.Invoke("ChartDataByConfirmedMinutes", new object[] {
                        APIKey,
                        BeginDate,
                        EndDate,
                        SenderECGridID,
                        SenderMailboxID,
                        SenderNetworkID,
                        ReceiverECGridID,
                        ReceiverMailboxID,
                        ReceiverNetworkID,
                        Event,
                        GroupByMinutes,
                        MinimumMinutes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChartDataByConfirmedMinutesAsync(string APIKey, System.DateTime BeginDate, System.DateTime EndDate, int SenderECGridID, int SenderMailboxID, int SenderNetworkID, int ReceiverECGridID, int ReceiverMailboxID, int ReceiverNetworkID, ConfirmationEvent Event, short GroupByMinutes, short MinimumMinutes) {
            this.ChartDataByConfirmedMinutesAsync(APIKey, BeginDate, EndDate, SenderECGridID, SenderMailboxID, SenderNetworkID, ReceiverECGridID, ReceiverMailboxID, ReceiverNetworkID, Event, GroupByMinutes, MinimumMinutes, null);
        }
        
        /// <remarks/>
        public void ChartDataByConfirmedMinutesAsync(string APIKey, System.DateTime BeginDate, System.DateTime EndDate, int SenderECGridID, int SenderMailboxID, int SenderNetworkID, int ReceiverECGridID, int ReceiverMailboxID, int ReceiverNetworkID, ConfirmationEvent Event, short GroupByMinutes, short MinimumMinutes, object userState) {
            if ((this.ChartDataByConfirmedMinutesOperationCompleted == null)) {
                this.ChartDataByConfirmedMinutesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChartDataByConfirmedMinutesOperationCompleted);
            }
            this.InvokeAsync("ChartDataByConfirmedMinutes", new object[] {
                        APIKey,
                        BeginDate,
                        EndDate,
                        SenderECGridID,
                        SenderMailboxID,
                        SenderNetworkID,
                        ReceiverECGridID,
                        ReceiverMailboxID,
                        ReceiverNetworkID,
                        Event,
                        GroupByMinutes,
                        MinimumMinutes}, this.ChartDataByConfirmedMinutesOperationCompleted, userState);
        }
        
        private void OnChartDataByConfirmedMinutesOperationCompleted(object arg) {
            if ((this.ChartDataByConfirmedMinutesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChartDataByConfirmedMinutesCompleted(this, new ChartDataByConfirmedMinutesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgrid.com/Version", RequestNamespace="http://ecgrid.com/", ResponseNamespace="http://ecgrid.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Version() {
            object[] results = this.Invoke("Version", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VersionAsync() {
            this.VersionAsync(null);
        }
        
        /// <remarks/>
        public void VersionAsync(object userState) {
            if ((this.VersionOperationCompleted == null)) {
                this.VersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVersionOperationCompleted);
            }
            this.InvokeAsync("Version", new object[0], this.VersionOperationCompleted, userState);
        }
        
        private void OnVersionOperationCompleted(object arg) {
            if ((this.VersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VersionCompleted(this, new VersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ecgrid.com/")]
    public enum ConfirmationEvent {
        
        /// <remarks/>
        Any,
        
        /// <remarks/>
        MailboxDelivered,
        
        /// <remarks/>
        MailboxPickedUp,
        
        /// <remarks/>
        Translated,
        
        /// <remarks/>
        Imported,
        
        /// <remarks/>
        ReadyToView,
        
        /// <remarks/>
        ReadyToProcess,
        
        /// <remarks/>
        AS2MDNReceived,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ecgrid.com/")]
    public enum DelayCode {
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        ECGridDowntime,
        
        /// <remarks/>
        ECGridOutage,
        
        /// <remarks/>
        NetworkDowntime,
        
        /// <remarks/>
        NetworkOutage,
        
        /// <remarks/>
        ProviderDowntime,
        
        /// <remarks/>
        ProviderOutage,
        
        /// <remarks/>
        VendorDowntime,
        
        /// <remarks/>
        VendorOutage,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ecgrid.com/")]
    public enum TransStatus {
        
        /// <remarks/>
        Erred,
        
        /// <remarks/>
        CCOnly,
        
        /// <remarks/>
        Ignored,
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Confirmed,
        
        /// <remarks/>
        Duplicate,
        
        /// <remarks/>
        Completed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ecgrid.com/")]
    public partial class trans {
        
        private long idField;
        
        private int monitorIdField;
        
        private System.DateTime createdField;
        
        private int userIdCreateField;
        
        private System.DateTime postedField;
        
        private int userIdPostField;
        
        private System.DateTime confirmedField;
        
        private int userIdConfirmField;
        
        private ConfirmationEvent confirmTypeField;
        
        private int confirmMinutesField;
        
        private int eCGridIdFromField;
        
        private int eCGridIdToField;
        
        private int mailboxIdFromField;
        
        private int mailboxIdToField;
        
        private int networkIdFromField;
        
        private int networkIdToField;
        
        private TransStatus statusField;
        
        private int interchageIdField;
        
        private string documentTypeField;
        
        private string documentIdField;
        
        private System.DateTime documentDateField;
        
        private string documentControlIdField;
        
        private DelayCode ignoreField;
        
        private Score scoreField;
        
        private dataSource sourceField;
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int MonitorId {
            get {
                return this.monitorIdField;
            }
            set {
                this.monitorIdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public int UserIdCreate {
            get {
                return this.userIdCreateField;
            }
            set {
                this.userIdCreateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Posted {
            get {
                return this.postedField;
            }
            set {
                this.postedField = value;
            }
        }
        
        /// <remarks/>
        public int UserIdPost {
            get {
                return this.userIdPostField;
            }
            set {
                this.userIdPostField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Confirmed {
            get {
                return this.confirmedField;
            }
            set {
                this.confirmedField = value;
            }
        }
        
        /// <remarks/>
        public int UserIdConfirm {
            get {
                return this.userIdConfirmField;
            }
            set {
                this.userIdConfirmField = value;
            }
        }
        
        /// <remarks/>
        public ConfirmationEvent ConfirmType {
            get {
                return this.confirmTypeField;
            }
            set {
                this.confirmTypeField = value;
            }
        }
        
        /// <remarks/>
        public int ConfirmMinutes {
            get {
                return this.confirmMinutesField;
            }
            set {
                this.confirmMinutesField = value;
            }
        }
        
        /// <remarks/>
        public int ECGridIdFrom {
            get {
                return this.eCGridIdFromField;
            }
            set {
                this.eCGridIdFromField = value;
            }
        }
        
        /// <remarks/>
        public int ECGridIdTo {
            get {
                return this.eCGridIdToField;
            }
            set {
                this.eCGridIdToField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxIdFrom {
            get {
                return this.mailboxIdFromField;
            }
            set {
                this.mailboxIdFromField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxIdTo {
            get {
                return this.mailboxIdToField;
            }
            set {
                this.mailboxIdToField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkIdFrom {
            get {
                return this.networkIdFromField;
            }
            set {
                this.networkIdFromField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkIdTo {
            get {
                return this.networkIdToField;
            }
            set {
                this.networkIdToField = value;
            }
        }
        
        /// <remarks/>
        public TransStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public int InterchageId {
            get {
                return this.interchageIdField;
            }
            set {
                this.interchageIdField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentType {
            get {
                return this.documentTypeField;
            }
            set {
                this.documentTypeField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DocumentDate {
            get {
                return this.documentDateField;
            }
            set {
                this.documentDateField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentControlId {
            get {
                return this.documentControlIdField;
            }
            set {
                this.documentControlIdField = value;
            }
        }
        
        /// <remarks/>
        public DelayCode Ignore {
            get {
                return this.ignoreField;
            }
            set {
                this.ignoreField = value;
            }
        }
        
        /// <remarks/>
        public Score Score {
            get {
                return this.scoreField;
            }
            set {
                this.scoreField = value;
            }
        }
        
        /// <remarks/>
        public dataSource Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ecgrid.com/")]
    public enum Score {
        
        /// <remarks/>
        Unscored,
        
        /// <remarks/>
        OnTime,
        
        /// <remarks/>
        Warning,
        
        /// <remarks/>
        Alert,
        
        /// <remarks/>
        Exception,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2117.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ecgrid.com/")]
    public enum dataSource {
        
        /// <remarks/>
        Current,
        
        /// <remarks/>
        Recent,
        
        /// <remarks/>
        Archive,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void testCompletedEventHandler(object sender, testCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class testCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal testCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void TransactionConfirmCompletedEventHandler(object sender, TransactionConfirmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransactionConfirmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransactionConfirmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void TransactionConfirmByInterchangeIdCompletedEventHandler(object sender, TransactionConfirmByInterchangeIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransactionConfirmByInterchangeIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransactionConfirmByInterchangeIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void TransactionConfirmByInterchangeIdWithTimeCompletedEventHandler(object sender, TransactionConfirmByInterchangeIdWithTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransactionConfirmByInterchangeIdWithTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransactionConfirmByInterchangeIdWithTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CalculateStatisticsCompletedEventHandler(object sender, CalculateStatisticsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateStatisticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateStatisticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ScorePendingCompletedEventHandler(object sender, ScorePendingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScorePendingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ScorePendingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void TransactionsPendingCompletedEventHandler(object sender, TransactionsPendingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransactionsPendingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransactionsPendingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public trans[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((trans[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void TransactionsPendingListCompletedEventHandler(object sender, TransactionsPendingListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransactionsPendingListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransactionsPendingListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public trans[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((trans[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void TransactionsProcessedCompletedEventHandler(object sender, TransactionsProcessedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransactionsProcessedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransactionsProcessedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public trans[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((trans[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ChartDataPendingCompletedEventHandler(object sender, ChartDataPendingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChartDataPendingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChartDataPendingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ChartDataByPostedDateCompletedEventHandler(object sender, ChartDataByPostedDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChartDataByPostedDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChartDataByPostedDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ChartDataByConfirmedMinutesCompletedEventHandler(object sender, ChartDataByConfirmedMinutesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChartDataByConfirmedMinutesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChartDataByConfirmedMinutesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void VersionCompletedEventHandler(object sender, VersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591