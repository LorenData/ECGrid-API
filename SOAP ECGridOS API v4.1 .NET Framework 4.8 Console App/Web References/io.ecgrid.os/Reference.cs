//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SOAP_ECGridOS_API_v4._1.NET_4._8_Console_App.io.ecgrid.os {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ECGridOS API v4Soap", Namespace="https://os.ecgrid.io/")]
    public partial class ECGridOSAPIv4 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CallBackPendingListExAOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallBackFailedListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallBackFailedListExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportMonthlyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportMonthlyExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportTrafficStatsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportTrafficStatsExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportTrafficStatsPublicOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportInstantStatsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportInstantStatsExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportMailboxStatsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportMailboxStatsExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportMailboxInterchangeStatsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportMailboxInterchangeStatsExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportInterchangeStatsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportInterchangeStatsExOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommSetPairOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommPairOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommListExOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommFindOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommSetStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CertificateAddPublicOperationCompleted;
        
        private System.Threading.SendOrPostCallback CertificateAddPublicAOperationCompleted;
        
        private System.Threading.SendOrPostCallback CertAddPrivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CertAddPrivateAOperationCompleted;
        
        private System.Threading.SendOrPostCallback CertificateCreatePrivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CertificateRenewPrivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CertificateTerminateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommDefaultMailboxOperationCompleted;
        
        private System.Threading.SendOrPostCallback NowUTCOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback VersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback X400FormatOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelUploadExAOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelUpdateStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelUpdateLocalStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelUploadMftOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelUploadMftAOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelSetMailbagControlIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelFindMailbagControlIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelFindMailbagControlIDToOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelManifestOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeManifestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelNoteListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelInBoxArchiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelInBoxArchiveExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelInBoxArchiveExShortOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelInBoxArchiveDescExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelOutBoxArchiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelOutBoxArchiveExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelOutBoxArchiveExShortOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelOutBoxArchiveDescExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelOutBoxErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelOutBoxErrorExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelOutBoxInProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelOutBoxInProcessExOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeInBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeInBoxArchiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeInBoxExOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeInBoxArchiveExOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeOutBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeOutBoxArchiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeOutBoxExOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeOutBoxArchiveExOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeOutBoxPendingOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeOutBoxPendingExOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeInBoxPendingOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeInBoxPendingExOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeInBoxBlockedOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeInBoxBlockedExOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeOutBoxBlockedOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeOutBoxBlockedExOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeHeaderInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeHeaderInfoBOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeOutBoxNoRouteOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeOutBoxNoRouteExOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeResendOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterchangeCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallBackEventInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallBackEventListExOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallBackAddExOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallBackEventSetStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallBackQueueInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallBackTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallBackPendingListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallBackPendingListExOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailboxDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailboxUseOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailboxListOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailboxListExOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPAddVANOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPAddExOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPMoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPMoveMailboxOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPMoveExOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPUpdateDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPUpdateDataEMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPActivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPSuspendOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPTerminateOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPSetRoutingGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPSearchExOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPListOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPListExOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPListExPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPListByOwnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPFindExOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPGetMailboxDefaultOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPSetMailboxDefaultOperationCompleted;
        
        private System.Threading.SendOrPostCallback TPSetOwnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterconnectAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterconnectNoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterconnectCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterconnectInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterconnectInfoGUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterconnectNoteListOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterconnectListByECGridIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterconnectListByStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterconnectListByStatusExOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterconnectCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterconnectCountExOperationCompleted;
        
        private System.Threading.SendOrPostCallback MigrationAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback MigrationAddExOperationCompleted;
        
        private System.Threading.SendOrPostCallback MigrationListOperationCompleted;
        
        private System.Threading.SendOrPostCallback MigrationListExOperationCompleted;
        
        private System.Threading.SendOrPostCallback MigrationInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback MigrationAddTPOperationCompleted;
        
        private System.Threading.SendOrPostCallback CarbonCopyAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback CarbonCopyAddExOperationCompleted;
        
        private System.Threading.SendOrPostCallback CarbonCopyActivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CarbonCopySuspendOperationCompleted;
        
        private System.Threading.SendOrPostCallback CarbonCopyTerminateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CarbonCopyInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CarbonCopyListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CarbonCopyListExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelInBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelInBoxExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelInBoxExShortOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelDownloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelDownloadAOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelDownloadS3OperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelDownloadNoUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelDownloadNoUpdateAOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelDownloadConfirmOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelAcknowledgmentNoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelDownloadCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelDownloadConfirmPendingAckOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelDownloadResetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelResendOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelUploadAOperationCompleted;
        
        private System.Threading.SendOrPostCallback ParcelUploadExOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateAPIKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GeneratePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback WhoAmIOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserAddExOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserInfobyLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserActivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserSuspendOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserTerminateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserSendSMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserResetOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserListExOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserListLockedOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserListLockedOutExOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserSetNetworkMailboxOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserSetAuthLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserSetMaxSessionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserGetAPIKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SessionLogCurrentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SessionLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback SessionLogExOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyListOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeySetOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyRemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback StatusListOperationCompleted;
        
        private System.Threading.SendOrPostCallback NetworkInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback NetworkInfoWithLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback NetworkListOperationCompleted;
        
        private System.Threading.SendOrPostCallback NetworkStatusSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback NetworkOutageListOperationCompleted;
        
        private System.Threading.SendOrPostCallback NetworkUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback NetworkSetContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback NetworkGetContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback NetworkSetWebsiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback NetworkX12DelimitersOperationCompleted;
        
        private System.Threading.SendOrPostCallback NetworkRootDeleteOnDownloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailboxAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailboxAddExOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailboxActivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailboxSuspendOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailboxTerminateOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailboxManagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailboxDeleteOnDownloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailboxInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailboxNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailboxSetContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailboxX12DelimitersOperationCompleted;
        
        private System.Threading.SendOrPostCallback MailboxInBoxTimeoutOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ECGridOSAPIv4() {
            this.Url = global::SOAP_ECGridOS_API_v4._1.NET_4._8_Console_App.Properties.Settings.Default.SOAP_ECGridOS_API_v4__1_NET_4__8_Console_App_io_ecgrid_os_ECGridOS_x0020_API_x0020_v4;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CallBackPendingListExACompletedEventHandler CallBackPendingListExACompleted;
        
        /// <remarks/>
        public event CallBackFailedListCompletedEventHandler CallBackFailedListCompleted;
        
        /// <remarks/>
        public event CallBackFailedListExCompletedEventHandler CallBackFailedListExCompleted;
        
        /// <remarks/>
        public event ReportMonthlyCompletedEventHandler ReportMonthlyCompleted;
        
        /// <remarks/>
        public event ReportMonthlyExCompletedEventHandler ReportMonthlyExCompleted;
        
        /// <remarks/>
        public event ReportTrafficStatsCompletedEventHandler ReportTrafficStatsCompleted;
        
        /// <remarks/>
        public event ReportTrafficStatsExCompletedEventHandler ReportTrafficStatsExCompleted;
        
        /// <remarks/>
        public event ReportTrafficStatsPublicCompletedEventHandler ReportTrafficStatsPublicCompleted;
        
        /// <remarks/>
        public event ReportInstantStatsCompletedEventHandler ReportInstantStatsCompleted;
        
        /// <remarks/>
        public event ReportInstantStatsExCompletedEventHandler ReportInstantStatsExCompleted;
        
        /// <remarks/>
        public event ReportMailboxStatsCompletedEventHandler ReportMailboxStatsCompleted;
        
        /// <remarks/>
        public event ReportMailboxStatsExCompletedEventHandler ReportMailboxStatsExCompleted;
        
        /// <remarks/>
        public event ReportMailboxInterchangeStatsCompletedEventHandler ReportMailboxInterchangeStatsCompleted;
        
        /// <remarks/>
        public event ReportMailboxInterchangeStatsExCompletedEventHandler ReportMailboxInterchangeStatsExCompleted;
        
        /// <remarks/>
        public event ReportInterchangeStatsCompletedEventHandler ReportInterchangeStatsCompleted;
        
        /// <remarks/>
        public event ReportInterchangeStatsExCompletedEventHandler ReportInterchangeStatsExCompleted;
        
        /// <remarks/>
        public event CommAddCompletedEventHandler CommAddCompleted;
        
        /// <remarks/>
        public event CommSetPairCompletedEventHandler CommSetPairCompleted;
        
        /// <remarks/>
        public event CommPairCompletedEventHandler CommPairCompleted;
        
        /// <remarks/>
        public event CommUpdateCompletedEventHandler CommUpdateCompleted;
        
        /// <remarks/>
        public event CommListCompletedEventHandler CommListCompleted;
        
        /// <remarks/>
        public event CommListExCompletedEventHandler CommListExCompleted;
        
        /// <remarks/>
        public event CommFindCompletedEventHandler CommFindCompleted;
        
        /// <remarks/>
        public event CommInfoCompletedEventHandler CommInfoCompleted;
        
        /// <remarks/>
        public event CommSetStatusCompletedEventHandler CommSetStatusCompleted;
        
        /// <remarks/>
        public event CertificateAddPublicCompletedEventHandler CertificateAddPublicCompleted;
        
        /// <remarks/>
        public event CertificateAddPublicACompletedEventHandler CertificateAddPublicACompleted;
        
        /// <remarks/>
        public event CertAddPrivateCompletedEventHandler CertAddPrivateCompleted;
        
        /// <remarks/>
        public event CertAddPrivateACompletedEventHandler CertAddPrivateACompleted;
        
        /// <remarks/>
        public event CertificateCreatePrivateCompletedEventHandler CertificateCreatePrivateCompleted;
        
        /// <remarks/>
        public event CertificateRenewPrivateCompletedEventHandler CertificateRenewPrivateCompleted;
        
        /// <remarks/>
        public event CertificateTerminateCompletedEventHandler CertificateTerminateCompleted;
        
        /// <remarks/>
        public event CommDefaultMailboxCompletedEventHandler CommDefaultMailboxCompleted;
        
        /// <remarks/>
        public event NowUTCCompletedEventHandler NowUTCCompleted;
        
        /// <remarks/>
        public event InterchangeDateCompletedEventHandler InterchangeDateCompleted;
        
        /// <remarks/>
        public event VersionCompletedEventHandler VersionCompleted;
        
        /// <remarks/>
        public event X400FormatCompletedEventHandler X400FormatCompleted;
        
        /// <remarks/>
        public event ParcelUploadExACompletedEventHandler ParcelUploadExACompleted;
        
        /// <remarks/>
        public event ParcelUpdateStatusCompletedEventHandler ParcelUpdateStatusCompleted;
        
        /// <remarks/>
        public event ParcelUpdateLocalStatusCompletedEventHandler ParcelUpdateLocalStatusCompleted;
        
        /// <remarks/>
        public event ParcelUploadMftCompletedEventHandler ParcelUploadMftCompleted;
        
        /// <remarks/>
        public event ParcelUploadMftACompletedEventHandler ParcelUploadMftACompleted;
        
        /// <remarks/>
        public event ParcelTestCompletedEventHandler ParcelTestCompleted;
        
        /// <remarks/>
        public event ParcelSetMailbagControlIDCompletedEventHandler ParcelSetMailbagControlIDCompleted;
        
        /// <remarks/>
        public event ParcelFindMailbagControlIDCompletedEventHandler ParcelFindMailbagControlIDCompleted;
        
        /// <remarks/>
        public event ParcelFindMailbagControlIDToCompletedEventHandler ParcelFindMailbagControlIDToCompleted;
        
        /// <remarks/>
        public event ParcelManifestCompletedEventHandler ParcelManifestCompleted;
        
        /// <remarks/>
        public event InterchangeManifestCompletedEventHandler InterchangeManifestCompleted;
        
        /// <remarks/>
        public event ParcelNoteListCompletedEventHandler ParcelNoteListCompleted;
        
        /// <remarks/>
        public event ParcelInBoxArchiveCompletedEventHandler ParcelInBoxArchiveCompleted;
        
        /// <remarks/>
        public event ParcelInBoxArchiveExCompletedEventHandler ParcelInBoxArchiveExCompleted;
        
        /// <remarks/>
        public event ParcelInBoxArchiveExShortCompletedEventHandler ParcelInBoxArchiveExShortCompleted;
        
        /// <remarks/>
        public event ParcelInBoxArchiveDescExCompletedEventHandler ParcelInBoxArchiveDescExCompleted;
        
        /// <remarks/>
        public event ParcelOutBoxArchiveCompletedEventHandler ParcelOutBoxArchiveCompleted;
        
        /// <remarks/>
        public event ParcelOutBoxArchiveExCompletedEventHandler ParcelOutBoxArchiveExCompleted;
        
        /// <remarks/>
        public event ParcelOutBoxArchiveExShortCompletedEventHandler ParcelOutBoxArchiveExShortCompleted;
        
        /// <remarks/>
        public event ParcelOutBoxArchiveDescExCompletedEventHandler ParcelOutBoxArchiveDescExCompleted;
        
        /// <remarks/>
        public event ParcelOutBoxErrorCompletedEventHandler ParcelOutBoxErrorCompleted;
        
        /// <remarks/>
        public event ParcelOutBoxErrorExCompletedEventHandler ParcelOutBoxErrorExCompleted;
        
        /// <remarks/>
        public event ParcelOutBoxInProcessCompletedEventHandler ParcelOutBoxInProcessCompleted;
        
        /// <remarks/>
        public event ParcelOutBoxInProcessExCompletedEventHandler ParcelOutBoxInProcessExCompleted;
        
        /// <remarks/>
        public event InterchangeInfoCompletedEventHandler InterchangeInfoCompleted;
        
        /// <remarks/>
        public event InterchangeInBoxCompletedEventHandler InterchangeInBoxCompleted;
        
        /// <remarks/>
        public event InterchangeInBoxArchiveCompletedEventHandler InterchangeInBoxArchiveCompleted;
        
        /// <remarks/>
        public event InterchangeInBoxExCompletedEventHandler InterchangeInBoxExCompleted;
        
        /// <remarks/>
        public event InterchangeInBoxArchiveExCompletedEventHandler InterchangeInBoxArchiveExCompleted;
        
        /// <remarks/>
        public event InterchangeOutBoxCompletedEventHandler InterchangeOutBoxCompleted;
        
        /// <remarks/>
        public event InterchangeOutBoxArchiveCompletedEventHandler InterchangeOutBoxArchiveCompleted;
        
        /// <remarks/>
        public event InterchangeOutBoxExCompletedEventHandler InterchangeOutBoxExCompleted;
        
        /// <remarks/>
        public event InterchangeOutBoxArchiveExCompletedEventHandler InterchangeOutBoxArchiveExCompleted;
        
        /// <remarks/>
        public event InterchangeOutBoxPendingCompletedEventHandler InterchangeOutBoxPendingCompleted;
        
        /// <remarks/>
        public event InterchangeOutBoxPendingExCompletedEventHandler InterchangeOutBoxPendingExCompleted;
        
        /// <remarks/>
        public event InterchangeInBoxPendingCompletedEventHandler InterchangeInBoxPendingCompleted;
        
        /// <remarks/>
        public event InterchangeInBoxPendingExCompletedEventHandler InterchangeInBoxPendingExCompleted;
        
        /// <remarks/>
        public event InterchangeInBoxBlockedCompletedEventHandler InterchangeInBoxBlockedCompleted;
        
        /// <remarks/>
        public event InterchangeInBoxBlockedExCompletedEventHandler InterchangeInBoxBlockedExCompleted;
        
        /// <remarks/>
        public event InterchangeOutBoxBlockedCompletedEventHandler InterchangeOutBoxBlockedCompleted;
        
        /// <remarks/>
        public event InterchangeOutBoxBlockedExCompletedEventHandler InterchangeOutBoxBlockedExCompleted;
        
        /// <remarks/>
        public event InterchangeHeaderInfoCompletedEventHandler InterchangeHeaderInfoCompleted;
        
        /// <remarks/>
        public event InterchangeHeaderInfoBCompletedEventHandler InterchangeHeaderInfoBCompleted;
        
        /// <remarks/>
        public event InterchangeOutBoxNoRouteCompletedEventHandler InterchangeOutBoxNoRouteCompleted;
        
        /// <remarks/>
        public event InterchangeOutBoxNoRouteExCompletedEventHandler InterchangeOutBoxNoRouteExCompleted;
        
        /// <remarks/>
        public event InterchangeResendCompletedEventHandler InterchangeResendCompleted;
        
        /// <remarks/>
        public event InterchangeCancelCompletedEventHandler InterchangeCancelCompleted;
        
        /// <remarks/>
        public event CallBackEventInfoCompletedEventHandler CallBackEventInfoCompleted;
        
        /// <remarks/>
        public event CallBackEventListExCompletedEventHandler CallBackEventListExCompleted;
        
        /// <remarks/>
        public event CallBackAddExCompletedEventHandler CallBackAddExCompleted;
        
        /// <remarks/>
        public event CallBackEventSetStatusCompletedEventHandler CallBackEventSetStatusCompleted;
        
        /// <remarks/>
        public event CallBackQueueInfoCompletedEventHandler CallBackQueueInfoCompleted;
        
        /// <remarks/>
        public event CallBackTestCompletedEventHandler CallBackTestCompleted;
        
        /// <remarks/>
        public event CallBackPendingListCompletedEventHandler CallBackPendingListCompleted;
        
        /// <remarks/>
        public event CallBackPendingListExCompletedEventHandler CallBackPendingListExCompleted;
        
        /// <remarks/>
        public event MailboxDescriptionCompletedEventHandler MailboxDescriptionCompleted;
        
        /// <remarks/>
        public event MailboxUseCompletedEventHandler MailboxUseCompleted;
        
        /// <remarks/>
        public event MailboxListCompletedEventHandler MailboxListCompleted;
        
        /// <remarks/>
        public event MailboxListExCompletedEventHandler MailboxListExCompleted;
        
        /// <remarks/>
        public event TPAddCompletedEventHandler TPAddCompleted;
        
        /// <remarks/>
        public event TPAddVANCompletedEventHandler TPAddVANCompleted;
        
        /// <remarks/>
        public event TPAddExCompletedEventHandler TPAddExCompleted;
        
        /// <remarks/>
        public event TPMoveCompletedEventHandler TPMoveCompleted;
        
        /// <remarks/>
        public event TPMoveMailboxCompletedEventHandler TPMoveMailboxCompleted;
        
        /// <remarks/>
        public event TPMoveExCompletedEventHandler TPMoveExCompleted;
        
        /// <remarks/>
        public event TPUpdateDescriptionCompletedEventHandler TPUpdateDescriptionCompleted;
        
        /// <remarks/>
        public event TPUpdateDataEMailCompletedEventHandler TPUpdateDataEMailCompleted;
        
        /// <remarks/>
        public event TPActivateCompletedEventHandler TPActivateCompleted;
        
        /// <remarks/>
        public event TPSuspendCompletedEventHandler TPSuspendCompleted;
        
        /// <remarks/>
        public event TPTerminateCompletedEventHandler TPTerminateCompleted;
        
        /// <remarks/>
        public event TPSetRoutingGroupCompletedEventHandler TPSetRoutingGroupCompleted;
        
        /// <remarks/>
        public event TPInfoCompletedEventHandler TPInfoCompleted;
        
        /// <remarks/>
        public event TPSearchCompletedEventHandler TPSearchCompleted;
        
        /// <remarks/>
        public event TPSearchExCompletedEventHandler TPSearchExCompleted;
        
        /// <remarks/>
        public event TPListCompletedEventHandler TPListCompleted;
        
        /// <remarks/>
        public event TPListExCompletedEventHandler TPListExCompleted;
        
        /// <remarks/>
        public event TPListExPagedCompletedEventHandler TPListExPagedCompleted;
        
        /// <remarks/>
        public event TPListByOwnerCompletedEventHandler TPListByOwnerCompleted;
        
        /// <remarks/>
        public event TPFindExCompletedEventHandler TPFindExCompleted;
        
        /// <remarks/>
        public event TPGetMailboxDefaultCompletedEventHandler TPGetMailboxDefaultCompleted;
        
        /// <remarks/>
        public event TPSetMailboxDefaultCompletedEventHandler TPSetMailboxDefaultCompleted;
        
        /// <remarks/>
        public event TPSetOwnerCompletedEventHandler TPSetOwnerCompleted;
        
        /// <remarks/>
        public event InterconnectAddCompletedEventHandler InterconnectAddCompleted;
        
        /// <remarks/>
        public event InterconnectNoteCompletedEventHandler InterconnectNoteCompleted;
        
        /// <remarks/>
        public event InterconnectCancelCompletedEventHandler InterconnectCancelCompleted;
        
        /// <remarks/>
        public event InterconnectInfoCompletedEventHandler InterconnectInfoCompleted;
        
        /// <remarks/>
        public event InterconnectInfoGUIDCompletedEventHandler InterconnectInfoGUIDCompleted;
        
        /// <remarks/>
        public event InterconnectNoteListCompletedEventHandler InterconnectNoteListCompleted;
        
        /// <remarks/>
        public event InterconnectListByECGridIDCompletedEventHandler InterconnectListByECGridIDCompleted;
        
        /// <remarks/>
        public event InterconnectListByStatusCompletedEventHandler InterconnectListByStatusCompleted;
        
        /// <remarks/>
        public event InterconnectListByStatusExCompletedEventHandler InterconnectListByStatusExCompleted;
        
        /// <remarks/>
        public event InterconnectCountCompletedEventHandler InterconnectCountCompleted;
        
        /// <remarks/>
        public event InterconnectCountExCompletedEventHandler InterconnectCountExCompleted;
        
        /// <remarks/>
        public event MigrationAddCompletedEventHandler MigrationAddCompleted;
        
        /// <remarks/>
        public event MigrationAddExCompletedEventHandler MigrationAddExCompleted;
        
        /// <remarks/>
        public event MigrationListCompletedEventHandler MigrationListCompleted;
        
        /// <remarks/>
        public event MigrationListExCompletedEventHandler MigrationListExCompleted;
        
        /// <remarks/>
        public event MigrationInfoCompletedEventHandler MigrationInfoCompleted;
        
        /// <remarks/>
        public event MigrationAddTPCompletedEventHandler MigrationAddTPCompleted;
        
        /// <remarks/>
        public event CarbonCopyAddCompletedEventHandler CarbonCopyAddCompleted;
        
        /// <remarks/>
        public event CarbonCopyAddExCompletedEventHandler CarbonCopyAddExCompleted;
        
        /// <remarks/>
        public event CarbonCopyActivateCompletedEventHandler CarbonCopyActivateCompleted;
        
        /// <remarks/>
        public event CarbonCopySuspendCompletedEventHandler CarbonCopySuspendCompleted;
        
        /// <remarks/>
        public event CarbonCopyTerminateCompletedEventHandler CarbonCopyTerminateCompleted;
        
        /// <remarks/>
        public event CarbonCopyInfoCompletedEventHandler CarbonCopyInfoCompleted;
        
        /// <remarks/>
        public event CarbonCopyListCompletedEventHandler CarbonCopyListCompleted;
        
        /// <remarks/>
        public event CarbonCopyListExCompletedEventHandler CarbonCopyListExCompleted;
        
        /// <remarks/>
        public event ParcelInBoxCompletedEventHandler ParcelInBoxCompleted;
        
        /// <remarks/>
        public event ParcelInBoxExCompletedEventHandler ParcelInBoxExCompleted;
        
        /// <remarks/>
        public event ParcelInBoxExShortCompletedEventHandler ParcelInBoxExShortCompleted;
        
        /// <remarks/>
        public event ParcelInfoCompletedEventHandler ParcelInfoCompleted;
        
        /// <remarks/>
        public event ParcelDownloadCompletedEventHandler ParcelDownloadCompleted;
        
        /// <remarks/>
        public event ParcelDownloadACompletedEventHandler ParcelDownloadACompleted;
        
        /// <remarks/>
        public event ParcelDownloadS3CompletedEventHandler ParcelDownloadS3Completed;
        
        /// <remarks/>
        public event ParcelDownloadNoUpdateCompletedEventHandler ParcelDownloadNoUpdateCompleted;
        
        /// <remarks/>
        public event ParcelDownloadNoUpdateACompletedEventHandler ParcelDownloadNoUpdateACompleted;
        
        /// <remarks/>
        public event ParcelDownloadConfirmCompletedEventHandler ParcelDownloadConfirmCompleted;
        
        /// <remarks/>
        public event ParcelAcknowledgmentNoteCompletedEventHandler ParcelAcknowledgmentNoteCompleted;
        
        /// <remarks/>
        public event ParcelDownloadCancelCompletedEventHandler ParcelDownloadCancelCompleted;
        
        /// <remarks/>
        public event ParcelDownloadConfirmPendingAckCompletedEventHandler ParcelDownloadConfirmPendingAckCompleted;
        
        /// <remarks/>
        public event ParcelDownloadResetCompletedEventHandler ParcelDownloadResetCompleted;
        
        /// <remarks/>
        public event ParcelResendCompletedEventHandler ParcelResendCompleted;
        
        /// <remarks/>
        public event ParcelUploadCompletedEventHandler ParcelUploadCompleted;
        
        /// <remarks/>
        public event ParcelUploadACompletedEventHandler ParcelUploadACompleted;
        
        /// <remarks/>
        public event ParcelUploadExCompletedEventHandler ParcelUploadExCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event GenerateAPIKeyCompletedEventHandler GenerateAPIKeyCompleted;
        
        /// <remarks/>
        public event GeneratePasswordCompletedEventHandler GeneratePasswordCompleted;
        
        /// <remarks/>
        public event LogoutCompletedEventHandler LogoutCompleted;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        public event WhoAmICompletedEventHandler WhoAmICompleted;
        
        /// <remarks/>
        public event UserAddCompletedEventHandler UserAddCompleted;
        
        /// <remarks/>
        public event UserAddExCompletedEventHandler UserAddExCompleted;
        
        /// <remarks/>
        public event UserInfoCompletedEventHandler UserInfoCompleted;
        
        /// <remarks/>
        public event UserInfobyLoginCompletedEventHandler UserInfobyLoginCompleted;
        
        /// <remarks/>
        public event UserUpdateCompletedEventHandler UserUpdateCompleted;
        
        /// <remarks/>
        public event UserPasswordCompletedEventHandler UserPasswordCompleted;
        
        /// <remarks/>
        public event UserActivateCompletedEventHandler UserActivateCompleted;
        
        /// <remarks/>
        public event UserSuspendCompletedEventHandler UserSuspendCompleted;
        
        /// <remarks/>
        public event UserTerminateCompletedEventHandler UserTerminateCompleted;
        
        /// <remarks/>
        public event UserSendSMSCompletedEventHandler UserSendSMSCompleted;
        
        /// <remarks/>
        public event UserResetCompletedEventHandler UserResetCompleted;
        
        /// <remarks/>
        public event UserListCompletedEventHandler UserListCompleted;
        
        /// <remarks/>
        public event UserListExCompletedEventHandler UserListExCompleted;
        
        /// <remarks/>
        public event UserListLockedOutCompletedEventHandler UserListLockedOutCompleted;
        
        /// <remarks/>
        public event UserListLockedOutExCompletedEventHandler UserListLockedOutExCompleted;
        
        /// <remarks/>
        public event UserSetNetworkMailboxCompletedEventHandler UserSetNetworkMailboxCompleted;
        
        /// <remarks/>
        public event UserSetAuthLevelCompletedEventHandler UserSetAuthLevelCompleted;
        
        /// <remarks/>
        public event UserSetMaxSessionsCompletedEventHandler UserSetMaxSessionsCompleted;
        
        /// <remarks/>
        public event UserGetAPIKeyCompletedEventHandler UserGetAPIKeyCompleted;
        
        /// <remarks/>
        public event SessionLogCurrentCompletedEventHandler SessionLogCurrentCompleted;
        
        /// <remarks/>
        public event SessionLogCompletedEventHandler SessionLogCompleted;
        
        /// <remarks/>
        public event SessionLogExCompletedEventHandler SessionLogExCompleted;
        
        /// <remarks/>
        public event KeyGetCompletedEventHandler KeyGetCompleted;
        
        /// <remarks/>
        public event KeyListCompletedEventHandler KeyListCompleted;
        
        /// <remarks/>
        public event KeySetCompletedEventHandler KeySetCompleted;
        
        /// <remarks/>
        public event KeyRemoveCompletedEventHandler KeyRemoveCompleted;
        
        /// <remarks/>
        public event StatusListCompletedEventHandler StatusListCompleted;
        
        /// <remarks/>
        public event NetworkInfoCompletedEventHandler NetworkInfoCompleted;
        
        /// <remarks/>
        public event NetworkInfoWithLogCompletedEventHandler NetworkInfoWithLogCompleted;
        
        /// <remarks/>
        public event NetworkListCompletedEventHandler NetworkListCompleted;
        
        /// <remarks/>
        public event NetworkStatusSummaryCompletedEventHandler NetworkStatusSummaryCompleted;
        
        /// <remarks/>
        public event NetworkOutageListCompletedEventHandler NetworkOutageListCompleted;
        
        /// <remarks/>
        public event NetworkUpdateCompletedEventHandler NetworkUpdateCompleted;
        
        /// <remarks/>
        public event NetworkSetContactCompletedEventHandler NetworkSetContactCompleted;
        
        /// <remarks/>
        public event NetworkGetContactCompletedEventHandler NetworkGetContactCompleted;
        
        /// <remarks/>
        public event NetworkSetWebsiteCompletedEventHandler NetworkSetWebsiteCompleted;
        
        /// <remarks/>
        public event NetworkX12DelimitersCompletedEventHandler NetworkX12DelimitersCompleted;
        
        /// <remarks/>
        public event NetworkRootDeleteOnDownloadCompletedEventHandler NetworkRootDeleteOnDownloadCompleted;
        
        /// <remarks/>
        public event MailboxAddCompletedEventHandler MailboxAddCompleted;
        
        /// <remarks/>
        public event MailboxAddExCompletedEventHandler MailboxAddExCompleted;
        
        /// <remarks/>
        public event MailboxActivateCompletedEventHandler MailboxActivateCompleted;
        
        /// <remarks/>
        public event MailboxSuspendCompletedEventHandler MailboxSuspendCompleted;
        
        /// <remarks/>
        public event MailboxTerminateCompletedEventHandler MailboxTerminateCompleted;
        
        /// <remarks/>
        public event MailboxManagedCompletedEventHandler MailboxManagedCompleted;
        
        /// <remarks/>
        public event MailboxDeleteOnDownloadCompletedEventHandler MailboxDeleteOnDownloadCompleted;
        
        /// <remarks/>
        public event MailboxInfoCompletedEventHandler MailboxInfoCompleted;
        
        /// <remarks/>
        public event MailboxNameCompletedEventHandler MailboxNameCompleted;
        
        /// <remarks/>
        public event MailboxSetContactCompletedEventHandler MailboxSetContactCompleted;
        
        /// <remarks/>
        public event MailboxX12DelimitersCompletedEventHandler MailboxX12DelimitersCompleted;
        
        /// <remarks/>
        public event MailboxInBoxTimeoutCompletedEventHandler MailboxInBoxTimeoutCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CallBackPendingListExA", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CallBackQueueIDInfo[] CallBackPendingListExA(string SessionID, int NetworkID, int MailboxID, string NetworkExclude) {
            object[] results = this.Invoke("CallBackPendingListExA", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        NetworkExclude});
            return ((CallBackQueueIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void CallBackPendingListExAAsync(string SessionID, int NetworkID, int MailboxID, string NetworkExclude) {
            this.CallBackPendingListExAAsync(SessionID, NetworkID, MailboxID, NetworkExclude, null);
        }
        
        /// <remarks/>
        public void CallBackPendingListExAAsync(string SessionID, int NetworkID, int MailboxID, string NetworkExclude, object userState) {
            if ((this.CallBackPendingListExAOperationCompleted == null)) {
                this.CallBackPendingListExAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallBackPendingListExAOperationCompleted);
            }
            this.InvokeAsync("CallBackPendingListExA", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        NetworkExclude}, this.CallBackPendingListExAOperationCompleted, userState);
        }
        
        private void OnCallBackPendingListExAOperationCompleted(object arg) {
            if ((this.CallBackPendingListExACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallBackPendingListExACompleted(this, new CallBackPendingListExACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CallBackFailedList", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CallBackQueueIDInfo[] CallBackFailedList(string SessionID, short MaxDays) {
            object[] results = this.Invoke("CallBackFailedList", new object[] {
                        SessionID,
                        MaxDays});
            return ((CallBackQueueIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void CallBackFailedListAsync(string SessionID, short MaxDays) {
            this.CallBackFailedListAsync(SessionID, MaxDays, null);
        }
        
        /// <remarks/>
        public void CallBackFailedListAsync(string SessionID, short MaxDays, object userState) {
            if ((this.CallBackFailedListOperationCompleted == null)) {
                this.CallBackFailedListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallBackFailedListOperationCompleted);
            }
            this.InvokeAsync("CallBackFailedList", new object[] {
                        SessionID,
                        MaxDays}, this.CallBackFailedListOperationCompleted, userState);
        }
        
        private void OnCallBackFailedListOperationCompleted(object arg) {
            if ((this.CallBackFailedListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallBackFailedListCompleted(this, new CallBackFailedListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CallBackFailedListEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CallBackQueueIDInfo[] CallBackFailedListEx(string SessionID, int NetworkID, int MailboxID, short MaxDays) {
            object[] results = this.Invoke("CallBackFailedListEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        MaxDays});
            return ((CallBackQueueIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void CallBackFailedListExAsync(string SessionID, int NetworkID, int MailboxID, short MaxDays) {
            this.CallBackFailedListExAsync(SessionID, NetworkID, MailboxID, MaxDays, null);
        }
        
        /// <remarks/>
        public void CallBackFailedListExAsync(string SessionID, int NetworkID, int MailboxID, short MaxDays, object userState) {
            if ((this.CallBackFailedListExOperationCompleted == null)) {
                this.CallBackFailedListExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallBackFailedListExOperationCompleted);
            }
            this.InvokeAsync("CallBackFailedListEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        MaxDays}, this.CallBackFailedListExOperationCompleted, userState);
        }
        
        private void OnCallBackFailedListExOperationCompleted(object arg) {
            if ((this.CallBackFailedListExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallBackFailedListExCompleted(this, new CallBackFailedListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ReportMonthly", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReportMonthly(string SessionID, short Report, System.DateTime Month) {
            object[] results = this.Invoke("ReportMonthly", new object[] {
                        SessionID,
                        Report,
                        Month});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReportMonthlyAsync(string SessionID, short Report, System.DateTime Month) {
            this.ReportMonthlyAsync(SessionID, Report, Month, null);
        }
        
        /// <remarks/>
        public void ReportMonthlyAsync(string SessionID, short Report, System.DateTime Month, object userState) {
            if ((this.ReportMonthlyOperationCompleted == null)) {
                this.ReportMonthlyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportMonthlyOperationCompleted);
            }
            this.InvokeAsync("ReportMonthly", new object[] {
                        SessionID,
                        Report,
                        Month}, this.ReportMonthlyOperationCompleted, userState);
        }
        
        private void OnReportMonthlyOperationCompleted(object arg) {
            if ((this.ReportMonthlyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportMonthlyCompleted(this, new ReportMonthlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ReportMonthlyEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReportMonthlyEx(string SessionID, int NetworkID, int MailboxID, short Report, System.DateTime Month) {
            object[] results = this.Invoke("ReportMonthlyEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        Report,
                        Month});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReportMonthlyExAsync(string SessionID, int NetworkID, int MailboxID, short Report, System.DateTime Month) {
            this.ReportMonthlyExAsync(SessionID, NetworkID, MailboxID, Report, Month, null);
        }
        
        /// <remarks/>
        public void ReportMonthlyExAsync(string SessionID, int NetworkID, int MailboxID, short Report, System.DateTime Month, object userState) {
            if ((this.ReportMonthlyExOperationCompleted == null)) {
                this.ReportMonthlyExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportMonthlyExOperationCompleted);
            }
            this.InvokeAsync("ReportMonthlyEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        Report,
                        Month}, this.ReportMonthlyExOperationCompleted, userState);
        }
        
        private void OnReportMonthlyExOperationCompleted(object arg) {
            if ((this.ReportMonthlyExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportMonthlyExCompleted(this, new ReportMonthlyExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ReportTrafficStats", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReportTrafficStats(string SessionID, System.DateTime TargetTime, short NumPeriods, StatisticsPeriod Period) {
            object[] results = this.Invoke("ReportTrafficStats", new object[] {
                        SessionID,
                        TargetTime,
                        NumPeriods,
                        Period});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReportTrafficStatsAsync(string SessionID, System.DateTime TargetTime, short NumPeriods, StatisticsPeriod Period) {
            this.ReportTrafficStatsAsync(SessionID, TargetTime, NumPeriods, Period, null);
        }
        
        /// <remarks/>
        public void ReportTrafficStatsAsync(string SessionID, System.DateTime TargetTime, short NumPeriods, StatisticsPeriod Period, object userState) {
            if ((this.ReportTrafficStatsOperationCompleted == null)) {
                this.ReportTrafficStatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportTrafficStatsOperationCompleted);
            }
            this.InvokeAsync("ReportTrafficStats", new object[] {
                        SessionID,
                        TargetTime,
                        NumPeriods,
                        Period}, this.ReportTrafficStatsOperationCompleted, userState);
        }
        
        private void OnReportTrafficStatsOperationCompleted(object arg) {
            if ((this.ReportTrafficStatsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportTrafficStatsCompleted(this, new ReportTrafficStatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ReportTrafficStatsEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReportTrafficStatsEx(string SessionID, int NetworkID, int MailboxID, System.DateTime TargetTime, short NumPeriods, StatisticsPeriod Period) {
            object[] results = this.Invoke("ReportTrafficStatsEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        TargetTime,
                        NumPeriods,
                        Period});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReportTrafficStatsExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime TargetTime, short NumPeriods, StatisticsPeriod Period) {
            this.ReportTrafficStatsExAsync(SessionID, NetworkID, MailboxID, TargetTime, NumPeriods, Period, null);
        }
        
        /// <remarks/>
        public void ReportTrafficStatsExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime TargetTime, short NumPeriods, StatisticsPeriod Period, object userState) {
            if ((this.ReportTrafficStatsExOperationCompleted == null)) {
                this.ReportTrafficStatsExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportTrafficStatsExOperationCompleted);
            }
            this.InvokeAsync("ReportTrafficStatsEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        TargetTime,
                        NumPeriods,
                        Period}, this.ReportTrafficStatsExOperationCompleted, userState);
        }
        
        private void OnReportTrafficStatsExOperationCompleted(object arg) {
            if ((this.ReportTrafficStatsExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportTrafficStatsExCompleted(this, new ReportTrafficStatsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ReportTrafficStatsPublic", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReportTrafficStatsPublic() {
            object[] results = this.Invoke("ReportTrafficStatsPublic", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReportTrafficStatsPublicAsync() {
            this.ReportTrafficStatsPublicAsync(null);
        }
        
        /// <remarks/>
        public void ReportTrafficStatsPublicAsync(object userState) {
            if ((this.ReportTrafficStatsPublicOperationCompleted == null)) {
                this.ReportTrafficStatsPublicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportTrafficStatsPublicOperationCompleted);
            }
            this.InvokeAsync("ReportTrafficStatsPublic", new object[0], this.ReportTrafficStatsPublicOperationCompleted, userState);
        }
        
        private void OnReportTrafficStatsPublicOperationCompleted(object arg) {
            if ((this.ReportTrafficStatsPublicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportTrafficStatsPublicCompleted(this, new ReportTrafficStatsPublicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ReportInstantStats", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReportInstantStats(string SessionID, short Minutes1, short Minutes2) {
            object[] results = this.Invoke("ReportInstantStats", new object[] {
                        SessionID,
                        Minutes1,
                        Minutes2});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReportInstantStatsAsync(string SessionID, short Minutes1, short Minutes2) {
            this.ReportInstantStatsAsync(SessionID, Minutes1, Minutes2, null);
        }
        
        /// <remarks/>
        public void ReportInstantStatsAsync(string SessionID, short Minutes1, short Minutes2, object userState) {
            if ((this.ReportInstantStatsOperationCompleted == null)) {
                this.ReportInstantStatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportInstantStatsOperationCompleted);
            }
            this.InvokeAsync("ReportInstantStats", new object[] {
                        SessionID,
                        Minutes1,
                        Minutes2}, this.ReportInstantStatsOperationCompleted, userState);
        }
        
        private void OnReportInstantStatsOperationCompleted(object arg) {
            if ((this.ReportInstantStatsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportInstantStatsCompleted(this, new ReportInstantStatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ReportInstantStatsEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReportInstantStatsEx(string SessionID, int NetworkID, int MailboxID, int ECGridID, short Minutes1, short Minutes2) {
            object[] results = this.Invoke("ReportInstantStatsEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridID,
                        Minutes1,
                        Minutes2});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReportInstantStatsExAsync(string SessionID, int NetworkID, int MailboxID, int ECGridID, short Minutes1, short Minutes2) {
            this.ReportInstantStatsExAsync(SessionID, NetworkID, MailboxID, ECGridID, Minutes1, Minutes2, null);
        }
        
        /// <remarks/>
        public void ReportInstantStatsExAsync(string SessionID, int NetworkID, int MailboxID, int ECGridID, short Minutes1, short Minutes2, object userState) {
            if ((this.ReportInstantStatsExOperationCompleted == null)) {
                this.ReportInstantStatsExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportInstantStatsExOperationCompleted);
            }
            this.InvokeAsync("ReportInstantStatsEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridID,
                        Minutes1,
                        Minutes2}, this.ReportInstantStatsExOperationCompleted, userState);
        }
        
        private void OnReportInstantStatsExOperationCompleted(object arg) {
            if ((this.ReportInstantStatsExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportInstantStatsExCompleted(this, new ReportInstantStatsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ReportMailboxStats", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReportMailboxStats(string SessionID) {
            object[] results = this.Invoke("ReportMailboxStats", new object[] {
                        SessionID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReportMailboxStatsAsync(string SessionID) {
            this.ReportMailboxStatsAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void ReportMailboxStatsAsync(string SessionID, object userState) {
            if ((this.ReportMailboxStatsOperationCompleted == null)) {
                this.ReportMailboxStatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportMailboxStatsOperationCompleted);
            }
            this.InvokeAsync("ReportMailboxStats", new object[] {
                        SessionID}, this.ReportMailboxStatsOperationCompleted, userState);
        }
        
        private void OnReportMailboxStatsOperationCompleted(object arg) {
            if ((this.ReportMailboxStatsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportMailboxStatsCompleted(this, new ReportMailboxStatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ReportMailboxStatsEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReportMailboxStatsEx(string SessionID, int NetworkID, int MailboxID) {
            object[] results = this.Invoke("ReportMailboxStatsEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReportMailboxStatsExAsync(string SessionID, int NetworkID, int MailboxID) {
            this.ReportMailboxStatsExAsync(SessionID, NetworkID, MailboxID, null);
        }
        
        /// <remarks/>
        public void ReportMailboxStatsExAsync(string SessionID, int NetworkID, int MailboxID, object userState) {
            if ((this.ReportMailboxStatsExOperationCompleted == null)) {
                this.ReportMailboxStatsExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportMailboxStatsExOperationCompleted);
            }
            this.InvokeAsync("ReportMailboxStatsEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID}, this.ReportMailboxStatsExOperationCompleted, userState);
        }
        
        private void OnReportMailboxStatsExOperationCompleted(object arg) {
            if ((this.ReportMailboxStatsExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportMailboxStatsExCompleted(this, new ReportMailboxStatsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ReportMailboxInterchangeStats", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReportMailboxInterchangeStats(string SessionID) {
            object[] results = this.Invoke("ReportMailboxInterchangeStats", new object[] {
                        SessionID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReportMailboxInterchangeStatsAsync(string SessionID) {
            this.ReportMailboxInterchangeStatsAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void ReportMailboxInterchangeStatsAsync(string SessionID, object userState) {
            if ((this.ReportMailboxInterchangeStatsOperationCompleted == null)) {
                this.ReportMailboxInterchangeStatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportMailboxInterchangeStatsOperationCompleted);
            }
            this.InvokeAsync("ReportMailboxInterchangeStats", new object[] {
                        SessionID}, this.ReportMailboxInterchangeStatsOperationCompleted, userState);
        }
        
        private void OnReportMailboxInterchangeStatsOperationCompleted(object arg) {
            if ((this.ReportMailboxInterchangeStatsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportMailboxInterchangeStatsCompleted(this, new ReportMailboxInterchangeStatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ReportMailboxInterchangeStatsEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReportMailboxInterchangeStatsEx(string SessionID, int NetworkID, int MailboxID) {
            object[] results = this.Invoke("ReportMailboxInterchangeStatsEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReportMailboxInterchangeStatsExAsync(string SessionID, int NetworkID, int MailboxID) {
            this.ReportMailboxInterchangeStatsExAsync(SessionID, NetworkID, MailboxID, null);
        }
        
        /// <remarks/>
        public void ReportMailboxInterchangeStatsExAsync(string SessionID, int NetworkID, int MailboxID, object userState) {
            if ((this.ReportMailboxInterchangeStatsExOperationCompleted == null)) {
                this.ReportMailboxInterchangeStatsExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportMailboxInterchangeStatsExOperationCompleted);
            }
            this.InvokeAsync("ReportMailboxInterchangeStatsEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID}, this.ReportMailboxInterchangeStatsExOperationCompleted, userState);
        }
        
        private void OnReportMailboxInterchangeStatsExOperationCompleted(object arg) {
            if ((this.ReportMailboxInterchangeStatsExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportMailboxInterchangeStatsExCompleted(this, new ReportMailboxInterchangeStatsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ReportInterchangeStats", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReportInterchangeStats(string SessionID, System.DateTime StartTime, System.DateTime EndTime, Direction Direction) {
            object[] results = this.Invoke("ReportInterchangeStats", new object[] {
                        SessionID,
                        StartTime,
                        EndTime,
                        Direction});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReportInterchangeStatsAsync(string SessionID, System.DateTime StartTime, System.DateTime EndTime, Direction Direction) {
            this.ReportInterchangeStatsAsync(SessionID, StartTime, EndTime, Direction, null);
        }
        
        /// <remarks/>
        public void ReportInterchangeStatsAsync(string SessionID, System.DateTime StartTime, System.DateTime EndTime, Direction Direction, object userState) {
            if ((this.ReportInterchangeStatsOperationCompleted == null)) {
                this.ReportInterchangeStatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportInterchangeStatsOperationCompleted);
            }
            this.InvokeAsync("ReportInterchangeStats", new object[] {
                        SessionID,
                        StartTime,
                        EndTime,
                        Direction}, this.ReportInterchangeStatsOperationCompleted, userState);
        }
        
        private void OnReportInterchangeStatsOperationCompleted(object arg) {
            if ((this.ReportInterchangeStatsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportInterchangeStatsCompleted(this, new ReportInterchangeStatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ReportInterchangeStatsEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ReportInterchangeStatsEx(string SessionID, System.DateTime StartTime, System.DateTime EndTime, Direction Direction, int NetworkID, int MailboxID) {
            object[] results = this.Invoke("ReportInterchangeStatsEx", new object[] {
                        SessionID,
                        StartTime,
                        EndTime,
                        Direction,
                        NetworkID,
                        MailboxID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReportInterchangeStatsExAsync(string SessionID, System.DateTime StartTime, System.DateTime EndTime, Direction Direction, int NetworkID, int MailboxID) {
            this.ReportInterchangeStatsExAsync(SessionID, StartTime, EndTime, Direction, NetworkID, MailboxID, null);
        }
        
        /// <remarks/>
        public void ReportInterchangeStatsExAsync(string SessionID, System.DateTime StartTime, System.DateTime EndTime, Direction Direction, int NetworkID, int MailboxID, object userState) {
            if ((this.ReportInterchangeStatsExOperationCompleted == null)) {
                this.ReportInterchangeStatsExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportInterchangeStatsExOperationCompleted);
            }
            this.InvokeAsync("ReportInterchangeStatsEx", new object[] {
                        SessionID,
                        StartTime,
                        EndTime,
                        Direction,
                        NetworkID,
                        MailboxID}, this.ReportInterchangeStatsExOperationCompleted, userState);
        }
        
        private void OnReportInterchangeStatsExOperationCompleted(object arg) {
            if ((this.ReportInterchangeStatsExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportInterchangeStatsExCompleted(this, new ReportInterchangeStatsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CommAdd", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommIDInfo CommAdd(
                    string SessionID, 
                    int NetworkID, 
                    int MailboxID, 
                    NetworkGatewayCommChannel CommType, 
                    int OwnerUserID, 
                    bool ECGridHosted, 
                    string Identifier, 
                    string URL, 
                    string Version, 
                    bool SignData, 
                    bool EncryptData, 
                    bool CompressData, 
                    ReceiptType ReceiptType, 
                    HTTPAuthType HTTPAuthentication, 
                    string HTTPUser, 
                    string HTTPPassword, 
                    UseType UseType, 
                    System.DateTime BeginUsage, 
                    System.DateTime EndUsage, 
                    Status Status) {
            object[] results = this.Invoke("CommAdd", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        CommType,
                        OwnerUserID,
                        ECGridHosted,
                        Identifier,
                        URL,
                        Version,
                        SignData,
                        EncryptData,
                        CompressData,
                        ReceiptType,
                        HTTPAuthentication,
                        HTTPUser,
                        HTTPPassword,
                        UseType,
                        BeginUsage,
                        EndUsage,
                        Status});
            return ((CommIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CommAddAsync(
                    string SessionID, 
                    int NetworkID, 
                    int MailboxID, 
                    NetworkGatewayCommChannel CommType, 
                    int OwnerUserID, 
                    bool ECGridHosted, 
                    string Identifier, 
                    string URL, 
                    string Version, 
                    bool SignData, 
                    bool EncryptData, 
                    bool CompressData, 
                    ReceiptType ReceiptType, 
                    HTTPAuthType HTTPAuthentication, 
                    string HTTPUser, 
                    string HTTPPassword, 
                    UseType UseType, 
                    System.DateTime BeginUsage, 
                    System.DateTime EndUsage, 
                    Status Status) {
            this.CommAddAsync(SessionID, NetworkID, MailboxID, CommType, OwnerUserID, ECGridHosted, Identifier, URL, Version, SignData, EncryptData, CompressData, ReceiptType, HTTPAuthentication, HTTPUser, HTTPPassword, UseType, BeginUsage, EndUsage, Status, null);
        }
        
        /// <remarks/>
        public void CommAddAsync(
                    string SessionID, 
                    int NetworkID, 
                    int MailboxID, 
                    NetworkGatewayCommChannel CommType, 
                    int OwnerUserID, 
                    bool ECGridHosted, 
                    string Identifier, 
                    string URL, 
                    string Version, 
                    bool SignData, 
                    bool EncryptData, 
                    bool CompressData, 
                    ReceiptType ReceiptType, 
                    HTTPAuthType HTTPAuthentication, 
                    string HTTPUser, 
                    string HTTPPassword, 
                    UseType UseType, 
                    System.DateTime BeginUsage, 
                    System.DateTime EndUsage, 
                    Status Status, 
                    object userState) {
            if ((this.CommAddOperationCompleted == null)) {
                this.CommAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommAddOperationCompleted);
            }
            this.InvokeAsync("CommAdd", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        CommType,
                        OwnerUserID,
                        ECGridHosted,
                        Identifier,
                        URL,
                        Version,
                        SignData,
                        EncryptData,
                        CompressData,
                        ReceiptType,
                        HTTPAuthentication,
                        HTTPUser,
                        HTTPPassword,
                        UseType,
                        BeginUsage,
                        EndUsage,
                        Status}, this.CommAddOperationCompleted, userState);
        }
        
        private void OnCommAddOperationCompleted(object arg) {
            if ((this.CommAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommAddCompleted(this, new CommAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CommSetPair", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommIDInfo[] CommSetPair(string SessionID, int ECGridIDFrom, int ECGridIDTo, string Identifier1, string Identifier2) {
            object[] results = this.Invoke("CommSetPair", new object[] {
                        SessionID,
                        ECGridIDFrom,
                        ECGridIDTo,
                        Identifier1,
                        Identifier2});
            return ((CommIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void CommSetPairAsync(string SessionID, int ECGridIDFrom, int ECGridIDTo, string Identifier1, string Identifier2) {
            this.CommSetPairAsync(SessionID, ECGridIDFrom, ECGridIDTo, Identifier1, Identifier2, null);
        }
        
        /// <remarks/>
        public void CommSetPairAsync(string SessionID, int ECGridIDFrom, int ECGridIDTo, string Identifier1, string Identifier2, object userState) {
            if ((this.CommSetPairOperationCompleted == null)) {
                this.CommSetPairOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommSetPairOperationCompleted);
            }
            this.InvokeAsync("CommSetPair", new object[] {
                        SessionID,
                        ECGridIDFrom,
                        ECGridIDTo,
                        Identifier1,
                        Identifier2}, this.CommSetPairOperationCompleted, userState);
        }
        
        private void OnCommSetPairOperationCompleted(object arg) {
            if ((this.CommSetPairCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommSetPairCompleted(this, new CommSetPairCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CommPair", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommIDInfo[] CommPair(string SessionID, NetworkGatewayCommChannel CommType, int ECGridIDFrom, int ECGridIDTo, string DefaultID, bool TestMode) {
            object[] results = this.Invoke("CommPair", new object[] {
                        SessionID,
                        CommType,
                        ECGridIDFrom,
                        ECGridIDTo,
                        DefaultID,
                        TestMode});
            return ((CommIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void CommPairAsync(string SessionID, NetworkGatewayCommChannel CommType, int ECGridIDFrom, int ECGridIDTo, string DefaultID, bool TestMode) {
            this.CommPairAsync(SessionID, CommType, ECGridIDFrom, ECGridIDTo, DefaultID, TestMode, null);
        }
        
        /// <remarks/>
        public void CommPairAsync(string SessionID, NetworkGatewayCommChannel CommType, int ECGridIDFrom, int ECGridIDTo, string DefaultID, bool TestMode, object userState) {
            if ((this.CommPairOperationCompleted == null)) {
                this.CommPairOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommPairOperationCompleted);
            }
            this.InvokeAsync("CommPair", new object[] {
                        SessionID,
                        CommType,
                        ECGridIDFrom,
                        ECGridIDTo,
                        DefaultID,
                        TestMode}, this.CommPairOperationCompleted, userState);
        }
        
        private void OnCommPairOperationCompleted(object arg) {
            if ((this.CommPairCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommPairCompleted(this, new CommPairCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CommUpdate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommIDInfo CommUpdate(
                    string SessionID, 
                    int CommID, 
                    int OwnerUserID, 
                    string Identifier, 
                    string URL, 
                    string Version, 
                    bool SignData, 
                    bool EncryptData, 
                    bool CompressData, 
                    ReceiptType ReceiptType, 
                    HTTPAuthType HTTPAuthentication, 
                    string HTTPUser, 
                    string HTTPPassword, 
                    UseType UseType, 
                    System.DateTime BeginUsage, 
                    System.DateTime EndUsage) {
            object[] results = this.Invoke("CommUpdate", new object[] {
                        SessionID,
                        CommID,
                        OwnerUserID,
                        Identifier,
                        URL,
                        Version,
                        SignData,
                        EncryptData,
                        CompressData,
                        ReceiptType,
                        HTTPAuthentication,
                        HTTPUser,
                        HTTPPassword,
                        UseType,
                        BeginUsage,
                        EndUsage});
            return ((CommIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CommUpdateAsync(
                    string SessionID, 
                    int CommID, 
                    int OwnerUserID, 
                    string Identifier, 
                    string URL, 
                    string Version, 
                    bool SignData, 
                    bool EncryptData, 
                    bool CompressData, 
                    ReceiptType ReceiptType, 
                    HTTPAuthType HTTPAuthentication, 
                    string HTTPUser, 
                    string HTTPPassword, 
                    UseType UseType, 
                    System.DateTime BeginUsage, 
                    System.DateTime EndUsage) {
            this.CommUpdateAsync(SessionID, CommID, OwnerUserID, Identifier, URL, Version, SignData, EncryptData, CompressData, ReceiptType, HTTPAuthentication, HTTPUser, HTTPPassword, UseType, BeginUsage, EndUsage, null);
        }
        
        /// <remarks/>
        public void CommUpdateAsync(
                    string SessionID, 
                    int CommID, 
                    int OwnerUserID, 
                    string Identifier, 
                    string URL, 
                    string Version, 
                    bool SignData, 
                    bool EncryptData, 
                    bool CompressData, 
                    ReceiptType ReceiptType, 
                    HTTPAuthType HTTPAuthentication, 
                    string HTTPUser, 
                    string HTTPPassword, 
                    UseType UseType, 
                    System.DateTime BeginUsage, 
                    System.DateTime EndUsage, 
                    object userState) {
            if ((this.CommUpdateOperationCompleted == null)) {
                this.CommUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommUpdateOperationCompleted);
            }
            this.InvokeAsync("CommUpdate", new object[] {
                        SessionID,
                        CommID,
                        OwnerUserID,
                        Identifier,
                        URL,
                        Version,
                        SignData,
                        EncryptData,
                        CompressData,
                        ReceiptType,
                        HTTPAuthentication,
                        HTTPUser,
                        HTTPPassword,
                        UseType,
                        BeginUsage,
                        EndUsage}, this.CommUpdateOperationCompleted, userState);
        }
        
        private void OnCommUpdateOperationCompleted(object arg) {
            if ((this.CommUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommUpdateCompleted(this, new CommUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CommList", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommIDInfo[] CommList(string SessionID, NetworkGatewayCommChannel CommType, bool PrivateKeyRequired, UseType UseType, bool ShowInactive, bool WithCerts) {
            object[] results = this.Invoke("CommList", new object[] {
                        SessionID,
                        CommType,
                        PrivateKeyRequired,
                        UseType,
                        ShowInactive,
                        WithCerts});
            return ((CommIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void CommListAsync(string SessionID, NetworkGatewayCommChannel CommType, bool PrivateKeyRequired, UseType UseType, bool ShowInactive, bool WithCerts) {
            this.CommListAsync(SessionID, CommType, PrivateKeyRequired, UseType, ShowInactive, WithCerts, null);
        }
        
        /// <remarks/>
        public void CommListAsync(string SessionID, NetworkGatewayCommChannel CommType, bool PrivateKeyRequired, UseType UseType, bool ShowInactive, bool WithCerts, object userState) {
            if ((this.CommListOperationCompleted == null)) {
                this.CommListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommListOperationCompleted);
            }
            this.InvokeAsync("CommList", new object[] {
                        SessionID,
                        CommType,
                        PrivateKeyRequired,
                        UseType,
                        ShowInactive,
                        WithCerts}, this.CommListOperationCompleted, userState);
        }
        
        private void OnCommListOperationCompleted(object arg) {
            if ((this.CommListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommListCompleted(this, new CommListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CommListEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommIDInfo[] CommListEx(string SessionID, int NetworkID, int MailboxID, NetworkGatewayCommChannel CommType, bool PrivateKeyRequired, UseType UseType, bool ShowInactive, bool WithCerts) {
            object[] results = this.Invoke("CommListEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        CommType,
                        PrivateKeyRequired,
                        UseType,
                        ShowInactive,
                        WithCerts});
            return ((CommIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void CommListExAsync(string SessionID, int NetworkID, int MailboxID, NetworkGatewayCommChannel CommType, bool PrivateKeyRequired, UseType UseType, bool ShowInactive, bool WithCerts) {
            this.CommListExAsync(SessionID, NetworkID, MailboxID, CommType, PrivateKeyRequired, UseType, ShowInactive, WithCerts, null);
        }
        
        /// <remarks/>
        public void CommListExAsync(string SessionID, int NetworkID, int MailboxID, NetworkGatewayCommChannel CommType, bool PrivateKeyRequired, UseType UseType, bool ShowInactive, bool WithCerts, object userState) {
            if ((this.CommListExOperationCompleted == null)) {
                this.CommListExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommListExOperationCompleted);
            }
            this.InvokeAsync("CommListEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        CommType,
                        PrivateKeyRequired,
                        UseType,
                        ShowInactive,
                        WithCerts}, this.CommListExOperationCompleted, userState);
        }
        
        private void OnCommListExOperationCompleted(object arg) {
            if ((this.CommListExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommListExCompleted(this, new CommListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CommFind", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommIDInfo[] CommFind(string SessionID, string Identifier, NetworkGatewayCommChannel CommType, bool PrivateKeyRequired, UseType UseType, bool ShowInactive) {
            object[] results = this.Invoke("CommFind", new object[] {
                        SessionID,
                        Identifier,
                        CommType,
                        PrivateKeyRequired,
                        UseType,
                        ShowInactive});
            return ((CommIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void CommFindAsync(string SessionID, string Identifier, NetworkGatewayCommChannel CommType, bool PrivateKeyRequired, UseType UseType, bool ShowInactive) {
            this.CommFindAsync(SessionID, Identifier, CommType, PrivateKeyRequired, UseType, ShowInactive, null);
        }
        
        /// <remarks/>
        public void CommFindAsync(string SessionID, string Identifier, NetworkGatewayCommChannel CommType, bool PrivateKeyRequired, UseType UseType, bool ShowInactive, object userState) {
            if ((this.CommFindOperationCompleted == null)) {
                this.CommFindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommFindOperationCompleted);
            }
            this.InvokeAsync("CommFind", new object[] {
                        SessionID,
                        Identifier,
                        CommType,
                        PrivateKeyRequired,
                        UseType,
                        ShowInactive}, this.CommFindOperationCompleted, userState);
        }
        
        private void OnCommFindOperationCompleted(object arg) {
            if ((this.CommFindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommFindCompleted(this, new CommFindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CommInfo", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommIDInfo CommInfo(string SessionID, int CommID) {
            object[] results = this.Invoke("CommInfo", new object[] {
                        SessionID,
                        CommID});
            return ((CommIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CommInfoAsync(string SessionID, int CommID) {
            this.CommInfoAsync(SessionID, CommID, null);
        }
        
        /// <remarks/>
        public void CommInfoAsync(string SessionID, int CommID, object userState) {
            if ((this.CommInfoOperationCompleted == null)) {
                this.CommInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommInfoOperationCompleted);
            }
            this.InvokeAsync("CommInfo", new object[] {
                        SessionID,
                        CommID}, this.CommInfoOperationCompleted, userState);
        }
        
        private void OnCommInfoOperationCompleted(object arg) {
            if ((this.CommInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommInfoCompleted(this, new CommInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CommSetStatus", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CommSetStatus(string SessionID, int CommID, Status Status) {
            object[] results = this.Invoke("CommSetStatus", new object[] {
                        SessionID,
                        CommID,
                        Status});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CommSetStatusAsync(string SessionID, int CommID, Status Status) {
            this.CommSetStatusAsync(SessionID, CommID, Status, null);
        }
        
        /// <remarks/>
        public void CommSetStatusAsync(string SessionID, int CommID, Status Status, object userState) {
            if ((this.CommSetStatusOperationCompleted == null)) {
                this.CommSetStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommSetStatusOperationCompleted);
            }
            this.InvokeAsync("CommSetStatus", new object[] {
                        SessionID,
                        CommID,
                        Status}, this.CommSetStatusOperationCompleted, userState);
        }
        
        private void OnCommSetStatusOperationCompleted(object arg) {
            if ((this.CommSetStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommSetStatusCompleted(this, new CommSetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CertificateAddPublic", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommIDInfo CertificateAddPublic(string SessionID, int CommID, CertificateType CertType, string KeyId, string UserId, System.DateTime BeginUsage, CertificateUsage Usage, string PartnerCommID, string PartnerURL, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] Cert) {
            object[] results = this.Invoke("CertificateAddPublic", new object[] {
                        SessionID,
                        CommID,
                        CertType,
                        KeyId,
                        UserId,
                        BeginUsage,
                        Usage,
                        PartnerCommID,
                        PartnerURL,
                        Cert});
            return ((CommIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CertificateAddPublicAsync(string SessionID, int CommID, CertificateType CertType, string KeyId, string UserId, System.DateTime BeginUsage, CertificateUsage Usage, string PartnerCommID, string PartnerURL, byte[] Cert) {
            this.CertificateAddPublicAsync(SessionID, CommID, CertType, KeyId, UserId, BeginUsage, Usage, PartnerCommID, PartnerURL, Cert, null);
        }
        
        /// <remarks/>
        public void CertificateAddPublicAsync(string SessionID, int CommID, CertificateType CertType, string KeyId, string UserId, System.DateTime BeginUsage, CertificateUsage Usage, string PartnerCommID, string PartnerURL, byte[] Cert, object userState) {
            if ((this.CertificateAddPublicOperationCompleted == null)) {
                this.CertificateAddPublicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCertificateAddPublicOperationCompleted);
            }
            this.InvokeAsync("CertificateAddPublic", new object[] {
                        SessionID,
                        CommID,
                        CertType,
                        KeyId,
                        UserId,
                        BeginUsage,
                        Usage,
                        PartnerCommID,
                        PartnerURL,
                        Cert}, this.CertificateAddPublicOperationCompleted, userState);
        }
        
        private void OnCertificateAddPublicOperationCompleted(object arg) {
            if ((this.CertificateAddPublicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CertificateAddPublicCompleted(this, new CertificateAddPublicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CertificateAddPublicA", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommIDInfo CertificateAddPublicA(string SessionID, int CommID, CertificateType CertType, string KeyId, string UserId, System.DateTime BeginUsage, CertificateUsage Usage, string PartnerCommID, string PartnerURL, string CertBase64) {
            object[] results = this.Invoke("CertificateAddPublicA", new object[] {
                        SessionID,
                        CommID,
                        CertType,
                        KeyId,
                        UserId,
                        BeginUsage,
                        Usage,
                        PartnerCommID,
                        PartnerURL,
                        CertBase64});
            return ((CommIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CertificateAddPublicAAsync(string SessionID, int CommID, CertificateType CertType, string KeyId, string UserId, System.DateTime BeginUsage, CertificateUsage Usage, string PartnerCommID, string PartnerURL, string CertBase64) {
            this.CertificateAddPublicAAsync(SessionID, CommID, CertType, KeyId, UserId, BeginUsage, Usage, PartnerCommID, PartnerURL, CertBase64, null);
        }
        
        /// <remarks/>
        public void CertificateAddPublicAAsync(string SessionID, int CommID, CertificateType CertType, string KeyId, string UserId, System.DateTime BeginUsage, CertificateUsage Usage, string PartnerCommID, string PartnerURL, string CertBase64, object userState) {
            if ((this.CertificateAddPublicAOperationCompleted == null)) {
                this.CertificateAddPublicAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCertificateAddPublicAOperationCompleted);
            }
            this.InvokeAsync("CertificateAddPublicA", new object[] {
                        SessionID,
                        CommID,
                        CertType,
                        KeyId,
                        UserId,
                        BeginUsage,
                        Usage,
                        PartnerCommID,
                        PartnerURL,
                        CertBase64}, this.CertificateAddPublicAOperationCompleted, userState);
        }
        
        private void OnCertificateAddPublicAOperationCompleted(object arg) {
            if ((this.CertificateAddPublicACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CertificateAddPublicACompleted(this, new CertificateAddPublicACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CertAddPrivate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public as2CommInfo CertAddPrivate(string SessionID, int CommID, CertificateType CertType, string KeyId, string UserId, System.DateTime BeginUsage, CertificateUsage Usage, string PartnerAS2ID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] Cert, string Password) {
            object[] results = this.Invoke("CertAddPrivate", new object[] {
                        SessionID,
                        CommID,
                        CertType,
                        KeyId,
                        UserId,
                        BeginUsage,
                        Usage,
                        PartnerAS2ID,
                        Cert,
                        Password});
            return ((as2CommInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CertAddPrivateAsync(string SessionID, int CommID, CertificateType CertType, string KeyId, string UserId, System.DateTime BeginUsage, CertificateUsage Usage, string PartnerAS2ID, byte[] Cert, string Password) {
            this.CertAddPrivateAsync(SessionID, CommID, CertType, KeyId, UserId, BeginUsage, Usage, PartnerAS2ID, Cert, Password, null);
        }
        
        /// <remarks/>
        public void CertAddPrivateAsync(string SessionID, int CommID, CertificateType CertType, string KeyId, string UserId, System.DateTime BeginUsage, CertificateUsage Usage, string PartnerAS2ID, byte[] Cert, string Password, object userState) {
            if ((this.CertAddPrivateOperationCompleted == null)) {
                this.CertAddPrivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCertAddPrivateOperationCompleted);
            }
            this.InvokeAsync("CertAddPrivate", new object[] {
                        SessionID,
                        CommID,
                        CertType,
                        KeyId,
                        UserId,
                        BeginUsage,
                        Usage,
                        PartnerAS2ID,
                        Cert,
                        Password}, this.CertAddPrivateOperationCompleted, userState);
        }
        
        private void OnCertAddPrivateOperationCompleted(object arg) {
            if ((this.CertAddPrivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CertAddPrivateCompleted(this, new CertAddPrivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CertAddPrivateA", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public as2CommInfo CertAddPrivateA(string SessionID, int CommID, CertificateType CertType, string KeyId, string UserId, System.DateTime BeginUsage, CertificateUsage Usage, string PartnerAS2ID, string CertBase64, string Password) {
            object[] results = this.Invoke("CertAddPrivateA", new object[] {
                        SessionID,
                        CommID,
                        CertType,
                        KeyId,
                        UserId,
                        BeginUsage,
                        Usage,
                        PartnerAS2ID,
                        CertBase64,
                        Password});
            return ((as2CommInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CertAddPrivateAAsync(string SessionID, int CommID, CertificateType CertType, string KeyId, string UserId, System.DateTime BeginUsage, CertificateUsage Usage, string PartnerAS2ID, string CertBase64, string Password) {
            this.CertAddPrivateAAsync(SessionID, CommID, CertType, KeyId, UserId, BeginUsage, Usage, PartnerAS2ID, CertBase64, Password, null);
        }
        
        /// <remarks/>
        public void CertAddPrivateAAsync(string SessionID, int CommID, CertificateType CertType, string KeyId, string UserId, System.DateTime BeginUsage, CertificateUsage Usage, string PartnerAS2ID, string CertBase64, string Password, object userState) {
            if ((this.CertAddPrivateAOperationCompleted == null)) {
                this.CertAddPrivateAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCertAddPrivateAOperationCompleted);
            }
            this.InvokeAsync("CertAddPrivateA", new object[] {
                        SessionID,
                        CommID,
                        CertType,
                        KeyId,
                        UserId,
                        BeginUsage,
                        Usage,
                        PartnerAS2ID,
                        CertBase64,
                        Password}, this.CertAddPrivateAOperationCompleted, userState);
        }
        
        private void OnCertAddPrivateAOperationCompleted(object arg) {
            if ((this.CertAddPrivateACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CertAddPrivateACompleted(this, new CertAddPrivateACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CertificateCreatePrivate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommIDInfo CertificateCreatePrivate(string SessionID, int CommID, System.DateTime BeginUsage, CertificateUsage Usage, CertificateSecureHashAlgorithm SecureHashAlgorithm, string PartnerAS2ID, System.DateTime Expires) {
            object[] results = this.Invoke("CertificateCreatePrivate", new object[] {
                        SessionID,
                        CommID,
                        BeginUsage,
                        Usage,
                        SecureHashAlgorithm,
                        PartnerAS2ID,
                        Expires});
            return ((CommIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CertificateCreatePrivateAsync(string SessionID, int CommID, System.DateTime BeginUsage, CertificateUsage Usage, CertificateSecureHashAlgorithm SecureHashAlgorithm, string PartnerAS2ID, System.DateTime Expires) {
            this.CertificateCreatePrivateAsync(SessionID, CommID, BeginUsage, Usage, SecureHashAlgorithm, PartnerAS2ID, Expires, null);
        }
        
        /// <remarks/>
        public void CertificateCreatePrivateAsync(string SessionID, int CommID, System.DateTime BeginUsage, CertificateUsage Usage, CertificateSecureHashAlgorithm SecureHashAlgorithm, string PartnerAS2ID, System.DateTime Expires, object userState) {
            if ((this.CertificateCreatePrivateOperationCompleted == null)) {
                this.CertificateCreatePrivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCertificateCreatePrivateOperationCompleted);
            }
            this.InvokeAsync("CertificateCreatePrivate", new object[] {
                        SessionID,
                        CommID,
                        BeginUsage,
                        Usage,
                        SecureHashAlgorithm,
                        PartnerAS2ID,
                        Expires}, this.CertificateCreatePrivateOperationCompleted, userState);
        }
        
        private void OnCertificateCreatePrivateOperationCompleted(object arg) {
            if ((this.CertificateCreatePrivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CertificateCreatePrivateCompleted(this, new CertificateCreatePrivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CertificateRenewPrivate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommIDInfo CertificateRenewPrivate(string SessionID, int CommID, int CertKeyID, short OverlapDays, short Years, CertificateSecureHashAlgorithm SecureHashAlgorithm) {
            object[] results = this.Invoke("CertificateRenewPrivate", new object[] {
                        SessionID,
                        CommID,
                        CertKeyID,
                        OverlapDays,
                        Years,
                        SecureHashAlgorithm});
            return ((CommIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CertificateRenewPrivateAsync(string SessionID, int CommID, int CertKeyID, short OverlapDays, short Years, CertificateSecureHashAlgorithm SecureHashAlgorithm) {
            this.CertificateRenewPrivateAsync(SessionID, CommID, CertKeyID, OverlapDays, Years, SecureHashAlgorithm, null);
        }
        
        /// <remarks/>
        public void CertificateRenewPrivateAsync(string SessionID, int CommID, int CertKeyID, short OverlapDays, short Years, CertificateSecureHashAlgorithm SecureHashAlgorithm, object userState) {
            if ((this.CertificateRenewPrivateOperationCompleted == null)) {
                this.CertificateRenewPrivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCertificateRenewPrivateOperationCompleted);
            }
            this.InvokeAsync("CertificateRenewPrivate", new object[] {
                        SessionID,
                        CommID,
                        CertKeyID,
                        OverlapDays,
                        Years,
                        SecureHashAlgorithm}, this.CertificateRenewPrivateOperationCompleted, userState);
        }
        
        private void OnCertificateRenewPrivateOperationCompleted(object arg) {
            if ((this.CertificateRenewPrivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CertificateRenewPrivateCompleted(this, new CertificateRenewPrivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CertificateTerminate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CertificateTerminate(string SessionID, int CommID, int CertKeyID) {
            object[] results = this.Invoke("CertificateTerminate", new object[] {
                        SessionID,
                        CommID,
                        CertKeyID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CertificateTerminateAsync(string SessionID, int CommID, int CertKeyID) {
            this.CertificateTerminateAsync(SessionID, CommID, CertKeyID, null);
        }
        
        /// <remarks/>
        public void CertificateTerminateAsync(string SessionID, int CommID, int CertKeyID, object userState) {
            if ((this.CertificateTerminateOperationCompleted == null)) {
                this.CertificateTerminateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCertificateTerminateOperationCompleted);
            }
            this.InvokeAsync("CertificateTerminate", new object[] {
                        SessionID,
                        CommID,
                        CertKeyID}, this.CertificateTerminateOperationCompleted, userState);
        }
        
        private void OnCertificateTerminateOperationCompleted(object arg) {
            if ((this.CertificateTerminateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CertificateTerminateCompleted(this, new CertificateTerminateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CommDefaultMailbox", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CommDefaultMailbox(string SessionID, int CommID, int MailboxID) {
            object[] results = this.Invoke("CommDefaultMailbox", new object[] {
                        SessionID,
                        CommID,
                        MailboxID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CommDefaultMailboxAsync(string SessionID, int CommID, int MailboxID) {
            this.CommDefaultMailboxAsync(SessionID, CommID, MailboxID, null);
        }
        
        /// <remarks/>
        public void CommDefaultMailboxAsync(string SessionID, int CommID, int MailboxID, object userState) {
            if ((this.CommDefaultMailboxOperationCompleted == null)) {
                this.CommDefaultMailboxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommDefaultMailboxOperationCompleted);
            }
            this.InvokeAsync("CommDefaultMailbox", new object[] {
                        SessionID,
                        CommID,
                        MailboxID}, this.CommDefaultMailboxOperationCompleted, userState);
        }
        
        private void OnCommDefaultMailboxOperationCompleted(object arg) {
            if ((this.CommDefaultMailboxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommDefaultMailboxCompleted(this, new CommDefaultMailboxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/NowUTC", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime NowUTC() {
            object[] results = this.Invoke("NowUTC", new object[0]);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void NowUTCAsync() {
            this.NowUTCAsync(null);
        }
        
        /// <remarks/>
        public void NowUTCAsync(object userState) {
            if ((this.NowUTCOperationCompleted == null)) {
                this.NowUTCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNowUTCOperationCompleted);
            }
            this.InvokeAsync("NowUTC", new object[0], this.NowUTCOperationCompleted, userState);
        }
        
        private void OnNowUTCOperationCompleted(object arg) {
            if ((this.NowUTCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NowUTCCompleted(this, new NowUTCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeDate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime InterchangeDate(string InterchangeHeader) {
            object[] results = this.Invoke("InterchangeDate", new object[] {
                        InterchangeHeader});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeDateAsync(string InterchangeHeader) {
            this.InterchangeDateAsync(InterchangeHeader, null);
        }
        
        /// <remarks/>
        public void InterchangeDateAsync(string InterchangeHeader, object userState) {
            if ((this.InterchangeDateOperationCompleted == null)) {
                this.InterchangeDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeDateOperationCompleted);
            }
            this.InvokeAsync("InterchangeDate", new object[] {
                        InterchangeHeader}, this.InterchangeDateOperationCompleted, userState);
        }
        
        private void OnInterchangeDateOperationCompleted(object arg) {
            if ((this.InterchangeDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeDateCompleted(this, new InterchangeDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/Version", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Version() {
            object[] results = this.Invoke("Version", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VersionAsync() {
            this.VersionAsync(null);
        }
        
        /// <remarks/>
        public void VersionAsync(object userState) {
            if ((this.VersionOperationCompleted == null)) {
                this.VersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVersionOperationCompleted);
            }
            this.InvokeAsync("Version", new object[0], this.VersionOperationCompleted, userState);
        }
        
        private void OnVersionOperationCompleted(object arg) {
            if ((this.VersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VersionCompleted(this, new VersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/X400Format", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string X400Format(
                    string Country, 
                    string ADMD, 
                    string PRMD, 
                    string Organization, 
                    string OrganizationalUnit1, 
                    string OrganizationalUnit2, 
                    string OrganizationalUnit3, 
                    string OrganizationalUnit4, 
                    string Surname, 
                    string GivenName, 
                    string Initials, 
                    string Generation, 
                    string CommonName, 
                    string DDA, 
                    string X_121, 
                    string N_ID, 
                    string T_TY, 
                    string T_ID) {
            object[] results = this.Invoke("X400Format", new object[] {
                        Country,
                        ADMD,
                        PRMD,
                        Organization,
                        OrganizationalUnit1,
                        OrganizationalUnit2,
                        OrganizationalUnit3,
                        OrganizationalUnit4,
                        Surname,
                        GivenName,
                        Initials,
                        Generation,
                        CommonName,
                        DDA,
                        X_121,
                        N_ID,
                        T_TY,
                        T_ID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void X400FormatAsync(
                    string Country, 
                    string ADMD, 
                    string PRMD, 
                    string Organization, 
                    string OrganizationalUnit1, 
                    string OrganizationalUnit2, 
                    string OrganizationalUnit3, 
                    string OrganizationalUnit4, 
                    string Surname, 
                    string GivenName, 
                    string Initials, 
                    string Generation, 
                    string CommonName, 
                    string DDA, 
                    string X_121, 
                    string N_ID, 
                    string T_TY, 
                    string T_ID) {
            this.X400FormatAsync(Country, ADMD, PRMD, Organization, OrganizationalUnit1, OrganizationalUnit2, OrganizationalUnit3, OrganizationalUnit4, Surname, GivenName, Initials, Generation, CommonName, DDA, X_121, N_ID, T_TY, T_ID, null);
        }
        
        /// <remarks/>
        public void X400FormatAsync(
                    string Country, 
                    string ADMD, 
                    string PRMD, 
                    string Organization, 
                    string OrganizationalUnit1, 
                    string OrganizationalUnit2, 
                    string OrganizationalUnit3, 
                    string OrganizationalUnit4, 
                    string Surname, 
                    string GivenName, 
                    string Initials, 
                    string Generation, 
                    string CommonName, 
                    string DDA, 
                    string X_121, 
                    string N_ID, 
                    string T_TY, 
                    string T_ID, 
                    object userState) {
            if ((this.X400FormatOperationCompleted == null)) {
                this.X400FormatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnX400FormatOperationCompleted);
            }
            this.InvokeAsync("X400Format", new object[] {
                        Country,
                        ADMD,
                        PRMD,
                        Organization,
                        OrganizationalUnit1,
                        OrganizationalUnit2,
                        OrganizationalUnit3,
                        OrganizationalUnit4,
                        Surname,
                        GivenName,
                        Initials,
                        Generation,
                        CommonName,
                        DDA,
                        X_121,
                        N_ID,
                        T_TY,
                        T_ID}, this.X400FormatOperationCompleted, userState);
        }
        
        private void OnX400FormatOperationCompleted(object arg) {
            if ((this.X400FormatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.X400FormatCompleted(this, new X400FormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelUploadExA", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ParcelUploadExA(string SessionID, int NetworkID, int MailboxID, string FileName, string ContentBase64) {
            object[] results = this.Invoke("ParcelUploadExA", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        FileName,
                        ContentBase64});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelUploadExAAsync(string SessionID, int NetworkID, int MailboxID, string FileName, string ContentBase64) {
            this.ParcelUploadExAAsync(SessionID, NetworkID, MailboxID, FileName, ContentBase64, null);
        }
        
        /// <remarks/>
        public void ParcelUploadExAAsync(string SessionID, int NetworkID, int MailboxID, string FileName, string ContentBase64, object userState) {
            if ((this.ParcelUploadExAOperationCompleted == null)) {
                this.ParcelUploadExAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelUploadExAOperationCompleted);
            }
            this.InvokeAsync("ParcelUploadExA", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        FileName,
                        ContentBase64}, this.ParcelUploadExAOperationCompleted, userState);
        }
        
        private void OnParcelUploadExAOperationCompleted(object arg) {
            if ((this.ParcelUploadExACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelUploadExACompleted(this, new ParcelUploadExACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelUpdateStatus", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ParcelUpdateStatus(string SessionID, long ParcelID, ParcelStatus Status, bool TransLogOnly) {
            object[] results = this.Invoke("ParcelUpdateStatus", new object[] {
                        SessionID,
                        ParcelID,
                        Status,
                        TransLogOnly});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelUpdateStatusAsync(string SessionID, long ParcelID, ParcelStatus Status, bool TransLogOnly) {
            this.ParcelUpdateStatusAsync(SessionID, ParcelID, Status, TransLogOnly, null);
        }
        
        /// <remarks/>
        public void ParcelUpdateStatusAsync(string SessionID, long ParcelID, ParcelStatus Status, bool TransLogOnly, object userState) {
            if ((this.ParcelUpdateStatusOperationCompleted == null)) {
                this.ParcelUpdateStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelUpdateStatusOperationCompleted);
            }
            this.InvokeAsync("ParcelUpdateStatus", new object[] {
                        SessionID,
                        ParcelID,
                        Status,
                        TransLogOnly}, this.ParcelUpdateStatusOperationCompleted, userState);
        }
        
        private void OnParcelUpdateStatusOperationCompleted(object arg) {
            if ((this.ParcelUpdateStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelUpdateStatusCompleted(this, new ParcelUpdateStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelUpdateLocalStatus", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ParcelUpdateLocalStatus(string SessionID, long ParcelID, short Status) {
            object[] results = this.Invoke("ParcelUpdateLocalStatus", new object[] {
                        SessionID,
                        ParcelID,
                        Status});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelUpdateLocalStatusAsync(string SessionID, long ParcelID, short Status) {
            this.ParcelUpdateLocalStatusAsync(SessionID, ParcelID, Status, null);
        }
        
        /// <remarks/>
        public void ParcelUpdateLocalStatusAsync(string SessionID, long ParcelID, short Status, object userState) {
            if ((this.ParcelUpdateLocalStatusOperationCompleted == null)) {
                this.ParcelUpdateLocalStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelUpdateLocalStatusOperationCompleted);
            }
            this.InvokeAsync("ParcelUpdateLocalStatus", new object[] {
                        SessionID,
                        ParcelID,
                        Status}, this.ParcelUpdateLocalStatusOperationCompleted, userState);
        }
        
        private void OnParcelUpdateLocalStatusOperationCompleted(object arg) {
            if ((this.ParcelUpdateLocalStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelUpdateLocalStatusCompleted(this, new ParcelUpdateLocalStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelUploadMft", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ParcelUploadMft(string SessionID, string FileName, int Bytes, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] Content, int ECGridIDFrom, int ECGridIDTo) {
            object[] results = this.Invoke("ParcelUploadMft", new object[] {
                        SessionID,
                        FileName,
                        Bytes,
                        Content,
                        ECGridIDFrom,
                        ECGridIDTo});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelUploadMftAsync(string SessionID, string FileName, int Bytes, byte[] Content, int ECGridIDFrom, int ECGridIDTo) {
            this.ParcelUploadMftAsync(SessionID, FileName, Bytes, Content, ECGridIDFrom, ECGridIDTo, null);
        }
        
        /// <remarks/>
        public void ParcelUploadMftAsync(string SessionID, string FileName, int Bytes, byte[] Content, int ECGridIDFrom, int ECGridIDTo, object userState) {
            if ((this.ParcelUploadMftOperationCompleted == null)) {
                this.ParcelUploadMftOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelUploadMftOperationCompleted);
            }
            this.InvokeAsync("ParcelUploadMft", new object[] {
                        SessionID,
                        FileName,
                        Bytes,
                        Content,
                        ECGridIDFrom,
                        ECGridIDTo}, this.ParcelUploadMftOperationCompleted, userState);
        }
        
        private void OnParcelUploadMftOperationCompleted(object arg) {
            if ((this.ParcelUploadMftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelUploadMftCompleted(this, new ParcelUploadMftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelUploadMftA", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ParcelUploadMftA(string SessionID, string FileName, string ContentBase64, int ECGridIDFrom, int ECGridIDTo) {
            object[] results = this.Invoke("ParcelUploadMftA", new object[] {
                        SessionID,
                        FileName,
                        ContentBase64,
                        ECGridIDFrom,
                        ECGridIDTo});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelUploadMftAAsync(string SessionID, string FileName, string ContentBase64, int ECGridIDFrom, int ECGridIDTo) {
            this.ParcelUploadMftAAsync(SessionID, FileName, ContentBase64, ECGridIDFrom, ECGridIDTo, null);
        }
        
        /// <remarks/>
        public void ParcelUploadMftAAsync(string SessionID, string FileName, string ContentBase64, int ECGridIDFrom, int ECGridIDTo, object userState) {
            if ((this.ParcelUploadMftAOperationCompleted == null)) {
                this.ParcelUploadMftAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelUploadMftAOperationCompleted);
            }
            this.InvokeAsync("ParcelUploadMftA", new object[] {
                        SessionID,
                        FileName,
                        ContentBase64,
                        ECGridIDFrom,
                        ECGridIDTo}, this.ParcelUploadMftAOperationCompleted, userState);
        }
        
        private void OnParcelUploadMftAOperationCompleted(object arg) {
            if ((this.ParcelUploadMftACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelUploadMftACompleted(this, new ParcelUploadMftACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelTest", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ParcelTest(string SessionID, int ECGridIDFrom, int ECGridIDTo, EDIStandard DocumentType) {
            object[] results = this.Invoke("ParcelTest", new object[] {
                        SessionID,
                        ECGridIDFrom,
                        ECGridIDTo,
                        DocumentType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelTestAsync(string SessionID, int ECGridIDFrom, int ECGridIDTo, EDIStandard DocumentType) {
            this.ParcelTestAsync(SessionID, ECGridIDFrom, ECGridIDTo, DocumentType, null);
        }
        
        /// <remarks/>
        public void ParcelTestAsync(string SessionID, int ECGridIDFrom, int ECGridIDTo, EDIStandard DocumentType, object userState) {
            if ((this.ParcelTestOperationCompleted == null)) {
                this.ParcelTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelTestOperationCompleted);
            }
            this.InvokeAsync("ParcelTest", new object[] {
                        SessionID,
                        ECGridIDFrom,
                        ECGridIDTo,
                        DocumentType}, this.ParcelTestOperationCompleted, userState);
        }
        
        private void OnParcelTestOperationCompleted(object arg) {
            if ((this.ParcelTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelTestCompleted(this, new ParcelTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelSetMailbagControlID", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ParcelSetMailbagControlID(string SessionID, int ParcelID, string MailbagControlID) {
            object[] results = this.Invoke("ParcelSetMailbagControlID", new object[] {
                        SessionID,
                        ParcelID,
                        MailbagControlID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelSetMailbagControlIDAsync(string SessionID, int ParcelID, string MailbagControlID) {
            this.ParcelSetMailbagControlIDAsync(SessionID, ParcelID, MailbagControlID, null);
        }
        
        /// <remarks/>
        public void ParcelSetMailbagControlIDAsync(string SessionID, int ParcelID, string MailbagControlID, object userState) {
            if ((this.ParcelSetMailbagControlIDOperationCompleted == null)) {
                this.ParcelSetMailbagControlIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelSetMailbagControlIDOperationCompleted);
            }
            this.InvokeAsync("ParcelSetMailbagControlID", new object[] {
                        SessionID,
                        ParcelID,
                        MailbagControlID}, this.ParcelSetMailbagControlIDOperationCompleted, userState);
        }
        
        private void OnParcelSetMailbagControlIDOperationCompleted(object arg) {
            if ((this.ParcelSetMailbagControlIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelSetMailbagControlIDCompleted(this, new ParcelSetMailbagControlIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelFindMailbagControlID", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfo[] ParcelFindMailbagControlID(string SessionID, int NetworkID, int MailboxID, string MailbagControlID) {
            object[] results = this.Invoke("ParcelFindMailbagControlID", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        MailbagControlID});
            return ((ParcelIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void ParcelFindMailbagControlIDAsync(string SessionID, int NetworkID, int MailboxID, string MailbagControlID) {
            this.ParcelFindMailbagControlIDAsync(SessionID, NetworkID, MailboxID, MailbagControlID, null);
        }
        
        /// <remarks/>
        public void ParcelFindMailbagControlIDAsync(string SessionID, int NetworkID, int MailboxID, string MailbagControlID, object userState) {
            if ((this.ParcelFindMailbagControlIDOperationCompleted == null)) {
                this.ParcelFindMailbagControlIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelFindMailbagControlIDOperationCompleted);
            }
            this.InvokeAsync("ParcelFindMailbagControlID", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        MailbagControlID}, this.ParcelFindMailbagControlIDOperationCompleted, userState);
        }
        
        private void OnParcelFindMailbagControlIDOperationCompleted(object arg) {
            if ((this.ParcelFindMailbagControlIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelFindMailbagControlIDCompleted(this, new ParcelFindMailbagControlIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelFindMailbagControlIDTo", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfo[] ParcelFindMailbagControlIDTo(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, string MailbagControlID) {
            object[] results = this.Invoke("ParcelFindMailbagControlIDTo", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        MailbagControlID});
            return ((ParcelIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void ParcelFindMailbagControlIDToAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, string MailbagControlID) {
            this.ParcelFindMailbagControlIDToAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, MailbagControlID, null);
        }
        
        /// <remarks/>
        public void ParcelFindMailbagControlIDToAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, string MailbagControlID, object userState) {
            if ((this.ParcelFindMailbagControlIDToOperationCompleted == null)) {
                this.ParcelFindMailbagControlIDToOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelFindMailbagControlIDToOperationCompleted);
            }
            this.InvokeAsync("ParcelFindMailbagControlIDTo", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        MailbagControlID}, this.ParcelFindMailbagControlIDToOperationCompleted, userState);
        }
        
        private void OnParcelFindMailbagControlIDToOperationCompleted(object arg) {
            if ((this.ParcelFindMailbagControlIDToCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelFindMailbagControlIDToCompleted(this, new ParcelFindMailbagControlIDToCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelManifest", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ManifestInfo[] ParcelManifest(string SessionID, long ParcelID) {
            object[] results = this.Invoke("ParcelManifest", new object[] {
                        SessionID,
                        ParcelID});
            return ((ManifestInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void ParcelManifestAsync(string SessionID, long ParcelID) {
            this.ParcelManifestAsync(SessionID, ParcelID, null);
        }
        
        /// <remarks/>
        public void ParcelManifestAsync(string SessionID, long ParcelID, object userState) {
            if ((this.ParcelManifestOperationCompleted == null)) {
                this.ParcelManifestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelManifestOperationCompleted);
            }
            this.InvokeAsync("ParcelManifest", new object[] {
                        SessionID,
                        ParcelID}, this.ParcelManifestOperationCompleted, userState);
        }
        
        private void OnParcelManifestOperationCompleted(object arg) {
            if ((this.ParcelManifestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelManifestCompleted(this, new ParcelManifestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeManifest", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ManifestInfo[] InterchangeManifest(string SessionID, long InterchangeID) {
            object[] results = this.Invoke("InterchangeManifest", new object[] {
                        SessionID,
                        InterchangeID});
            return ((ManifestInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeManifestAsync(string SessionID, long InterchangeID) {
            this.InterchangeManifestAsync(SessionID, InterchangeID, null);
        }
        
        /// <remarks/>
        public void InterchangeManifestAsync(string SessionID, long InterchangeID, object userState) {
            if ((this.InterchangeManifestOperationCompleted == null)) {
                this.InterchangeManifestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeManifestOperationCompleted);
            }
            this.InvokeAsync("InterchangeManifest", new object[] {
                        SessionID,
                        InterchangeID}, this.InterchangeManifestOperationCompleted, userState);
        }
        
        private void OnInterchangeManifestOperationCompleted(object arg) {
            if ((this.InterchangeManifestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeManifestCompleted(this, new InterchangeManifestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelNoteList", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelNote[] ParcelNoteList(string SessionID, long ParcelID) {
            object[] results = this.Invoke("ParcelNoteList", new object[] {
                        SessionID,
                        ParcelID});
            return ((ParcelNote[])(results[0]));
        }
        
        /// <remarks/>
        public void ParcelNoteListAsync(string SessionID, long ParcelID) {
            this.ParcelNoteListAsync(SessionID, ParcelID, null);
        }
        
        /// <remarks/>
        public void ParcelNoteListAsync(string SessionID, long ParcelID, object userState) {
            if ((this.ParcelNoteListOperationCompleted == null)) {
                this.ParcelNoteListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelNoteListOperationCompleted);
            }
            this.InvokeAsync("ParcelNoteList", new object[] {
                        SessionID,
                        ParcelID}, this.ParcelNoteListOperationCompleted, userState);
        }
        
        private void OnParcelNoteListOperationCompleted(object arg) {
            if ((this.ParcelNoteListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelNoteListCompleted(this, new ParcelNoteListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelInBoxArchive", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfoCollection ParcelInBoxArchive(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage) {
            object[] results = this.Invoke("ParcelInBoxArchive", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        MailbagControlID,
                        PageNo,
                        RecordsPerPage});
            return ((ParcelIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelInBoxArchiveAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage) {
            this.ParcelInBoxArchiveAsync(SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage, null);
        }
        
        /// <remarks/>
        public void ParcelInBoxArchiveAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage, object userState) {
            if ((this.ParcelInBoxArchiveOperationCompleted == null)) {
                this.ParcelInBoxArchiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelInBoxArchiveOperationCompleted);
            }
            this.InvokeAsync("ParcelInBoxArchive", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        MailbagControlID,
                        PageNo,
                        RecordsPerPage}, this.ParcelInBoxArchiveOperationCompleted, userState);
        }
        
        private void OnParcelInBoxArchiveOperationCompleted(object arg) {
            if ((this.ParcelInBoxArchiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelInBoxArchiveCompleted(this, new ParcelInBoxArchiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelInBoxArchiveEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfoCollection ParcelInBoxArchiveEx(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage) {
            object[] results = this.Invoke("ParcelInBoxArchiveEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        MailbagControlID,
                        PageNo,
                        RecordsPerPage});
            return ((ParcelIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelInBoxArchiveExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage) {
            this.ParcelInBoxArchiveExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage, null);
        }
        
        /// <remarks/>
        public void ParcelInBoxArchiveExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage, object userState) {
            if ((this.ParcelInBoxArchiveExOperationCompleted == null)) {
                this.ParcelInBoxArchiveExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelInBoxArchiveExOperationCompleted);
            }
            this.InvokeAsync("ParcelInBoxArchiveEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        MailbagControlID,
                        PageNo,
                        RecordsPerPage}, this.ParcelInBoxArchiveExOperationCompleted, userState);
        }
        
        private void OnParcelInBoxArchiveExOperationCompleted(object arg) {
            if ((this.ParcelInBoxArchiveExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelInBoxArchiveExCompleted(this, new ParcelInBoxArchiveExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelInBoxArchiveExShort", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfoCollection ParcelInBoxArchiveExShort(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage) {
            object[] results = this.Invoke("ParcelInBoxArchiveExShort", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        MailbagControlID,
                        PageNo,
                        RecordsPerPage});
            return ((ParcelIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelInBoxArchiveExShortAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage) {
            this.ParcelInBoxArchiveExShortAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage, null);
        }
        
        /// <remarks/>
        public void ParcelInBoxArchiveExShortAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage, object userState) {
            if ((this.ParcelInBoxArchiveExShortOperationCompleted == null)) {
                this.ParcelInBoxArchiveExShortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelInBoxArchiveExShortOperationCompleted);
            }
            this.InvokeAsync("ParcelInBoxArchiveExShort", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        MailbagControlID,
                        PageNo,
                        RecordsPerPage}, this.ParcelInBoxArchiveExShortOperationCompleted, userState);
        }
        
        private void OnParcelInBoxArchiveExShortOperationCompleted(object arg) {
            if ((this.ParcelInBoxArchiveExShortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelInBoxArchiveExShortCompleted(this, new ParcelInBoxArchiveExShortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelInBoxArchiveDescEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfoCollection ParcelInBoxArchiveDescEx(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage) {
            object[] results = this.Invoke("ParcelInBoxArchiveDescEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        MailbagControlID,
                        PageNo,
                        RecordsPerPage});
            return ((ParcelIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelInBoxArchiveDescExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage) {
            this.ParcelInBoxArchiveDescExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage, null);
        }
        
        /// <remarks/>
        public void ParcelInBoxArchiveDescExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage, object userState) {
            if ((this.ParcelInBoxArchiveDescExOperationCompleted == null)) {
                this.ParcelInBoxArchiveDescExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelInBoxArchiveDescExOperationCompleted);
            }
            this.InvokeAsync("ParcelInBoxArchiveDescEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        MailbagControlID,
                        PageNo,
                        RecordsPerPage}, this.ParcelInBoxArchiveDescExOperationCompleted, userState);
        }
        
        private void OnParcelInBoxArchiveDescExOperationCompleted(object arg) {
            if ((this.ParcelInBoxArchiveDescExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelInBoxArchiveDescExCompleted(this, new ParcelInBoxArchiveDescExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelOutBoxArchive", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfoCollection ParcelOutBoxArchive(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage) {
            object[] results = this.Invoke("ParcelOutBoxArchive", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        MailbagControlID,
                        PageNo,
                        RecordsPerPage});
            return ((ParcelIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelOutBoxArchiveAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage) {
            this.ParcelOutBoxArchiveAsync(SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage, null);
        }
        
        /// <remarks/>
        public void ParcelOutBoxArchiveAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage, object userState) {
            if ((this.ParcelOutBoxArchiveOperationCompleted == null)) {
                this.ParcelOutBoxArchiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelOutBoxArchiveOperationCompleted);
            }
            this.InvokeAsync("ParcelOutBoxArchive", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        MailbagControlID,
                        PageNo,
                        RecordsPerPage}, this.ParcelOutBoxArchiveOperationCompleted, userState);
        }
        
        private void OnParcelOutBoxArchiveOperationCompleted(object arg) {
            if ((this.ParcelOutBoxArchiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelOutBoxArchiveCompleted(this, new ParcelOutBoxArchiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelOutBoxArchiveEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfoCollection ParcelOutBoxArchiveEx(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage) {
            object[] results = this.Invoke("ParcelOutBoxArchiveEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        MailbagControlID,
                        PageNo,
                        RecordsPerPage});
            return ((ParcelIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelOutBoxArchiveExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage) {
            this.ParcelOutBoxArchiveExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage, null);
        }
        
        /// <remarks/>
        public void ParcelOutBoxArchiveExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage, object userState) {
            if ((this.ParcelOutBoxArchiveExOperationCompleted == null)) {
                this.ParcelOutBoxArchiveExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelOutBoxArchiveExOperationCompleted);
            }
            this.InvokeAsync("ParcelOutBoxArchiveEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        MailbagControlID,
                        PageNo,
                        RecordsPerPage}, this.ParcelOutBoxArchiveExOperationCompleted, userState);
        }
        
        private void OnParcelOutBoxArchiveExOperationCompleted(object arg) {
            if ((this.ParcelOutBoxArchiveExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelOutBoxArchiveExCompleted(this, new ParcelOutBoxArchiveExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelOutBoxArchiveExShort", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfoCollection ParcelOutBoxArchiveExShort(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage) {
            object[] results = this.Invoke("ParcelOutBoxArchiveExShort", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        MailbagControlID,
                        PageNo,
                        RecordsPerPage});
            return ((ParcelIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelOutBoxArchiveExShortAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage) {
            this.ParcelOutBoxArchiveExShortAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage, null);
        }
        
        /// <remarks/>
        public void ParcelOutBoxArchiveExShortAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage, object userState) {
            if ((this.ParcelOutBoxArchiveExShortOperationCompleted == null)) {
                this.ParcelOutBoxArchiveExShortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelOutBoxArchiveExShortOperationCompleted);
            }
            this.InvokeAsync("ParcelOutBoxArchiveExShort", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        MailbagControlID,
                        PageNo,
                        RecordsPerPage}, this.ParcelOutBoxArchiveExShortOperationCompleted, userState);
        }
        
        private void OnParcelOutBoxArchiveExShortOperationCompleted(object arg) {
            if ((this.ParcelOutBoxArchiveExShortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelOutBoxArchiveExShortCompleted(this, new ParcelOutBoxArchiveExShortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelOutBoxArchiveDescEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfoCollection ParcelOutBoxArchiveDescEx(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage) {
            object[] results = this.Invoke("ParcelOutBoxArchiveDescEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        MailbagControlID,
                        PageNo,
                        RecordsPerPage});
            return ((ParcelIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelOutBoxArchiveDescExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage) {
            this.ParcelOutBoxArchiveDescExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage, null);
        }
        
        /// <remarks/>
        public void ParcelOutBoxArchiveDescExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string MailbagControlID, short PageNo, short RecordsPerPage, object userState) {
            if ((this.ParcelOutBoxArchiveDescExOperationCompleted == null)) {
                this.ParcelOutBoxArchiveDescExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelOutBoxArchiveDescExOperationCompleted);
            }
            this.InvokeAsync("ParcelOutBoxArchiveDescEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        MailbagControlID,
                        PageNo,
                        RecordsPerPage}, this.ParcelOutBoxArchiveDescExOperationCompleted, userState);
        }
        
        private void OnParcelOutBoxArchiveDescExOperationCompleted(object arg) {
            if ((this.ParcelOutBoxArchiveDescExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelOutBoxArchiveDescExCompleted(this, new ParcelOutBoxArchiveDescExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelOutBoxError", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfoCollection ParcelOutBoxError(string SessionID, System.DateTime BeginDate, System.DateTime EndDate) {
            object[] results = this.Invoke("ParcelOutBoxError", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate});
            return ((ParcelIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelOutBoxErrorAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate) {
            this.ParcelOutBoxErrorAsync(SessionID, BeginDate, EndDate, null);
        }
        
        /// <remarks/>
        public void ParcelOutBoxErrorAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, object userState) {
            if ((this.ParcelOutBoxErrorOperationCompleted == null)) {
                this.ParcelOutBoxErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelOutBoxErrorOperationCompleted);
            }
            this.InvokeAsync("ParcelOutBoxError", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate}, this.ParcelOutBoxErrorOperationCompleted, userState);
        }
        
        private void OnParcelOutBoxErrorOperationCompleted(object arg) {
            if ((this.ParcelOutBoxErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelOutBoxErrorCompleted(this, new ParcelOutBoxErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelOutBoxErrorEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfoCollection ParcelOutBoxErrorEx(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate) {
            object[] results = this.Invoke("ParcelOutBoxErrorEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate});
            return ((ParcelIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelOutBoxErrorExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate) {
            this.ParcelOutBoxErrorExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, null);
        }
        
        /// <remarks/>
        public void ParcelOutBoxErrorExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, object userState) {
            if ((this.ParcelOutBoxErrorExOperationCompleted == null)) {
                this.ParcelOutBoxErrorExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelOutBoxErrorExOperationCompleted);
            }
            this.InvokeAsync("ParcelOutBoxErrorEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate}, this.ParcelOutBoxErrorExOperationCompleted, userState);
        }
        
        private void OnParcelOutBoxErrorExOperationCompleted(object arg) {
            if ((this.ParcelOutBoxErrorExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelOutBoxErrorExCompleted(this, new ParcelOutBoxErrorExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelOutBoxInProcess", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfoCollection ParcelOutBoxInProcess(string SessionID) {
            object[] results = this.Invoke("ParcelOutBoxInProcess", new object[] {
                        SessionID});
            return ((ParcelIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelOutBoxInProcessAsync(string SessionID) {
            this.ParcelOutBoxInProcessAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void ParcelOutBoxInProcessAsync(string SessionID, object userState) {
            if ((this.ParcelOutBoxInProcessOperationCompleted == null)) {
                this.ParcelOutBoxInProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelOutBoxInProcessOperationCompleted);
            }
            this.InvokeAsync("ParcelOutBoxInProcess", new object[] {
                        SessionID}, this.ParcelOutBoxInProcessOperationCompleted, userState);
        }
        
        private void OnParcelOutBoxInProcessOperationCompleted(object arg) {
            if ((this.ParcelOutBoxInProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelOutBoxInProcessCompleted(this, new ParcelOutBoxInProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelOutBoxInProcessEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfoCollection ParcelOutBoxInProcessEx(string SessionID, int NetworkID, int MailboxID) {
            object[] results = this.Invoke("ParcelOutBoxInProcessEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID});
            return ((ParcelIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelOutBoxInProcessExAsync(string SessionID, int NetworkID, int MailboxID) {
            this.ParcelOutBoxInProcessExAsync(SessionID, NetworkID, MailboxID, null);
        }
        
        /// <remarks/>
        public void ParcelOutBoxInProcessExAsync(string SessionID, int NetworkID, int MailboxID, object userState) {
            if ((this.ParcelOutBoxInProcessExOperationCompleted == null)) {
                this.ParcelOutBoxInProcessExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelOutBoxInProcessExOperationCompleted);
            }
            this.InvokeAsync("ParcelOutBoxInProcessEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID}, this.ParcelOutBoxInProcessExOperationCompleted, userState);
        }
        
        private void OnParcelOutBoxInProcessExOperationCompleted(object arg) {
            if ((this.ParcelOutBoxInProcessExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelOutBoxInProcessExCompleted(this, new ParcelOutBoxInProcessExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeInfo", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo InterchangeInfo(string SessionID, long InterchangeID) {
            object[] results = this.Invoke("InterchangeInfo", new object[] {
                        SessionID,
                        InterchangeID});
            return ((InterchangeIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeInfoAsync(string SessionID, long InterchangeID) {
            this.InterchangeInfoAsync(SessionID, InterchangeID, null);
        }
        
        /// <remarks/>
        public void InterchangeInfoAsync(string SessionID, long InterchangeID, object userState) {
            if ((this.InterchangeInfoOperationCompleted == null)) {
                this.InterchangeInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeInfoOperationCompleted);
            }
            this.InvokeAsync("InterchangeInfo", new object[] {
                        SessionID,
                        InterchangeID}, this.InterchangeInfoOperationCompleted, userState);
        }
        
        private void OnInterchangeInfoOperationCompleted(object arg) {
            if ((this.InterchangeInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeInfoCompleted(this, new InterchangeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeInBox", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo[] InterchangeInBox(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID) {
            object[] results = this.Invoke("InterchangeInBox", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        InterchangeControlID});
            return ((InterchangeIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeInBoxAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID) {
            this.InterchangeInBoxAsync(SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, null);
        }
        
        /// <remarks/>
        public void InterchangeInBoxAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID, object userState) {
            if ((this.InterchangeInBoxOperationCompleted == null)) {
                this.InterchangeInBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeInBoxOperationCompleted);
            }
            this.InvokeAsync("InterchangeInBox", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        InterchangeControlID}, this.InterchangeInBoxOperationCompleted, userState);
        }
        
        private void OnInterchangeInBoxOperationCompleted(object arg) {
            if ((this.InterchangeInBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeInBoxCompleted(this, new InterchangeInBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeInBoxArchive", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfoCollection InterchangeInBoxArchive(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID, short PageNo, short RecordsPerPage) {
            object[] results = this.Invoke("InterchangeInBoxArchive", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        InterchangeControlID,
                        PageNo,
                        RecordsPerPage});
            return ((InterchangeIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeInBoxArchiveAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID, short PageNo, short RecordsPerPage) {
            this.InterchangeInBoxArchiveAsync(SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, PageNo, RecordsPerPage, null);
        }
        
        /// <remarks/>
        public void InterchangeInBoxArchiveAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID, short PageNo, short RecordsPerPage, object userState) {
            if ((this.InterchangeInBoxArchiveOperationCompleted == null)) {
                this.InterchangeInBoxArchiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeInBoxArchiveOperationCompleted);
            }
            this.InvokeAsync("InterchangeInBoxArchive", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        InterchangeControlID,
                        PageNo,
                        RecordsPerPage}, this.InterchangeInBoxArchiveOperationCompleted, userState);
        }
        
        private void OnInterchangeInBoxArchiveOperationCompleted(object arg) {
            if ((this.InterchangeInBoxArchiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeInBoxArchiveCompleted(this, new InterchangeInBoxArchiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeInBoxEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo[] InterchangeInBoxEx(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID) {
            object[] results = this.Invoke("InterchangeInBoxEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        InterchangeControlID});
            return ((InterchangeIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeInBoxExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID) {
            this.InterchangeInBoxExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, null);
        }
        
        /// <remarks/>
        public void InterchangeInBoxExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID, object userState) {
            if ((this.InterchangeInBoxExOperationCompleted == null)) {
                this.InterchangeInBoxExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeInBoxExOperationCompleted);
            }
            this.InvokeAsync("InterchangeInBoxEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        InterchangeControlID}, this.InterchangeInBoxExOperationCompleted, userState);
        }
        
        private void OnInterchangeInBoxExOperationCompleted(object arg) {
            if ((this.InterchangeInBoxExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeInBoxExCompleted(this, new InterchangeInBoxExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeInBoxArchiveEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfoCollection InterchangeInBoxArchiveEx(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID, short PageNo, short RecordsPerPage) {
            object[] results = this.Invoke("InterchangeInBoxArchiveEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        InterchangeControlID,
                        PageNo,
                        RecordsPerPage});
            return ((InterchangeIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeInBoxArchiveExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID, short PageNo, short RecordsPerPage) {
            this.InterchangeInBoxArchiveExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, PageNo, RecordsPerPage, null);
        }
        
        /// <remarks/>
        public void InterchangeInBoxArchiveExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID, short PageNo, short RecordsPerPage, object userState) {
            if ((this.InterchangeInBoxArchiveExOperationCompleted == null)) {
                this.InterchangeInBoxArchiveExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeInBoxArchiveExOperationCompleted);
            }
            this.InvokeAsync("InterchangeInBoxArchiveEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        InterchangeControlID,
                        PageNo,
                        RecordsPerPage}, this.InterchangeInBoxArchiveExOperationCompleted, userState);
        }
        
        private void OnInterchangeInBoxArchiveExOperationCompleted(object arg) {
            if ((this.InterchangeInBoxArchiveExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeInBoxArchiveExCompleted(this, new InterchangeInBoxArchiveExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeOutBox", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo[] InterchangeOutBox(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID) {
            object[] results = this.Invoke("InterchangeOutBox", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        InterchangeControlID});
            return ((InterchangeIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeOutBoxAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID) {
            this.InterchangeOutBoxAsync(SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, null);
        }
        
        /// <remarks/>
        public void InterchangeOutBoxAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID, object userState) {
            if ((this.InterchangeOutBoxOperationCompleted == null)) {
                this.InterchangeOutBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeOutBoxOperationCompleted);
            }
            this.InvokeAsync("InterchangeOutBox", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        InterchangeControlID}, this.InterchangeOutBoxOperationCompleted, userState);
        }
        
        private void OnInterchangeOutBoxOperationCompleted(object arg) {
            if ((this.InterchangeOutBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeOutBoxCompleted(this, new InterchangeOutBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeOutBoxArchive", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfoCollection InterchangeOutBoxArchive(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID, short PageNo, short RecordsPerPage) {
            object[] results = this.Invoke("InterchangeOutBoxArchive", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        InterchangeControlID,
                        PageNo,
                        RecordsPerPage});
            return ((InterchangeIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeOutBoxArchiveAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID, short PageNo, short RecordsPerPage) {
            this.InterchangeOutBoxArchiveAsync(SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, PageNo, RecordsPerPage, null);
        }
        
        /// <remarks/>
        public void InterchangeOutBoxArchiveAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID, short PageNo, short RecordsPerPage, object userState) {
            if ((this.InterchangeOutBoxArchiveOperationCompleted == null)) {
                this.InterchangeOutBoxArchiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeOutBoxArchiveOperationCompleted);
            }
            this.InvokeAsync("InterchangeOutBoxArchive", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        InterchangeControlID,
                        PageNo,
                        RecordsPerPage}, this.InterchangeOutBoxArchiveOperationCompleted, userState);
        }
        
        private void OnInterchangeOutBoxArchiveOperationCompleted(object arg) {
            if ((this.InterchangeOutBoxArchiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeOutBoxArchiveCompleted(this, new InterchangeOutBoxArchiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeOutBoxEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo[] InterchangeOutBoxEx(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID) {
            object[] results = this.Invoke("InterchangeOutBoxEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        InterchangeControlID});
            return ((InterchangeIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeOutBoxExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID) {
            this.InterchangeOutBoxExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, null);
        }
        
        /// <remarks/>
        public void InterchangeOutBoxExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID, object userState) {
            if ((this.InterchangeOutBoxExOperationCompleted == null)) {
                this.InterchangeOutBoxExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeOutBoxExOperationCompleted);
            }
            this.InvokeAsync("InterchangeOutBoxEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        InterchangeControlID}, this.InterchangeOutBoxExOperationCompleted, userState);
        }
        
        private void OnInterchangeOutBoxExOperationCompleted(object arg) {
            if ((this.InterchangeOutBoxExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeOutBoxExCompleted(this, new InterchangeOutBoxExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeOutBoxArchiveEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfoCollection InterchangeOutBoxArchiveEx(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID, short PageNo, short RecordsPerPage) {
            object[] results = this.Invoke("InterchangeOutBoxArchiveEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        InterchangeControlID,
                        PageNo,
                        RecordsPerPage});
            return ((InterchangeIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeOutBoxArchiveExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID, short PageNo, short RecordsPerPage) {
            this.InterchangeOutBoxArchiveExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, PageNo, RecordsPerPage, null);
        }
        
        /// <remarks/>
        public void InterchangeOutBoxArchiveExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, string InterchangeControlID, short PageNo, short RecordsPerPage, object userState) {
            if ((this.InterchangeOutBoxArchiveExOperationCompleted == null)) {
                this.InterchangeOutBoxArchiveExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeOutBoxArchiveExOperationCompleted);
            }
            this.InvokeAsync("InterchangeOutBoxArchiveEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo,
                        InterchangeControlID,
                        PageNo,
                        RecordsPerPage}, this.InterchangeOutBoxArchiveExOperationCompleted, userState);
        }
        
        private void OnInterchangeOutBoxArchiveExOperationCompleted(object arg) {
            if ((this.InterchangeOutBoxArchiveExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeOutBoxArchiveExCompleted(this, new InterchangeOutBoxArchiveExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeOutBoxPending", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo[] InterchangeOutBoxPending(string SessionID, int ECGridIDFrom, int ECGridIDTo) {
            object[] results = this.Invoke("InterchangeOutBoxPending", new object[] {
                        SessionID,
                        ECGridIDFrom,
                        ECGridIDTo});
            return ((InterchangeIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeOutBoxPendingAsync(string SessionID, int ECGridIDFrom, int ECGridIDTo) {
            this.InterchangeOutBoxPendingAsync(SessionID, ECGridIDFrom, ECGridIDTo, null);
        }
        
        /// <remarks/>
        public void InterchangeOutBoxPendingAsync(string SessionID, int ECGridIDFrom, int ECGridIDTo, object userState) {
            if ((this.InterchangeOutBoxPendingOperationCompleted == null)) {
                this.InterchangeOutBoxPendingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeOutBoxPendingOperationCompleted);
            }
            this.InvokeAsync("InterchangeOutBoxPending", new object[] {
                        SessionID,
                        ECGridIDFrom,
                        ECGridIDTo}, this.InterchangeOutBoxPendingOperationCompleted, userState);
        }
        
        private void OnInterchangeOutBoxPendingOperationCompleted(object arg) {
            if ((this.InterchangeOutBoxPendingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeOutBoxPendingCompleted(this, new InterchangeOutBoxPendingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeOutBoxPendingEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo[] InterchangeOutBoxPendingEx(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo) {
            object[] results = this.Invoke("InterchangeOutBoxPendingEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridIDFrom,
                        ECGridIDTo});
            return ((InterchangeIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeOutBoxPendingExAsync(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo) {
            this.InterchangeOutBoxPendingExAsync(SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo, null);
        }
        
        /// <remarks/>
        public void InterchangeOutBoxPendingExAsync(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo, object userState) {
            if ((this.InterchangeOutBoxPendingExOperationCompleted == null)) {
                this.InterchangeOutBoxPendingExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeOutBoxPendingExOperationCompleted);
            }
            this.InvokeAsync("InterchangeOutBoxPendingEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridIDFrom,
                        ECGridIDTo}, this.InterchangeOutBoxPendingExOperationCompleted, userState);
        }
        
        private void OnInterchangeOutBoxPendingExOperationCompleted(object arg) {
            if ((this.InterchangeOutBoxPendingExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeOutBoxPendingExCompleted(this, new InterchangeOutBoxPendingExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeInBoxPending", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo[] InterchangeInBoxPending(string SessionID, int ECGridIDFrom, int ECGridIDTo) {
            object[] results = this.Invoke("InterchangeInBoxPending", new object[] {
                        SessionID,
                        ECGridIDFrom,
                        ECGridIDTo});
            return ((InterchangeIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeInBoxPendingAsync(string SessionID, int ECGridIDFrom, int ECGridIDTo) {
            this.InterchangeInBoxPendingAsync(SessionID, ECGridIDFrom, ECGridIDTo, null);
        }
        
        /// <remarks/>
        public void InterchangeInBoxPendingAsync(string SessionID, int ECGridIDFrom, int ECGridIDTo, object userState) {
            if ((this.InterchangeInBoxPendingOperationCompleted == null)) {
                this.InterchangeInBoxPendingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeInBoxPendingOperationCompleted);
            }
            this.InvokeAsync("InterchangeInBoxPending", new object[] {
                        SessionID,
                        ECGridIDFrom,
                        ECGridIDTo}, this.InterchangeInBoxPendingOperationCompleted, userState);
        }
        
        private void OnInterchangeInBoxPendingOperationCompleted(object arg) {
            if ((this.InterchangeInBoxPendingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeInBoxPendingCompleted(this, new InterchangeInBoxPendingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeInBoxPendingEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo[] InterchangeInBoxPendingEx(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo) {
            object[] results = this.Invoke("InterchangeInBoxPendingEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridIDFrom,
                        ECGridIDTo});
            return ((InterchangeIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeInBoxPendingExAsync(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo) {
            this.InterchangeInBoxPendingExAsync(SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo, null);
        }
        
        /// <remarks/>
        public void InterchangeInBoxPendingExAsync(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo, object userState) {
            if ((this.InterchangeInBoxPendingExOperationCompleted == null)) {
                this.InterchangeInBoxPendingExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeInBoxPendingExOperationCompleted);
            }
            this.InvokeAsync("InterchangeInBoxPendingEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridIDFrom,
                        ECGridIDTo}, this.InterchangeInBoxPendingExOperationCompleted, userState);
        }
        
        private void OnInterchangeInBoxPendingExOperationCompleted(object arg) {
            if ((this.InterchangeInBoxPendingExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeInBoxPendingExCompleted(this, new InterchangeInBoxPendingExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeInBoxBlocked", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo[] InterchangeInBoxBlocked(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo) {
            object[] results = this.Invoke("InterchangeInBoxBlocked", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo});
            return ((InterchangeIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeInBoxBlockedAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo) {
            this.InterchangeInBoxBlockedAsync(SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, null);
        }
        
        /// <remarks/>
        public void InterchangeInBoxBlockedAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, object userState) {
            if ((this.InterchangeInBoxBlockedOperationCompleted == null)) {
                this.InterchangeInBoxBlockedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeInBoxBlockedOperationCompleted);
            }
            this.InvokeAsync("InterchangeInBoxBlocked", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo}, this.InterchangeInBoxBlockedOperationCompleted, userState);
        }
        
        private void OnInterchangeInBoxBlockedOperationCompleted(object arg) {
            if ((this.InterchangeInBoxBlockedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeInBoxBlockedCompleted(this, new InterchangeInBoxBlockedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeInBoxBlockedEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo[] InterchangeInBoxBlockedEx(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo) {
            object[] results = this.Invoke("InterchangeInBoxBlockedEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo});
            return ((InterchangeIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeInBoxBlockedExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo) {
            this.InterchangeInBoxBlockedExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, null);
        }
        
        /// <remarks/>
        public void InterchangeInBoxBlockedExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, object userState) {
            if ((this.InterchangeInBoxBlockedExOperationCompleted == null)) {
                this.InterchangeInBoxBlockedExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeInBoxBlockedExOperationCompleted);
            }
            this.InvokeAsync("InterchangeInBoxBlockedEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo}, this.InterchangeInBoxBlockedExOperationCompleted, userState);
        }
        
        private void OnInterchangeInBoxBlockedExOperationCompleted(object arg) {
            if ((this.InterchangeInBoxBlockedExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeInBoxBlockedExCompleted(this, new InterchangeInBoxBlockedExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeOutBoxBlocked", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo[] InterchangeOutBoxBlocked(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo) {
            object[] results = this.Invoke("InterchangeOutBoxBlocked", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo});
            return ((InterchangeIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeOutBoxBlockedAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo) {
            this.InterchangeOutBoxBlockedAsync(SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, null);
        }
        
        /// <remarks/>
        public void InterchangeOutBoxBlockedAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, object userState) {
            if ((this.InterchangeOutBoxBlockedOperationCompleted == null)) {
                this.InterchangeOutBoxBlockedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeOutBoxBlockedOperationCompleted);
            }
            this.InvokeAsync("InterchangeOutBoxBlocked", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo}, this.InterchangeOutBoxBlockedOperationCompleted, userState);
        }
        
        private void OnInterchangeOutBoxBlockedOperationCompleted(object arg) {
            if ((this.InterchangeOutBoxBlockedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeOutBoxBlockedCompleted(this, new InterchangeOutBoxBlockedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeOutBoxBlockedEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo[] InterchangeOutBoxBlockedEx(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo) {
            object[] results = this.Invoke("InterchangeOutBoxBlockedEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo});
            return ((InterchangeIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeOutBoxBlockedExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo) {
            this.InterchangeOutBoxBlockedExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, null);
        }
        
        /// <remarks/>
        public void InterchangeOutBoxBlockedExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, object userState) {
            if ((this.InterchangeOutBoxBlockedExOperationCompleted == null)) {
                this.InterchangeOutBoxBlockedExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeOutBoxBlockedExOperationCompleted);
            }
            this.InvokeAsync("InterchangeOutBoxBlockedEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo}, this.InterchangeOutBoxBlockedExOperationCompleted, userState);
        }
        
        private void OnInterchangeOutBoxBlockedExOperationCompleted(object arg) {
            if ((this.InterchangeOutBoxBlockedExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeOutBoxBlockedExCompleted(this, new InterchangeOutBoxBlockedExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeHeaderInfo", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo InterchangeHeaderInfo(string SessionID, string InterchangeHeader) {
            object[] results = this.Invoke("InterchangeHeaderInfo", new object[] {
                        SessionID,
                        InterchangeHeader});
            return ((InterchangeIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeHeaderInfoAsync(string SessionID, string InterchangeHeader) {
            this.InterchangeHeaderInfoAsync(SessionID, InterchangeHeader, null);
        }
        
        /// <remarks/>
        public void InterchangeHeaderInfoAsync(string SessionID, string InterchangeHeader, object userState) {
            if ((this.InterchangeHeaderInfoOperationCompleted == null)) {
                this.InterchangeHeaderInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeHeaderInfoOperationCompleted);
            }
            this.InvokeAsync("InterchangeHeaderInfo", new object[] {
                        SessionID,
                        InterchangeHeader}, this.InterchangeHeaderInfoOperationCompleted, userState);
        }
        
        private void OnInterchangeHeaderInfoOperationCompleted(object arg) {
            if ((this.InterchangeHeaderInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeHeaderInfoCompleted(this, new InterchangeHeaderInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeHeaderInfoB", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo InterchangeHeaderInfoB(string SessionID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] InterchangeHeader) {
            object[] results = this.Invoke("InterchangeHeaderInfoB", new object[] {
                        SessionID,
                        InterchangeHeader});
            return ((InterchangeIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeHeaderInfoBAsync(string SessionID, byte[] InterchangeHeader) {
            this.InterchangeHeaderInfoBAsync(SessionID, InterchangeHeader, null);
        }
        
        /// <remarks/>
        public void InterchangeHeaderInfoBAsync(string SessionID, byte[] InterchangeHeader, object userState) {
            if ((this.InterchangeHeaderInfoBOperationCompleted == null)) {
                this.InterchangeHeaderInfoBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeHeaderInfoBOperationCompleted);
            }
            this.InvokeAsync("InterchangeHeaderInfoB", new object[] {
                        SessionID,
                        InterchangeHeader}, this.InterchangeHeaderInfoBOperationCompleted, userState);
        }
        
        private void OnInterchangeHeaderInfoBOperationCompleted(object arg) {
            if ((this.InterchangeHeaderInfoBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeHeaderInfoBCompleted(this, new InterchangeHeaderInfoBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeOutBoxNoRoute", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo[] InterchangeOutBoxNoRoute(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo) {
            object[] results = this.Invoke("InterchangeOutBoxNoRoute", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo});
            return ((InterchangeIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeOutBoxNoRouteAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo) {
            this.InterchangeOutBoxNoRouteAsync(SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, null);
        }
        
        /// <remarks/>
        public void InterchangeOutBoxNoRouteAsync(string SessionID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, object userState) {
            if ((this.InterchangeOutBoxNoRouteOperationCompleted == null)) {
                this.InterchangeOutBoxNoRouteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeOutBoxNoRouteOperationCompleted);
            }
            this.InvokeAsync("InterchangeOutBoxNoRoute", new object[] {
                        SessionID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo}, this.InterchangeOutBoxNoRouteOperationCompleted, userState);
        }
        
        private void OnInterchangeOutBoxNoRouteOperationCompleted(object arg) {
            if ((this.InterchangeOutBoxNoRouteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeOutBoxNoRouteCompleted(this, new InterchangeOutBoxNoRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeOutBoxNoRouteEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDInfo[] InterchangeOutBoxNoRouteEx(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo) {
            object[] results = this.Invoke("InterchangeOutBoxNoRouteEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo});
            return ((InterchangeIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeOutBoxNoRouteExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo) {
            this.InterchangeOutBoxNoRouteExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, null);
        }
        
        /// <remarks/>
        public void InterchangeOutBoxNoRouteExAsync(string SessionID, int NetworkID, int MailboxID, System.DateTime BeginDate, System.DateTime EndDate, int ECGridIDFrom, int ECGridIDTo, object userState) {
            if ((this.InterchangeOutBoxNoRouteExOperationCompleted == null)) {
                this.InterchangeOutBoxNoRouteExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeOutBoxNoRouteExOperationCompleted);
            }
            this.InvokeAsync("InterchangeOutBoxNoRouteEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        BeginDate,
                        EndDate,
                        ECGridIDFrom,
                        ECGridIDTo}, this.InterchangeOutBoxNoRouteExOperationCompleted, userState);
        }
        
        private void OnInterchangeOutBoxNoRouteExOperationCompleted(object arg) {
            if ((this.InterchangeOutBoxNoRouteExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeOutBoxNoRouteExCompleted(this, new InterchangeOutBoxNoRouteExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeResend", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterchangeIDStatus InterchangeResend(string SessionID, long InterchangeID) {
            object[] results = this.Invoke("InterchangeResend", new object[] {
                        SessionID,
                        InterchangeID});
            return ((InterchangeIDStatus)(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeResendAsync(string SessionID, long InterchangeID) {
            this.InterchangeResendAsync(SessionID, InterchangeID, null);
        }
        
        /// <remarks/>
        public void InterchangeResendAsync(string SessionID, long InterchangeID, object userState) {
            if ((this.InterchangeResendOperationCompleted == null)) {
                this.InterchangeResendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeResendOperationCompleted);
            }
            this.InvokeAsync("InterchangeResend", new object[] {
                        SessionID,
                        InterchangeID}, this.InterchangeResendOperationCompleted, userState);
        }
        
        private void OnInterchangeResendOperationCompleted(object arg) {
            if ((this.InterchangeResendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeResendCompleted(this, new InterchangeResendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterchangeCancel", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InterchangeCancel(string SessionID, int InterchangeID) {
            object[] results = this.Invoke("InterchangeCancel", new object[] {
                        SessionID,
                        InterchangeID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InterchangeCancelAsync(string SessionID, int InterchangeID) {
            this.InterchangeCancelAsync(SessionID, InterchangeID, null);
        }
        
        /// <remarks/>
        public void InterchangeCancelAsync(string SessionID, int InterchangeID, object userState) {
            if ((this.InterchangeCancelOperationCompleted == null)) {
                this.InterchangeCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterchangeCancelOperationCompleted);
            }
            this.InvokeAsync("InterchangeCancel", new object[] {
                        SessionID,
                        InterchangeID}, this.InterchangeCancelOperationCompleted, userState);
        }
        
        private void OnInterchangeCancelOperationCompleted(object arg) {
            if ((this.InterchangeCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterchangeCancelCompleted(this, new InterchangeCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CallBackEventInfo", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CallBackEventIDInfo CallBackEventInfo(string SessionID, int CallBackEventID, short QueueCount) {
            object[] results = this.Invoke("CallBackEventInfo", new object[] {
                        SessionID,
                        CallBackEventID,
                        QueueCount});
            return ((CallBackEventIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CallBackEventInfoAsync(string SessionID, int CallBackEventID, short QueueCount) {
            this.CallBackEventInfoAsync(SessionID, CallBackEventID, QueueCount, null);
        }
        
        /// <remarks/>
        public void CallBackEventInfoAsync(string SessionID, int CallBackEventID, short QueueCount, object userState) {
            if ((this.CallBackEventInfoOperationCompleted == null)) {
                this.CallBackEventInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallBackEventInfoOperationCompleted);
            }
            this.InvokeAsync("CallBackEventInfo", new object[] {
                        SessionID,
                        CallBackEventID,
                        QueueCount}, this.CallBackEventInfoOperationCompleted, userState);
        }
        
        private void OnCallBackEventInfoOperationCompleted(object arg) {
            if ((this.CallBackEventInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallBackEventInfoCompleted(this, new CallBackEventInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CallBackEventListEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CallBackEventIDInfo[] CallBackEventListEx(string SessionID, int NetworkID, int MailboxID, bool ShowInactive) {
            object[] results = this.Invoke("CallBackEventListEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ShowInactive});
            return ((CallBackEventIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void CallBackEventListExAsync(string SessionID, int NetworkID, int MailboxID, bool ShowInactive) {
            this.CallBackEventListExAsync(SessionID, NetworkID, MailboxID, ShowInactive, null);
        }
        
        /// <remarks/>
        public void CallBackEventListExAsync(string SessionID, int NetworkID, int MailboxID, bool ShowInactive, object userState) {
            if ((this.CallBackEventListExOperationCompleted == null)) {
                this.CallBackEventListExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallBackEventListExOperationCompleted);
            }
            this.InvokeAsync("CallBackEventListEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ShowInactive}, this.CallBackEventListExOperationCompleted, userState);
        }
        
        private void OnCallBackEventListExOperationCompleted(object arg) {
            if ((this.CallBackEventListExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallBackEventListExCompleted(this, new CallBackEventListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CallBackAddEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CallBackEventIDInfo CallBackAddEx(string SessionID, int NetworkID, int MailboxID, int UserID, Objects SystemObject, short ObjectStatus, Direction Direction, short Frequency, short MaxRetries, string URL, HTTPAuthType HTTPAuthentication, string HTTPUser, string HTTPPassword, Status Status) {
            object[] results = this.Invoke("CallBackAddEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        UserID,
                        SystemObject,
                        ObjectStatus,
                        Direction,
                        Frequency,
                        MaxRetries,
                        URL,
                        HTTPAuthentication,
                        HTTPUser,
                        HTTPPassword,
                        Status});
            return ((CallBackEventIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CallBackAddExAsync(string SessionID, int NetworkID, int MailboxID, int UserID, Objects SystemObject, short ObjectStatus, Direction Direction, short Frequency, short MaxRetries, string URL, HTTPAuthType HTTPAuthentication, string HTTPUser, string HTTPPassword, Status Status) {
            this.CallBackAddExAsync(SessionID, NetworkID, MailboxID, UserID, SystemObject, ObjectStatus, Direction, Frequency, MaxRetries, URL, HTTPAuthentication, HTTPUser, HTTPPassword, Status, null);
        }
        
        /// <remarks/>
        public void CallBackAddExAsync(string SessionID, int NetworkID, int MailboxID, int UserID, Objects SystemObject, short ObjectStatus, Direction Direction, short Frequency, short MaxRetries, string URL, HTTPAuthType HTTPAuthentication, string HTTPUser, string HTTPPassword, Status Status, object userState) {
            if ((this.CallBackAddExOperationCompleted == null)) {
                this.CallBackAddExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallBackAddExOperationCompleted);
            }
            this.InvokeAsync("CallBackAddEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        UserID,
                        SystemObject,
                        ObjectStatus,
                        Direction,
                        Frequency,
                        MaxRetries,
                        URL,
                        HTTPAuthentication,
                        HTTPUser,
                        HTTPPassword,
                        Status}, this.CallBackAddExOperationCompleted, userState);
        }
        
        private void OnCallBackAddExOperationCompleted(object arg) {
            if ((this.CallBackAddExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallBackAddExCompleted(this, new CallBackAddExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CallBackEventSetStatus", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CallBackEventSetStatus(string SessionID, int CallBackEventID, Status Status) {
            object[] results = this.Invoke("CallBackEventSetStatus", new object[] {
                        SessionID,
                        CallBackEventID,
                        Status});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CallBackEventSetStatusAsync(string SessionID, int CallBackEventID, Status Status) {
            this.CallBackEventSetStatusAsync(SessionID, CallBackEventID, Status, null);
        }
        
        /// <remarks/>
        public void CallBackEventSetStatusAsync(string SessionID, int CallBackEventID, Status Status, object userState) {
            if ((this.CallBackEventSetStatusOperationCompleted == null)) {
                this.CallBackEventSetStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallBackEventSetStatusOperationCompleted);
            }
            this.InvokeAsync("CallBackEventSetStatus", new object[] {
                        SessionID,
                        CallBackEventID,
                        Status}, this.CallBackEventSetStatusOperationCompleted, userState);
        }
        
        private void OnCallBackEventSetStatusOperationCompleted(object arg) {
            if ((this.CallBackEventSetStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallBackEventSetStatusCompleted(this, new CallBackEventSetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CallBackQueueInfo", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CallBackQueueIDInfo CallBackQueueInfo(string SessionID, int CallBackQueueID) {
            object[] results = this.Invoke("CallBackQueueInfo", new object[] {
                        SessionID,
                        CallBackQueueID});
            return ((CallBackQueueIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CallBackQueueInfoAsync(string SessionID, int CallBackQueueID) {
            this.CallBackQueueInfoAsync(SessionID, CallBackQueueID, null);
        }
        
        /// <remarks/>
        public void CallBackQueueInfoAsync(string SessionID, int CallBackQueueID, object userState) {
            if ((this.CallBackQueueInfoOperationCompleted == null)) {
                this.CallBackQueueInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallBackQueueInfoOperationCompleted);
            }
            this.InvokeAsync("CallBackQueueInfo", new object[] {
                        SessionID,
                        CallBackQueueID}, this.CallBackQueueInfoOperationCompleted, userState);
        }
        
        private void OnCallBackQueueInfoOperationCompleted(object arg) {
            if ((this.CallBackQueueInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallBackQueueInfoCompleted(this, new CallBackQueueInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CallBackTest", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CallBackQueueIDInfo CallBackTest(string SessionID, int CallBackEventID, int ParcelID, int InterchangeID, int UserID) {
            object[] results = this.Invoke("CallBackTest", new object[] {
                        SessionID,
                        CallBackEventID,
                        ParcelID,
                        InterchangeID,
                        UserID});
            return ((CallBackQueueIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CallBackTestAsync(string SessionID, int CallBackEventID, int ParcelID, int InterchangeID, int UserID) {
            this.CallBackTestAsync(SessionID, CallBackEventID, ParcelID, InterchangeID, UserID, null);
        }
        
        /// <remarks/>
        public void CallBackTestAsync(string SessionID, int CallBackEventID, int ParcelID, int InterchangeID, int UserID, object userState) {
            if ((this.CallBackTestOperationCompleted == null)) {
                this.CallBackTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallBackTestOperationCompleted);
            }
            this.InvokeAsync("CallBackTest", new object[] {
                        SessionID,
                        CallBackEventID,
                        ParcelID,
                        InterchangeID,
                        UserID}, this.CallBackTestOperationCompleted, userState);
        }
        
        private void OnCallBackTestOperationCompleted(object arg) {
            if ((this.CallBackTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallBackTestCompleted(this, new CallBackTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CallBackPendingList", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CallBackQueueIDInfo[] CallBackPendingList(string SessionID) {
            object[] results = this.Invoke("CallBackPendingList", new object[] {
                        SessionID});
            return ((CallBackQueueIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void CallBackPendingListAsync(string SessionID) {
            this.CallBackPendingListAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void CallBackPendingListAsync(string SessionID, object userState) {
            if ((this.CallBackPendingListOperationCompleted == null)) {
                this.CallBackPendingListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallBackPendingListOperationCompleted);
            }
            this.InvokeAsync("CallBackPendingList", new object[] {
                        SessionID}, this.CallBackPendingListOperationCompleted, userState);
        }
        
        private void OnCallBackPendingListOperationCompleted(object arg) {
            if ((this.CallBackPendingListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallBackPendingListCompleted(this, new CallBackPendingListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CallBackPendingListEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CallBackQueueIDInfo[] CallBackPendingListEx(string SessionID, int NetworkID, int MailboxID) {
            object[] results = this.Invoke("CallBackPendingListEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID});
            return ((CallBackQueueIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void CallBackPendingListExAsync(string SessionID, int NetworkID, int MailboxID) {
            this.CallBackPendingListExAsync(SessionID, NetworkID, MailboxID, null);
        }
        
        /// <remarks/>
        public void CallBackPendingListExAsync(string SessionID, int NetworkID, int MailboxID, object userState) {
            if ((this.CallBackPendingListExOperationCompleted == null)) {
                this.CallBackPendingListExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallBackPendingListExOperationCompleted);
            }
            this.InvokeAsync("CallBackPendingListEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID}, this.CallBackPendingListExOperationCompleted, userState);
        }
        
        private void OnCallBackPendingListExOperationCompleted(object arg) {
            if ((this.CallBackPendingListExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallBackPendingListExCompleted(this, new CallBackPendingListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MailboxDescription", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MailboxDescription(string SessionID, int MailboxID, string Description) {
            object[] results = this.Invoke("MailboxDescription", new object[] {
                        SessionID,
                        MailboxID,
                        Description});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MailboxDescriptionAsync(string SessionID, int MailboxID, string Description) {
            this.MailboxDescriptionAsync(SessionID, MailboxID, Description, null);
        }
        
        /// <remarks/>
        public void MailboxDescriptionAsync(string SessionID, int MailboxID, string Description, object userState) {
            if ((this.MailboxDescriptionOperationCompleted == null)) {
                this.MailboxDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailboxDescriptionOperationCompleted);
            }
            this.InvokeAsync("MailboxDescription", new object[] {
                        SessionID,
                        MailboxID,
                        Description}, this.MailboxDescriptionOperationCompleted, userState);
        }
        
        private void OnMailboxDescriptionOperationCompleted(object arg) {
            if ((this.MailboxDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailboxDescriptionCompleted(this, new MailboxDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MailboxUse", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MailboxUse(string SessionID, int MailboxID, UseType UseType) {
            object[] results = this.Invoke("MailboxUse", new object[] {
                        SessionID,
                        MailboxID,
                        UseType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MailboxUseAsync(string SessionID, int MailboxID, UseType UseType) {
            this.MailboxUseAsync(SessionID, MailboxID, UseType, null);
        }
        
        /// <remarks/>
        public void MailboxUseAsync(string SessionID, int MailboxID, UseType UseType, object userState) {
            if ((this.MailboxUseOperationCompleted == null)) {
                this.MailboxUseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailboxUseOperationCompleted);
            }
            this.InvokeAsync("MailboxUse", new object[] {
                        SessionID,
                        MailboxID,
                        UseType}, this.MailboxUseOperationCompleted, userState);
        }
        
        private void OnMailboxUseOperationCompleted(object arg) {
            if ((this.MailboxUseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailboxUseCompleted(this, new MailboxUseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MailboxList", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MailboxIDInfo[] MailboxList(string SessionID, string Name) {
            object[] results = this.Invoke("MailboxList", new object[] {
                        SessionID,
                        Name});
            return ((MailboxIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void MailboxListAsync(string SessionID, string Name) {
            this.MailboxListAsync(SessionID, Name, null);
        }
        
        /// <remarks/>
        public void MailboxListAsync(string SessionID, string Name, object userState) {
            if ((this.MailboxListOperationCompleted == null)) {
                this.MailboxListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailboxListOperationCompleted);
            }
            this.InvokeAsync("MailboxList", new object[] {
                        SessionID,
                        Name}, this.MailboxListOperationCompleted, userState);
        }
        
        private void OnMailboxListOperationCompleted(object arg) {
            if ((this.MailboxListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailboxListCompleted(this, new MailboxListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MailboxListEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MailboxIDInfo[] MailboxListEx(string SessionID, int NetworkID, string Name) {
            object[] results = this.Invoke("MailboxListEx", new object[] {
                        SessionID,
                        NetworkID,
                        Name});
            return ((MailboxIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void MailboxListExAsync(string SessionID, int NetworkID, string Name) {
            this.MailboxListExAsync(SessionID, NetworkID, Name, null);
        }
        
        /// <remarks/>
        public void MailboxListExAsync(string SessionID, int NetworkID, string Name, object userState) {
            if ((this.MailboxListExOperationCompleted == null)) {
                this.MailboxListExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailboxListExOperationCompleted);
            }
            this.InvokeAsync("MailboxListEx", new object[] {
                        SessionID,
                        NetworkID,
                        Name}, this.MailboxListExOperationCompleted, userState);
        }
        
        private void OnMailboxListExOperationCompleted(object arg) {
            if ((this.MailboxListExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailboxListExCompleted(this, new MailboxListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPAdd", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TPAdd(string SessionID, string Qualifier, string ID, string Description) {
            object[] results = this.Invoke("TPAdd", new object[] {
                        SessionID,
                        Qualifier,
                        ID,
                        Description});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TPAddAsync(string SessionID, string Qualifier, string ID, string Description) {
            this.TPAddAsync(SessionID, Qualifier, ID, Description, null);
        }
        
        /// <remarks/>
        public void TPAddAsync(string SessionID, string Qualifier, string ID, string Description, object userState) {
            if ((this.TPAddOperationCompleted == null)) {
                this.TPAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPAddOperationCompleted);
            }
            this.InvokeAsync("TPAdd", new object[] {
                        SessionID,
                        Qualifier,
                        ID,
                        Description}, this.TPAddOperationCompleted, userState);
        }
        
        private void OnTPAddOperationCompleted(object arg) {
            if ((this.TPAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPAddCompleted(this, new TPAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPAddVAN", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TPAddVAN(string SessionID, int NetworkID, string Qualifier, string ID, string Description) {
            object[] results = this.Invoke("TPAddVAN", new object[] {
                        SessionID,
                        NetworkID,
                        Qualifier,
                        ID,
                        Description});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TPAddVANAsync(string SessionID, int NetworkID, string Qualifier, string ID, string Description) {
            this.TPAddVANAsync(SessionID, NetworkID, Qualifier, ID, Description, null);
        }
        
        /// <remarks/>
        public void TPAddVANAsync(string SessionID, int NetworkID, string Qualifier, string ID, string Description, object userState) {
            if ((this.TPAddVANOperationCompleted == null)) {
                this.TPAddVANOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPAddVANOperationCompleted);
            }
            this.InvokeAsync("TPAddVAN", new object[] {
                        SessionID,
                        NetworkID,
                        Qualifier,
                        ID,
                        Description}, this.TPAddVANOperationCompleted, userState);
        }
        
        private void OnTPAddVANOperationCompleted(object arg) {
            if ((this.TPAddVANCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPAddVANCompleted(this, new TPAddVANCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPAddEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TPAddEx(string SessionID, int NetworkID, int MailboxID, string Qualifier, string ID, string Description, RoutingGroup RoutingGroup) {
            object[] results = this.Invoke("TPAddEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        Qualifier,
                        ID,
                        Description,
                        RoutingGroup});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TPAddExAsync(string SessionID, int NetworkID, int MailboxID, string Qualifier, string ID, string Description, RoutingGroup RoutingGroup) {
            this.TPAddExAsync(SessionID, NetworkID, MailboxID, Qualifier, ID, Description, RoutingGroup, null);
        }
        
        /// <remarks/>
        public void TPAddExAsync(string SessionID, int NetworkID, int MailboxID, string Qualifier, string ID, string Description, RoutingGroup RoutingGroup, object userState) {
            if ((this.TPAddExOperationCompleted == null)) {
                this.TPAddExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPAddExOperationCompleted);
            }
            this.InvokeAsync("TPAddEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        Qualifier,
                        ID,
                        Description,
                        RoutingGroup}, this.TPAddExOperationCompleted, userState);
        }
        
        private void OnTPAddExOperationCompleted(object arg) {
            if ((this.TPAddExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPAddExCompleted(this, new TPAddExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPMove", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TPMove(string SessionID, int ECGridID, System.DateTime MoveDateTime) {
            object[] results = this.Invoke("TPMove", new object[] {
                        SessionID,
                        ECGridID,
                        MoveDateTime});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TPMoveAsync(string SessionID, int ECGridID, System.DateTime MoveDateTime) {
            this.TPMoveAsync(SessionID, ECGridID, MoveDateTime, null);
        }
        
        /// <remarks/>
        public void TPMoveAsync(string SessionID, int ECGridID, System.DateTime MoveDateTime, object userState) {
            if ((this.TPMoveOperationCompleted == null)) {
                this.TPMoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPMoveOperationCompleted);
            }
            this.InvokeAsync("TPMove", new object[] {
                        SessionID,
                        ECGridID,
                        MoveDateTime}, this.TPMoveOperationCompleted, userState);
        }
        
        private void OnTPMoveOperationCompleted(object arg) {
            if ((this.TPMoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPMoveCompleted(this, new TPMoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPMoveMailbox", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TPMoveMailbox(string SessionID, int ECGridID, int MailboxID) {
            object[] results = this.Invoke("TPMoveMailbox", new object[] {
                        SessionID,
                        ECGridID,
                        MailboxID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TPMoveMailboxAsync(string SessionID, int ECGridID, int MailboxID) {
            this.TPMoveMailboxAsync(SessionID, ECGridID, MailboxID, null);
        }
        
        /// <remarks/>
        public void TPMoveMailboxAsync(string SessionID, int ECGridID, int MailboxID, object userState) {
            if ((this.TPMoveMailboxOperationCompleted == null)) {
                this.TPMoveMailboxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPMoveMailboxOperationCompleted);
            }
            this.InvokeAsync("TPMoveMailbox", new object[] {
                        SessionID,
                        ECGridID,
                        MailboxID}, this.TPMoveMailboxOperationCompleted, userState);
        }
        
        private void OnTPMoveMailboxOperationCompleted(object arg) {
            if ((this.TPMoveMailboxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPMoveMailboxCompleted(this, new TPMoveMailboxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPMoveEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TPMoveEx(string SessionID, int NetworkID, int MailboxID, int ECGridID, System.DateTime MoveDateTime) {
            object[] results = this.Invoke("TPMoveEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridID,
                        MoveDateTime});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TPMoveExAsync(string SessionID, int NetworkID, int MailboxID, int ECGridID, System.DateTime MoveDateTime) {
            this.TPMoveExAsync(SessionID, NetworkID, MailboxID, ECGridID, MoveDateTime, null);
        }
        
        /// <remarks/>
        public void TPMoveExAsync(string SessionID, int NetworkID, int MailboxID, int ECGridID, System.DateTime MoveDateTime, object userState) {
            if ((this.TPMoveExOperationCompleted == null)) {
                this.TPMoveExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPMoveExOperationCompleted);
            }
            this.InvokeAsync("TPMoveEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridID,
                        MoveDateTime}, this.TPMoveExOperationCompleted, userState);
        }
        
        private void OnTPMoveExOperationCompleted(object arg) {
            if ((this.TPMoveExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPMoveExCompleted(this, new TPMoveExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPUpdateDescription", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TPUpdateDescription(string SessionID, int ECGridID, string Description) {
            object[] results = this.Invoke("TPUpdateDescription", new object[] {
                        SessionID,
                        ECGridID,
                        Description});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TPUpdateDescriptionAsync(string SessionID, int ECGridID, string Description) {
            this.TPUpdateDescriptionAsync(SessionID, ECGridID, Description, null);
        }
        
        /// <remarks/>
        public void TPUpdateDescriptionAsync(string SessionID, int ECGridID, string Description, object userState) {
            if ((this.TPUpdateDescriptionOperationCompleted == null)) {
                this.TPUpdateDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPUpdateDescriptionOperationCompleted);
            }
            this.InvokeAsync("TPUpdateDescription", new object[] {
                        SessionID,
                        ECGridID,
                        Description}, this.TPUpdateDescriptionOperationCompleted, userState);
        }
        
        private void OnTPUpdateDescriptionOperationCompleted(object arg) {
            if ((this.TPUpdateDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPUpdateDescriptionCompleted(this, new TPUpdateDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPUpdateDataEMail", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TPUpdateDataEMail(string SessionID, int ECGridID, EMailSystem EMailSystem, string DataEMail, EMailPayload PayloadPosition) {
            object[] results = this.Invoke("TPUpdateDataEMail", new object[] {
                        SessionID,
                        ECGridID,
                        EMailSystem,
                        DataEMail,
                        PayloadPosition});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TPUpdateDataEMailAsync(string SessionID, int ECGridID, EMailSystem EMailSystem, string DataEMail, EMailPayload PayloadPosition) {
            this.TPUpdateDataEMailAsync(SessionID, ECGridID, EMailSystem, DataEMail, PayloadPosition, null);
        }
        
        /// <remarks/>
        public void TPUpdateDataEMailAsync(string SessionID, int ECGridID, EMailSystem EMailSystem, string DataEMail, EMailPayload PayloadPosition, object userState) {
            if ((this.TPUpdateDataEMailOperationCompleted == null)) {
                this.TPUpdateDataEMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPUpdateDataEMailOperationCompleted);
            }
            this.InvokeAsync("TPUpdateDataEMail", new object[] {
                        SessionID,
                        ECGridID,
                        EMailSystem,
                        DataEMail,
                        PayloadPosition}, this.TPUpdateDataEMailOperationCompleted, userState);
        }
        
        private void OnTPUpdateDataEMailOperationCompleted(object arg) {
            if ((this.TPUpdateDataEMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPUpdateDataEMailCompleted(this, new TPUpdateDataEMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPActivate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TPActivate(string SessionID, int ECGridID) {
            object[] results = this.Invoke("TPActivate", new object[] {
                        SessionID,
                        ECGridID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TPActivateAsync(string SessionID, int ECGridID) {
            this.TPActivateAsync(SessionID, ECGridID, null);
        }
        
        /// <remarks/>
        public void TPActivateAsync(string SessionID, int ECGridID, object userState) {
            if ((this.TPActivateOperationCompleted == null)) {
                this.TPActivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPActivateOperationCompleted);
            }
            this.InvokeAsync("TPActivate", new object[] {
                        SessionID,
                        ECGridID}, this.TPActivateOperationCompleted, userState);
        }
        
        private void OnTPActivateOperationCompleted(object arg) {
            if ((this.TPActivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPActivateCompleted(this, new TPActivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPSuspend", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TPSuspend(string SessionID, int ECGridID) {
            object[] results = this.Invoke("TPSuspend", new object[] {
                        SessionID,
                        ECGridID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TPSuspendAsync(string SessionID, int ECGridID) {
            this.TPSuspendAsync(SessionID, ECGridID, null);
        }
        
        /// <remarks/>
        public void TPSuspendAsync(string SessionID, int ECGridID, object userState) {
            if ((this.TPSuspendOperationCompleted == null)) {
                this.TPSuspendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPSuspendOperationCompleted);
            }
            this.InvokeAsync("TPSuspend", new object[] {
                        SessionID,
                        ECGridID}, this.TPSuspendOperationCompleted, userState);
        }
        
        private void OnTPSuspendOperationCompleted(object arg) {
            if ((this.TPSuspendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPSuspendCompleted(this, new TPSuspendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPTerminate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TPTerminate(string SessionID, int ECGridID) {
            object[] results = this.Invoke("TPTerminate", new object[] {
                        SessionID,
                        ECGridID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TPTerminateAsync(string SessionID, int ECGridID) {
            this.TPTerminateAsync(SessionID, ECGridID, null);
        }
        
        /// <remarks/>
        public void TPTerminateAsync(string SessionID, int ECGridID, object userState) {
            if ((this.TPTerminateOperationCompleted == null)) {
                this.TPTerminateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPTerminateOperationCompleted);
            }
            this.InvokeAsync("TPTerminate", new object[] {
                        SessionID,
                        ECGridID}, this.TPTerminateOperationCompleted, userState);
        }
        
        private void OnTPTerminateOperationCompleted(object arg) {
            if ((this.TPTerminateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPTerminateCompleted(this, new TPTerminateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPSetRoutingGroup", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TPSetRoutingGroup(string SessionID, int ECGridID, RoutingGroup RoutingGroup) {
            object[] results = this.Invoke("TPSetRoutingGroup", new object[] {
                        SessionID,
                        ECGridID,
                        RoutingGroup});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TPSetRoutingGroupAsync(string SessionID, int ECGridID, RoutingGroup RoutingGroup) {
            this.TPSetRoutingGroupAsync(SessionID, ECGridID, RoutingGroup, null);
        }
        
        /// <remarks/>
        public void TPSetRoutingGroupAsync(string SessionID, int ECGridID, RoutingGroup RoutingGroup, object userState) {
            if ((this.TPSetRoutingGroupOperationCompleted == null)) {
                this.TPSetRoutingGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPSetRoutingGroupOperationCompleted);
            }
            this.InvokeAsync("TPSetRoutingGroup", new object[] {
                        SessionID,
                        ECGridID,
                        RoutingGroup}, this.TPSetRoutingGroupOperationCompleted, userState);
        }
        
        private void OnTPSetRoutingGroupOperationCompleted(object arg) {
            if ((this.TPSetRoutingGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPSetRoutingGroupCompleted(this, new TPSetRoutingGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPInfo", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ECGridIDInfo TPInfo(string SessionID, int ECGridID) {
            object[] results = this.Invoke("TPInfo", new object[] {
                        SessionID,
                        ECGridID});
            return ((ECGridIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void TPInfoAsync(string SessionID, int ECGridID) {
            this.TPInfoAsync(SessionID, ECGridID, null);
        }
        
        /// <remarks/>
        public void TPInfoAsync(string SessionID, int ECGridID, object userState) {
            if ((this.TPInfoOperationCompleted == null)) {
                this.TPInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPInfoOperationCompleted);
            }
            this.InvokeAsync("TPInfo", new object[] {
                        SessionID,
                        ECGridID}, this.TPInfoOperationCompleted, userState);
        }
        
        private void OnTPInfoOperationCompleted(object arg) {
            if ((this.TPInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPInfoCompleted(this, new TPInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPSearch", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ECGridIDInfo[] TPSearch(string SessionID, string Qualifier, string ID, bool ShowInactive) {
            object[] results = this.Invoke("TPSearch", new object[] {
                        SessionID,
                        Qualifier,
                        ID,
                        ShowInactive});
            return ((ECGridIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void TPSearchAsync(string SessionID, string Qualifier, string ID, bool ShowInactive) {
            this.TPSearchAsync(SessionID, Qualifier, ID, ShowInactive, null);
        }
        
        /// <remarks/>
        public void TPSearchAsync(string SessionID, string Qualifier, string ID, bool ShowInactive, object userState) {
            if ((this.TPSearchOperationCompleted == null)) {
                this.TPSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPSearchOperationCompleted);
            }
            this.InvokeAsync("TPSearch", new object[] {
                        SessionID,
                        Qualifier,
                        ID,
                        ShowInactive}, this.TPSearchOperationCompleted, userState);
        }
        
        private void OnTPSearchOperationCompleted(object arg) {
            if ((this.TPSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPSearchCompleted(this, new TPSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPSearchEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ECGridIDInfo[] TPSearchEx(string SessionID, int NetworkID, int MailboxID, string Qualifier, string ID, bool ShowInactive) {
            object[] results = this.Invoke("TPSearchEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        Qualifier,
                        ID,
                        ShowInactive});
            return ((ECGridIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void TPSearchExAsync(string SessionID, int NetworkID, int MailboxID, string Qualifier, string ID, bool ShowInactive) {
            this.TPSearchExAsync(SessionID, NetworkID, MailboxID, Qualifier, ID, ShowInactive, null);
        }
        
        /// <remarks/>
        public void TPSearchExAsync(string SessionID, int NetworkID, int MailboxID, string Qualifier, string ID, bool ShowInactive, object userState) {
            if ((this.TPSearchExOperationCompleted == null)) {
                this.TPSearchExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPSearchExOperationCompleted);
            }
            this.InvokeAsync("TPSearchEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        Qualifier,
                        ID,
                        ShowInactive}, this.TPSearchExOperationCompleted, userState);
        }
        
        private void OnTPSearchExOperationCompleted(object arg) {
            if ((this.TPSearchExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPSearchExCompleted(this, new TPSearchExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPList", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ECGridIDInfo[] TPList(string SessionID, bool ShowInactive) {
            object[] results = this.Invoke("TPList", new object[] {
                        SessionID,
                        ShowInactive});
            return ((ECGridIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void TPListAsync(string SessionID, bool ShowInactive) {
            this.TPListAsync(SessionID, ShowInactive, null);
        }
        
        /// <remarks/>
        public void TPListAsync(string SessionID, bool ShowInactive, object userState) {
            if ((this.TPListOperationCompleted == null)) {
                this.TPListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPListOperationCompleted);
            }
            this.InvokeAsync("TPList", new object[] {
                        SessionID,
                        ShowInactive}, this.TPListOperationCompleted, userState);
        }
        
        private void OnTPListOperationCompleted(object arg) {
            if ((this.TPListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPListCompleted(this, new TPListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPListEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ECGridIDInfo[] TPListEx(string SessionID, int NetworkID, int MailboxID, bool ShowInactive) {
            object[] results = this.Invoke("TPListEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ShowInactive});
            return ((ECGridIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void TPListExAsync(string SessionID, int NetworkID, int MailboxID, bool ShowInactive) {
            this.TPListExAsync(SessionID, NetworkID, MailboxID, ShowInactive, null);
        }
        
        /// <remarks/>
        public void TPListExAsync(string SessionID, int NetworkID, int MailboxID, bool ShowInactive, object userState) {
            if ((this.TPListExOperationCompleted == null)) {
                this.TPListExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPListExOperationCompleted);
            }
            this.InvokeAsync("TPListEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ShowInactive}, this.TPListExOperationCompleted, userState);
        }
        
        private void OnTPListExOperationCompleted(object arg) {
            if ((this.TPListExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPListExCompleted(this, new TPListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPListExPaged", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ECGridIDInfoCollection TPListExPaged(string SessionID, int NetworkID, int MailboxID, bool ShowInactive, short PageSize, short PageNumber) {
            object[] results = this.Invoke("TPListExPaged", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ShowInactive,
                        PageSize,
                        PageNumber});
            return ((ECGridIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void TPListExPagedAsync(string SessionID, int NetworkID, int MailboxID, bool ShowInactive, short PageSize, short PageNumber) {
            this.TPListExPagedAsync(SessionID, NetworkID, MailboxID, ShowInactive, PageSize, PageNumber, null);
        }
        
        /// <remarks/>
        public void TPListExPagedAsync(string SessionID, int NetworkID, int MailboxID, bool ShowInactive, short PageSize, short PageNumber, object userState) {
            if ((this.TPListExPagedOperationCompleted == null)) {
                this.TPListExPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPListExPagedOperationCompleted);
            }
            this.InvokeAsync("TPListExPaged", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ShowInactive,
                        PageSize,
                        PageNumber}, this.TPListExPagedOperationCompleted, userState);
        }
        
        private void OnTPListExPagedOperationCompleted(object arg) {
            if ((this.TPListExPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPListExPagedCompleted(this, new TPListExPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPListByOwner", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ECGridIDInfoCollection TPListByOwner(string SessionID, int OwnerUserID, OrderBy OrderBy, bool ShowInactive, short PageSize, short PageNumber) {
            object[] results = this.Invoke("TPListByOwner", new object[] {
                        SessionID,
                        OwnerUserID,
                        OrderBy,
                        ShowInactive,
                        PageSize,
                        PageNumber});
            return ((ECGridIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void TPListByOwnerAsync(string SessionID, int OwnerUserID, OrderBy OrderBy, bool ShowInactive, short PageSize, short PageNumber) {
            this.TPListByOwnerAsync(SessionID, OwnerUserID, OrderBy, ShowInactive, PageSize, PageNumber, null);
        }
        
        /// <remarks/>
        public void TPListByOwnerAsync(string SessionID, int OwnerUserID, OrderBy OrderBy, bool ShowInactive, short PageSize, short PageNumber, object userState) {
            if ((this.TPListByOwnerOperationCompleted == null)) {
                this.TPListByOwnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPListByOwnerOperationCompleted);
            }
            this.InvokeAsync("TPListByOwner", new object[] {
                        SessionID,
                        OwnerUserID,
                        OrderBy,
                        ShowInactive,
                        PageSize,
                        PageNumber}, this.TPListByOwnerOperationCompleted, userState);
        }
        
        private void OnTPListByOwnerOperationCompleted(object arg) {
            if ((this.TPListByOwnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPListByOwnerCompleted(this, new TPListByOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPFindEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ECGridIDInfo[] TPFindEx(string SessionID, int NetworkID, int MailboxID, string Description, bool ShowInactive) {
            object[] results = this.Invoke("TPFindEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        Description,
                        ShowInactive});
            return ((ECGridIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void TPFindExAsync(string SessionID, int NetworkID, int MailboxID, string Description, bool ShowInactive) {
            this.TPFindExAsync(SessionID, NetworkID, MailboxID, Description, ShowInactive, null);
        }
        
        /// <remarks/>
        public void TPFindExAsync(string SessionID, int NetworkID, int MailboxID, string Description, bool ShowInactive, object userState) {
            if ((this.TPFindExOperationCompleted == null)) {
                this.TPFindExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPFindExOperationCompleted);
            }
            this.InvokeAsync("TPFindEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        Description,
                        ShowInactive}, this.TPFindExOperationCompleted, userState);
        }
        
        private void OnTPFindExOperationCompleted(object arg) {
            if ((this.TPFindExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPFindExCompleted(this, new TPFindExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPGetMailboxDefault", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ECGridIDInfo TPGetMailboxDefault(string SessionID, int NetworkID, int MailboxID) {
            object[] results = this.Invoke("TPGetMailboxDefault", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID});
            return ((ECGridIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void TPGetMailboxDefaultAsync(string SessionID, int NetworkID, int MailboxID) {
            this.TPGetMailboxDefaultAsync(SessionID, NetworkID, MailboxID, null);
        }
        
        /// <remarks/>
        public void TPGetMailboxDefaultAsync(string SessionID, int NetworkID, int MailboxID, object userState) {
            if ((this.TPGetMailboxDefaultOperationCompleted == null)) {
                this.TPGetMailboxDefaultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPGetMailboxDefaultOperationCompleted);
            }
            this.InvokeAsync("TPGetMailboxDefault", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID}, this.TPGetMailboxDefaultOperationCompleted, userState);
        }
        
        private void OnTPGetMailboxDefaultOperationCompleted(object arg) {
            if ((this.TPGetMailboxDefaultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPGetMailboxDefaultCompleted(this, new TPGetMailboxDefaultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPSetMailboxDefault", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TPSetMailboxDefault(string SessionID, int ECGridID) {
            object[] results = this.Invoke("TPSetMailboxDefault", new object[] {
                        SessionID,
                        ECGridID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TPSetMailboxDefaultAsync(string SessionID, int ECGridID) {
            this.TPSetMailboxDefaultAsync(SessionID, ECGridID, null);
        }
        
        /// <remarks/>
        public void TPSetMailboxDefaultAsync(string SessionID, int ECGridID, object userState) {
            if ((this.TPSetMailboxDefaultOperationCompleted == null)) {
                this.TPSetMailboxDefaultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPSetMailboxDefaultOperationCompleted);
            }
            this.InvokeAsync("TPSetMailboxDefault", new object[] {
                        SessionID,
                        ECGridID}, this.TPSetMailboxDefaultOperationCompleted, userState);
        }
        
        private void OnTPSetMailboxDefaultOperationCompleted(object arg) {
            if ((this.TPSetMailboxDefaultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPSetMailboxDefaultCompleted(this, new TPSetMailboxDefaultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/TPSetOwner", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TPSetOwner(string SessionID, int ECGridID, int OwnerUserID) {
            object[] results = this.Invoke("TPSetOwner", new object[] {
                        SessionID,
                        ECGridID,
                        OwnerUserID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TPSetOwnerAsync(string SessionID, int ECGridID, int OwnerUserID) {
            this.TPSetOwnerAsync(SessionID, ECGridID, OwnerUserID, null);
        }
        
        /// <remarks/>
        public void TPSetOwnerAsync(string SessionID, int ECGridID, int OwnerUserID, object userState) {
            if ((this.TPSetOwnerOperationCompleted == null)) {
                this.TPSetOwnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTPSetOwnerOperationCompleted);
            }
            this.InvokeAsync("TPSetOwner", new object[] {
                        SessionID,
                        ECGridID,
                        OwnerUserID}, this.TPSetOwnerOperationCompleted, userState);
        }
        
        private void OnTPSetOwnerOperationCompleted(object arg) {
            if ((this.TPSetOwnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TPSetOwnerCompleted(this, new TPSetOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterconnectAdd", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterconnectIDInfo InterconnectAdd(string SessionID, int ECGridID1, int ECGridID2, string Reference, string ContactName, string ContactEMail, bool NotifyContact, bool Preconfirm, string Note) {
            object[] results = this.Invoke("InterconnectAdd", new object[] {
                        SessionID,
                        ECGridID1,
                        ECGridID2,
                        Reference,
                        ContactName,
                        ContactEMail,
                        NotifyContact,
                        Preconfirm,
                        Note});
            return ((InterconnectIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void InterconnectAddAsync(string SessionID, int ECGridID1, int ECGridID2, string Reference, string ContactName, string ContactEMail, bool NotifyContact, bool Preconfirm, string Note) {
            this.InterconnectAddAsync(SessionID, ECGridID1, ECGridID2, Reference, ContactName, ContactEMail, NotifyContact, Preconfirm, Note, null);
        }
        
        /// <remarks/>
        public void InterconnectAddAsync(string SessionID, int ECGridID1, int ECGridID2, string Reference, string ContactName, string ContactEMail, bool NotifyContact, bool Preconfirm, string Note, object userState) {
            if ((this.InterconnectAddOperationCompleted == null)) {
                this.InterconnectAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterconnectAddOperationCompleted);
            }
            this.InvokeAsync("InterconnectAdd", new object[] {
                        SessionID,
                        ECGridID1,
                        ECGridID2,
                        Reference,
                        ContactName,
                        ContactEMail,
                        NotifyContact,
                        Preconfirm,
                        Note}, this.InterconnectAddOperationCompleted, userState);
        }
        
        private void OnInterconnectAddOperationCompleted(object arg) {
            if ((this.InterconnectAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterconnectAddCompleted(this, new InterconnectAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterconnectNote", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InterconnectNote(string SessionID, int InterconnectID, AuthLevel AuthLevel, string Note, string AttachmentName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] AttachmentContent, eMailTo EMailTo, string OtherEMailAddress) {
            object[] results = this.Invoke("InterconnectNote", new object[] {
                        SessionID,
                        InterconnectID,
                        AuthLevel,
                        Note,
                        AttachmentName,
                        AttachmentContent,
                        EMailTo,
                        OtherEMailAddress});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InterconnectNoteAsync(string SessionID, int InterconnectID, AuthLevel AuthLevel, string Note, string AttachmentName, byte[] AttachmentContent, eMailTo EMailTo, string OtherEMailAddress) {
            this.InterconnectNoteAsync(SessionID, InterconnectID, AuthLevel, Note, AttachmentName, AttachmentContent, EMailTo, OtherEMailAddress, null);
        }
        
        /// <remarks/>
        public void InterconnectNoteAsync(string SessionID, int InterconnectID, AuthLevel AuthLevel, string Note, string AttachmentName, byte[] AttachmentContent, eMailTo EMailTo, string OtherEMailAddress, object userState) {
            if ((this.InterconnectNoteOperationCompleted == null)) {
                this.InterconnectNoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterconnectNoteOperationCompleted);
            }
            this.InvokeAsync("InterconnectNote", new object[] {
                        SessionID,
                        InterconnectID,
                        AuthLevel,
                        Note,
                        AttachmentName,
                        AttachmentContent,
                        EMailTo,
                        OtherEMailAddress}, this.InterconnectNoteOperationCompleted, userState);
        }
        
        private void OnInterconnectNoteOperationCompleted(object arg) {
            if ((this.InterconnectNoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterconnectNoteCompleted(this, new InterconnectNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterconnectCancel", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InterconnectCancel(string SessionID, int InterconnectID, string Note, eMailTo EMailTo, string OtherEMailAddress) {
            object[] results = this.Invoke("InterconnectCancel", new object[] {
                        SessionID,
                        InterconnectID,
                        Note,
                        EMailTo,
                        OtherEMailAddress});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InterconnectCancelAsync(string SessionID, int InterconnectID, string Note, eMailTo EMailTo, string OtherEMailAddress) {
            this.InterconnectCancelAsync(SessionID, InterconnectID, Note, EMailTo, OtherEMailAddress, null);
        }
        
        /// <remarks/>
        public void InterconnectCancelAsync(string SessionID, int InterconnectID, string Note, eMailTo EMailTo, string OtherEMailAddress, object userState) {
            if ((this.InterconnectCancelOperationCompleted == null)) {
                this.InterconnectCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterconnectCancelOperationCompleted);
            }
            this.InvokeAsync("InterconnectCancel", new object[] {
                        SessionID,
                        InterconnectID,
                        Note,
                        EMailTo,
                        OtherEMailAddress}, this.InterconnectCancelOperationCompleted, userState);
        }
        
        private void OnInterconnectCancelOperationCompleted(object arg) {
            if ((this.InterconnectCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterconnectCancelCompleted(this, new InterconnectCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterconnectInfo", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterconnectIDInfo InterconnectInfo(string SessionID, int InterconnectID) {
            object[] results = this.Invoke("InterconnectInfo", new object[] {
                        SessionID,
                        InterconnectID});
            return ((InterconnectIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void InterconnectInfoAsync(string SessionID, int InterconnectID) {
            this.InterconnectInfoAsync(SessionID, InterconnectID, null);
        }
        
        /// <remarks/>
        public void InterconnectInfoAsync(string SessionID, int InterconnectID, object userState) {
            if ((this.InterconnectInfoOperationCompleted == null)) {
                this.InterconnectInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterconnectInfoOperationCompleted);
            }
            this.InvokeAsync("InterconnectInfo", new object[] {
                        SessionID,
                        InterconnectID}, this.InterconnectInfoOperationCompleted, userState);
        }
        
        private void OnInterconnectInfoOperationCompleted(object arg) {
            if ((this.InterconnectInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterconnectInfoCompleted(this, new InterconnectInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterconnectInfoGUID", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterconnectIDInfo InterconnectInfoGUID(string SessionID, string UniqueID) {
            object[] results = this.Invoke("InterconnectInfoGUID", new object[] {
                        SessionID,
                        UniqueID});
            return ((InterconnectIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void InterconnectInfoGUIDAsync(string SessionID, string UniqueID) {
            this.InterconnectInfoGUIDAsync(SessionID, UniqueID, null);
        }
        
        /// <remarks/>
        public void InterconnectInfoGUIDAsync(string SessionID, string UniqueID, object userState) {
            if ((this.InterconnectInfoGUIDOperationCompleted == null)) {
                this.InterconnectInfoGUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterconnectInfoGUIDOperationCompleted);
            }
            this.InvokeAsync("InterconnectInfoGUID", new object[] {
                        SessionID,
                        UniqueID}, this.InterconnectInfoGUIDOperationCompleted, userState);
        }
        
        private void OnInterconnectInfoGUIDOperationCompleted(object arg) {
            if ((this.InterconnectInfoGUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterconnectInfoGUIDCompleted(this, new InterconnectInfoGUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterconnectNoteList", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterconnectNote[] InterconnectNoteList(string SessionID, int InterconnectID) {
            object[] results = this.Invoke("InterconnectNoteList", new object[] {
                        SessionID,
                        InterconnectID});
            return ((InterconnectNote[])(results[0]));
        }
        
        /// <remarks/>
        public void InterconnectNoteListAsync(string SessionID, int InterconnectID) {
            this.InterconnectNoteListAsync(SessionID, InterconnectID, null);
        }
        
        /// <remarks/>
        public void InterconnectNoteListAsync(string SessionID, int InterconnectID, object userState) {
            if ((this.InterconnectNoteListOperationCompleted == null)) {
                this.InterconnectNoteListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterconnectNoteListOperationCompleted);
            }
            this.InvokeAsync("InterconnectNoteList", new object[] {
                        SessionID,
                        InterconnectID}, this.InterconnectNoteListOperationCompleted, userState);
        }
        
        private void OnInterconnectNoteListOperationCompleted(object arg) {
            if ((this.InterconnectNoteListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterconnectNoteListCompleted(this, new InterconnectNoteListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterconnectListByECGridID", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterconnectIDInfo[] InterconnectListByECGridID(string SessionID, int ECGridID1, int ECGridID2) {
            object[] results = this.Invoke("InterconnectListByECGridID", new object[] {
                        SessionID,
                        ECGridID1,
                        ECGridID2});
            return ((InterconnectIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterconnectListByECGridIDAsync(string SessionID, int ECGridID1, int ECGridID2) {
            this.InterconnectListByECGridIDAsync(SessionID, ECGridID1, ECGridID2, null);
        }
        
        /// <remarks/>
        public void InterconnectListByECGridIDAsync(string SessionID, int ECGridID1, int ECGridID2, object userState) {
            if ((this.InterconnectListByECGridIDOperationCompleted == null)) {
                this.InterconnectListByECGridIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterconnectListByECGridIDOperationCompleted);
            }
            this.InvokeAsync("InterconnectListByECGridID", new object[] {
                        SessionID,
                        ECGridID1,
                        ECGridID2}, this.InterconnectListByECGridIDOperationCompleted, userState);
        }
        
        private void OnInterconnectListByECGridIDOperationCompleted(object arg) {
            if ((this.InterconnectListByECGridIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterconnectListByECGridIDCompleted(this, new InterconnectListByECGridIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterconnectListByStatus", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterconnectIDInfo[] InterconnectListByStatus(string SessionID, StatusInterconnect Status, int ECGridID, short MaxDays) {
            object[] results = this.Invoke("InterconnectListByStatus", new object[] {
                        SessionID,
                        Status,
                        ECGridID,
                        MaxDays});
            return ((InterconnectIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterconnectListByStatusAsync(string SessionID, StatusInterconnect Status, int ECGridID, short MaxDays) {
            this.InterconnectListByStatusAsync(SessionID, Status, ECGridID, MaxDays, null);
        }
        
        /// <remarks/>
        public void InterconnectListByStatusAsync(string SessionID, StatusInterconnect Status, int ECGridID, short MaxDays, object userState) {
            if ((this.InterconnectListByStatusOperationCompleted == null)) {
                this.InterconnectListByStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterconnectListByStatusOperationCompleted);
            }
            this.InvokeAsync("InterconnectListByStatus", new object[] {
                        SessionID,
                        Status,
                        ECGridID,
                        MaxDays}, this.InterconnectListByStatusOperationCompleted, userState);
        }
        
        private void OnInterconnectListByStatusOperationCompleted(object arg) {
            if ((this.InterconnectListByStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterconnectListByStatusCompleted(this, new InterconnectListByStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterconnectListByStatusEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public InterconnectIDInfo[] InterconnectListByStatusEx(string SessionID, int NetworkID, int MailboxID, StatusInterconnect IntStatus, int ECGridID, short MaxDays) {
            object[] results = this.Invoke("InterconnectListByStatusEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        IntStatus,
                        ECGridID,
                        MaxDays});
            return ((InterconnectIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void InterconnectListByStatusExAsync(string SessionID, int NetworkID, int MailboxID, StatusInterconnect IntStatus, int ECGridID, short MaxDays) {
            this.InterconnectListByStatusExAsync(SessionID, NetworkID, MailboxID, IntStatus, ECGridID, MaxDays, null);
        }
        
        /// <remarks/>
        public void InterconnectListByStatusExAsync(string SessionID, int NetworkID, int MailboxID, StatusInterconnect IntStatus, int ECGridID, short MaxDays, object userState) {
            if ((this.InterconnectListByStatusExOperationCompleted == null)) {
                this.InterconnectListByStatusExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterconnectListByStatusExOperationCompleted);
            }
            this.InvokeAsync("InterconnectListByStatusEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        IntStatus,
                        ECGridID,
                        MaxDays}, this.InterconnectListByStatusExOperationCompleted, userState);
        }
        
        private void OnInterconnectListByStatusExOperationCompleted(object arg) {
            if ((this.InterconnectListByStatusExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterconnectListByStatusExCompleted(this, new InterconnectListByStatusExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterconnectCount", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet InterconnectCount(string SessionID, short MaxDays) {
            object[] results = this.Invoke("InterconnectCount", new object[] {
                        SessionID,
                        MaxDays});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void InterconnectCountAsync(string SessionID, short MaxDays) {
            this.InterconnectCountAsync(SessionID, MaxDays, null);
        }
        
        /// <remarks/>
        public void InterconnectCountAsync(string SessionID, short MaxDays, object userState) {
            if ((this.InterconnectCountOperationCompleted == null)) {
                this.InterconnectCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterconnectCountOperationCompleted);
            }
            this.InvokeAsync("InterconnectCount", new object[] {
                        SessionID,
                        MaxDays}, this.InterconnectCountOperationCompleted, userState);
        }
        
        private void OnInterconnectCountOperationCompleted(object arg) {
            if ((this.InterconnectCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterconnectCountCompleted(this, new InterconnectCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/InterconnectCountEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet InterconnectCountEx(string SessionID, int NetworkID, int MailboxID, int ECGridID, short MaxDays) {
            object[] results = this.Invoke("InterconnectCountEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridID,
                        MaxDays});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void InterconnectCountExAsync(string SessionID, int NetworkID, int MailboxID, int ECGridID, short MaxDays) {
            this.InterconnectCountExAsync(SessionID, NetworkID, MailboxID, ECGridID, MaxDays, null);
        }
        
        /// <remarks/>
        public void InterconnectCountExAsync(string SessionID, int NetworkID, int MailboxID, int ECGridID, short MaxDays, object userState) {
            if ((this.InterconnectCountExOperationCompleted == null)) {
                this.InterconnectCountExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterconnectCountExOperationCompleted);
            }
            this.InvokeAsync("InterconnectCountEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridID,
                        MaxDays}, this.InterconnectCountExOperationCompleted, userState);
        }
        
        private void OnInterconnectCountExOperationCompleted(object arg) {
            if ((this.InterconnectCountExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterconnectCountExCompleted(this, new InterconnectCountExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MigrationAdd", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int MigrationAdd(string SessionID, string Name, System.DateTime Scheduled, int TargetNetworkId, int TargetMailboxId, MigrationStatus Status) {
            object[] results = this.Invoke("MigrationAdd", new object[] {
                        SessionID,
                        Name,
                        Scheduled,
                        TargetNetworkId,
                        TargetMailboxId,
                        Status});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void MigrationAddAsync(string SessionID, string Name, System.DateTime Scheduled, int TargetNetworkId, int TargetMailboxId, MigrationStatus Status) {
            this.MigrationAddAsync(SessionID, Name, Scheduled, TargetNetworkId, TargetMailboxId, Status, null);
        }
        
        /// <remarks/>
        public void MigrationAddAsync(string SessionID, string Name, System.DateTime Scheduled, int TargetNetworkId, int TargetMailboxId, MigrationStatus Status, object userState) {
            if ((this.MigrationAddOperationCompleted == null)) {
                this.MigrationAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMigrationAddOperationCompleted);
            }
            this.InvokeAsync("MigrationAdd", new object[] {
                        SessionID,
                        Name,
                        Scheduled,
                        TargetNetworkId,
                        TargetMailboxId,
                        Status}, this.MigrationAddOperationCompleted, userState);
        }
        
        private void OnMigrationAddOperationCompleted(object arg) {
            if ((this.MigrationAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MigrationAddCompleted(this, new MigrationAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MigrationAddEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int MigrationAddEx(string SessionID, int NetworkId, int MailboxId, string Name, System.DateTime Scheduled, int TargetNetworkId, int TargetMailboxId, MigrationStatus Status) {
            object[] results = this.Invoke("MigrationAddEx", new object[] {
                        SessionID,
                        NetworkId,
                        MailboxId,
                        Name,
                        Scheduled,
                        TargetNetworkId,
                        TargetMailboxId,
                        Status});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void MigrationAddExAsync(string SessionID, int NetworkId, int MailboxId, string Name, System.DateTime Scheduled, int TargetNetworkId, int TargetMailboxId, MigrationStatus Status) {
            this.MigrationAddExAsync(SessionID, NetworkId, MailboxId, Name, Scheduled, TargetNetworkId, TargetMailboxId, Status, null);
        }
        
        /// <remarks/>
        public void MigrationAddExAsync(string SessionID, int NetworkId, int MailboxId, string Name, System.DateTime Scheduled, int TargetNetworkId, int TargetMailboxId, MigrationStatus Status, object userState) {
            if ((this.MigrationAddExOperationCompleted == null)) {
                this.MigrationAddExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMigrationAddExOperationCompleted);
            }
            this.InvokeAsync("MigrationAddEx", new object[] {
                        SessionID,
                        NetworkId,
                        MailboxId,
                        Name,
                        Scheduled,
                        TargetNetworkId,
                        TargetMailboxId,
                        Status}, this.MigrationAddExOperationCompleted, userState);
        }
        
        private void OnMigrationAddExOperationCompleted(object arg) {
            if ((this.MigrationAddExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MigrationAddExCompleted(this, new MigrationAddExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MigrationList", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MigrationIDInfo[] MigrationList(string SessionID, MigrationStatus Status, bool ShowCanceled) {
            object[] results = this.Invoke("MigrationList", new object[] {
                        SessionID,
                        Status,
                        ShowCanceled});
            return ((MigrationIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void MigrationListAsync(string SessionID, MigrationStatus Status, bool ShowCanceled) {
            this.MigrationListAsync(SessionID, Status, ShowCanceled, null);
        }
        
        /// <remarks/>
        public void MigrationListAsync(string SessionID, MigrationStatus Status, bool ShowCanceled, object userState) {
            if ((this.MigrationListOperationCompleted == null)) {
                this.MigrationListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMigrationListOperationCompleted);
            }
            this.InvokeAsync("MigrationList", new object[] {
                        SessionID,
                        Status,
                        ShowCanceled}, this.MigrationListOperationCompleted, userState);
        }
        
        private void OnMigrationListOperationCompleted(object arg) {
            if ((this.MigrationListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MigrationListCompleted(this, new MigrationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MigrationListEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MigrationIDInfo[] MigrationListEx(string SessionID, int NetworkID, int MailboxID, MigrationStatus Status, bool ShowCanceled) {
            object[] results = this.Invoke("MigrationListEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        Status,
                        ShowCanceled});
            return ((MigrationIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void MigrationListExAsync(string SessionID, int NetworkID, int MailboxID, MigrationStatus Status, bool ShowCanceled) {
            this.MigrationListExAsync(SessionID, NetworkID, MailboxID, Status, ShowCanceled, null);
        }
        
        /// <remarks/>
        public void MigrationListExAsync(string SessionID, int NetworkID, int MailboxID, MigrationStatus Status, bool ShowCanceled, object userState) {
            if ((this.MigrationListExOperationCompleted == null)) {
                this.MigrationListExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMigrationListExOperationCompleted);
            }
            this.InvokeAsync("MigrationListEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        Status,
                        ShowCanceled}, this.MigrationListExOperationCompleted, userState);
        }
        
        private void OnMigrationListExOperationCompleted(object arg) {
            if ((this.MigrationListExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MigrationListExCompleted(this, new MigrationListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MigrationInfo", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MigrationIDInfo MigrationInfo(string SessionID, int MigrationID, int MigrationBatchID) {
            object[] results = this.Invoke("MigrationInfo", new object[] {
                        SessionID,
                        MigrationID,
                        MigrationBatchID});
            return ((MigrationIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void MigrationInfoAsync(string SessionID, int MigrationID, int MigrationBatchID) {
            this.MigrationInfoAsync(SessionID, MigrationID, MigrationBatchID, null);
        }
        
        /// <remarks/>
        public void MigrationInfoAsync(string SessionID, int MigrationID, int MigrationBatchID, object userState) {
            if ((this.MigrationInfoOperationCompleted == null)) {
                this.MigrationInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMigrationInfoOperationCompleted);
            }
            this.InvokeAsync("MigrationInfo", new object[] {
                        SessionID,
                        MigrationID,
                        MigrationBatchID}, this.MigrationInfoOperationCompleted, userState);
        }
        
        private void OnMigrationInfoOperationCompleted(object arg) {
            if ((this.MigrationInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MigrationInfoCompleted(this, new MigrationInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MigrationAddTP", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MigrationAddTP(string SessionID, int MigrationID, int MigrationBatchID, int ECGridID) {
            object[] results = this.Invoke("MigrationAddTP", new object[] {
                        SessionID,
                        MigrationID,
                        MigrationBatchID,
                        ECGridID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MigrationAddTPAsync(string SessionID, int MigrationID, int MigrationBatchID, int ECGridID) {
            this.MigrationAddTPAsync(SessionID, MigrationID, MigrationBatchID, ECGridID, null);
        }
        
        /// <remarks/>
        public void MigrationAddTPAsync(string SessionID, int MigrationID, int MigrationBatchID, int ECGridID, object userState) {
            if ((this.MigrationAddTPOperationCompleted == null)) {
                this.MigrationAddTPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMigrationAddTPOperationCompleted);
            }
            this.InvokeAsync("MigrationAddTP", new object[] {
                        SessionID,
                        MigrationID,
                        MigrationBatchID,
                        ECGridID}, this.MigrationAddTPOperationCompleted, userState);
        }
        
        private void OnMigrationAddTPOperationCompleted(object arg) {
            if ((this.MigrationAddTPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MigrationAddTPCompleted(this, new MigrationAddTPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CarbonCopyAdd", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CarbonCopyAdd(string SessionID, int ECGridIDFrom, int ECGridIDTo, int ECGridIDCCFrom, int ECGridIDCCTo, string GSFrom, string GSTo, string TransactionSet) {
            object[] results = this.Invoke("CarbonCopyAdd", new object[] {
                        SessionID,
                        ECGridIDFrom,
                        ECGridIDTo,
                        ECGridIDCCFrom,
                        ECGridIDCCTo,
                        GSFrom,
                        GSTo,
                        TransactionSet});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CarbonCopyAddAsync(string SessionID, int ECGridIDFrom, int ECGridIDTo, int ECGridIDCCFrom, int ECGridIDCCTo, string GSFrom, string GSTo, string TransactionSet) {
            this.CarbonCopyAddAsync(SessionID, ECGridIDFrom, ECGridIDTo, ECGridIDCCFrom, ECGridIDCCTo, GSFrom, GSTo, TransactionSet, null);
        }
        
        /// <remarks/>
        public void CarbonCopyAddAsync(string SessionID, int ECGridIDFrom, int ECGridIDTo, int ECGridIDCCFrom, int ECGridIDCCTo, string GSFrom, string GSTo, string TransactionSet, object userState) {
            if ((this.CarbonCopyAddOperationCompleted == null)) {
                this.CarbonCopyAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCarbonCopyAddOperationCompleted);
            }
            this.InvokeAsync("CarbonCopyAdd", new object[] {
                        SessionID,
                        ECGridIDFrom,
                        ECGridIDTo,
                        ECGridIDCCFrom,
                        ECGridIDCCTo,
                        GSFrom,
                        GSTo,
                        TransactionSet}, this.CarbonCopyAddOperationCompleted, userState);
        }
        
        private void OnCarbonCopyAddOperationCompleted(object arg) {
            if ((this.CarbonCopyAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CarbonCopyAddCompleted(this, new CarbonCopyAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CarbonCopyAddEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CarbonCopyAddEx(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo, int ECGridIDCCFrom, int ECGridIDCCTo, string GSFrom, string GSTo, string TransactionSet) {
            object[] results = this.Invoke("CarbonCopyAddEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridIDFrom,
                        ECGridIDTo,
                        ECGridIDCCFrom,
                        ECGridIDCCTo,
                        GSFrom,
                        GSTo,
                        TransactionSet});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CarbonCopyAddExAsync(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo, int ECGridIDCCFrom, int ECGridIDCCTo, string GSFrom, string GSTo, string TransactionSet) {
            this.CarbonCopyAddExAsync(SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo, ECGridIDCCFrom, ECGridIDCCTo, GSFrom, GSTo, TransactionSet, null);
        }
        
        /// <remarks/>
        public void CarbonCopyAddExAsync(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo, int ECGridIDCCFrom, int ECGridIDCCTo, string GSFrom, string GSTo, string TransactionSet, object userState) {
            if ((this.CarbonCopyAddExOperationCompleted == null)) {
                this.CarbonCopyAddExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCarbonCopyAddExOperationCompleted);
            }
            this.InvokeAsync("CarbonCopyAddEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridIDFrom,
                        ECGridIDTo,
                        ECGridIDCCFrom,
                        ECGridIDCCTo,
                        GSFrom,
                        GSTo,
                        TransactionSet}, this.CarbonCopyAddExOperationCompleted, userState);
        }
        
        private void OnCarbonCopyAddExOperationCompleted(object arg) {
            if ((this.CarbonCopyAddExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CarbonCopyAddExCompleted(this, new CarbonCopyAddExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CarbonCopyActivate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CarbonCopyActivate(string SessionID, int CarbonCopyID) {
            object[] results = this.Invoke("CarbonCopyActivate", new object[] {
                        SessionID,
                        CarbonCopyID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CarbonCopyActivateAsync(string SessionID, int CarbonCopyID) {
            this.CarbonCopyActivateAsync(SessionID, CarbonCopyID, null);
        }
        
        /// <remarks/>
        public void CarbonCopyActivateAsync(string SessionID, int CarbonCopyID, object userState) {
            if ((this.CarbonCopyActivateOperationCompleted == null)) {
                this.CarbonCopyActivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCarbonCopyActivateOperationCompleted);
            }
            this.InvokeAsync("CarbonCopyActivate", new object[] {
                        SessionID,
                        CarbonCopyID}, this.CarbonCopyActivateOperationCompleted, userState);
        }
        
        private void OnCarbonCopyActivateOperationCompleted(object arg) {
            if ((this.CarbonCopyActivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CarbonCopyActivateCompleted(this, new CarbonCopyActivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CarbonCopySuspend", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CarbonCopySuspend(string SessionID, int CarbonCopyID) {
            object[] results = this.Invoke("CarbonCopySuspend", new object[] {
                        SessionID,
                        CarbonCopyID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CarbonCopySuspendAsync(string SessionID, int CarbonCopyID) {
            this.CarbonCopySuspendAsync(SessionID, CarbonCopyID, null);
        }
        
        /// <remarks/>
        public void CarbonCopySuspendAsync(string SessionID, int CarbonCopyID, object userState) {
            if ((this.CarbonCopySuspendOperationCompleted == null)) {
                this.CarbonCopySuspendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCarbonCopySuspendOperationCompleted);
            }
            this.InvokeAsync("CarbonCopySuspend", new object[] {
                        SessionID,
                        CarbonCopyID}, this.CarbonCopySuspendOperationCompleted, userState);
        }
        
        private void OnCarbonCopySuspendOperationCompleted(object arg) {
            if ((this.CarbonCopySuspendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CarbonCopySuspendCompleted(this, new CarbonCopySuspendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CarbonCopyTerminate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CarbonCopyTerminate(string SessionID, int CarbonCopyID) {
            object[] results = this.Invoke("CarbonCopyTerminate", new object[] {
                        SessionID,
                        CarbonCopyID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CarbonCopyTerminateAsync(string SessionID, int CarbonCopyID) {
            this.CarbonCopyTerminateAsync(SessionID, CarbonCopyID, null);
        }
        
        /// <remarks/>
        public void CarbonCopyTerminateAsync(string SessionID, int CarbonCopyID, object userState) {
            if ((this.CarbonCopyTerminateOperationCompleted == null)) {
                this.CarbonCopyTerminateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCarbonCopyTerminateOperationCompleted);
            }
            this.InvokeAsync("CarbonCopyTerminate", new object[] {
                        SessionID,
                        CarbonCopyID}, this.CarbonCopyTerminateOperationCompleted, userState);
        }
        
        private void OnCarbonCopyTerminateOperationCompleted(object arg) {
            if ((this.CarbonCopyTerminateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CarbonCopyTerminateCompleted(this, new CarbonCopyTerminateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CarbonCopyInfo", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CarbonCopyIDInfo CarbonCopyInfo(string SessionID, int CarbonCopyID) {
            object[] results = this.Invoke("CarbonCopyInfo", new object[] {
                        SessionID,
                        CarbonCopyID});
            return ((CarbonCopyIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CarbonCopyInfoAsync(string SessionID, int CarbonCopyID) {
            this.CarbonCopyInfoAsync(SessionID, CarbonCopyID, null);
        }
        
        /// <remarks/>
        public void CarbonCopyInfoAsync(string SessionID, int CarbonCopyID, object userState) {
            if ((this.CarbonCopyInfoOperationCompleted == null)) {
                this.CarbonCopyInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCarbonCopyInfoOperationCompleted);
            }
            this.InvokeAsync("CarbonCopyInfo", new object[] {
                        SessionID,
                        CarbonCopyID}, this.CarbonCopyInfoOperationCompleted, userState);
        }
        
        private void OnCarbonCopyInfoOperationCompleted(object arg) {
            if ((this.CarbonCopyInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CarbonCopyInfoCompleted(this, new CarbonCopyInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CarbonCopyList", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CarbonCopyIDInfo[] CarbonCopyList(string SessionID, int ECGridIDFrom, int ECGridIDTo, bool ShowInactive) {
            object[] results = this.Invoke("CarbonCopyList", new object[] {
                        SessionID,
                        ECGridIDFrom,
                        ECGridIDTo,
                        ShowInactive});
            return ((CarbonCopyIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void CarbonCopyListAsync(string SessionID, int ECGridIDFrom, int ECGridIDTo, bool ShowInactive) {
            this.CarbonCopyListAsync(SessionID, ECGridIDFrom, ECGridIDTo, ShowInactive, null);
        }
        
        /// <remarks/>
        public void CarbonCopyListAsync(string SessionID, int ECGridIDFrom, int ECGridIDTo, bool ShowInactive, object userState) {
            if ((this.CarbonCopyListOperationCompleted == null)) {
                this.CarbonCopyListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCarbonCopyListOperationCompleted);
            }
            this.InvokeAsync("CarbonCopyList", new object[] {
                        SessionID,
                        ECGridIDFrom,
                        ECGridIDTo,
                        ShowInactive}, this.CarbonCopyListOperationCompleted, userState);
        }
        
        private void OnCarbonCopyListOperationCompleted(object arg) {
            if ((this.CarbonCopyListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CarbonCopyListCompleted(this, new CarbonCopyListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/CarbonCopyListEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CarbonCopyIDInfo[] CarbonCopyListEx(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo, bool ShowInactive) {
            object[] results = this.Invoke("CarbonCopyListEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridIDFrom,
                        ECGridIDTo,
                        ShowInactive});
            return ((CarbonCopyIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void CarbonCopyListExAsync(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo, bool ShowInactive) {
            this.CarbonCopyListExAsync(SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo, ShowInactive, null);
        }
        
        /// <remarks/>
        public void CarbonCopyListExAsync(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo, bool ShowInactive, object userState) {
            if ((this.CarbonCopyListExOperationCompleted == null)) {
                this.CarbonCopyListExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCarbonCopyListExOperationCompleted);
            }
            this.InvokeAsync("CarbonCopyListEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridIDFrom,
                        ECGridIDTo,
                        ShowInactive}, this.CarbonCopyListExOperationCompleted, userState);
        }
        
        private void OnCarbonCopyListExOperationCompleted(object arg) {
            if ((this.CarbonCopyListExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CarbonCopyListExCompleted(this, new CarbonCopyListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelInBox", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfoCollection ParcelInBox(string SessionID) {
            object[] results = this.Invoke("ParcelInBox", new object[] {
                        SessionID});
            return ((ParcelIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelInBoxAsync(string SessionID) {
            this.ParcelInBoxAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void ParcelInBoxAsync(string SessionID, object userState) {
            if ((this.ParcelInBoxOperationCompleted == null)) {
                this.ParcelInBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelInBoxOperationCompleted);
            }
            this.InvokeAsync("ParcelInBox", new object[] {
                        SessionID}, this.ParcelInBoxOperationCompleted, userState);
        }
        
        private void OnParcelInBoxOperationCompleted(object arg) {
            if ((this.ParcelInBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelInBoxCompleted(this, new ParcelInBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelInBoxEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfoCollection ParcelInBoxEx(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo) {
            object[] results = this.Invoke("ParcelInBoxEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridIDFrom,
                        ECGridIDTo});
            return ((ParcelIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelInBoxExAsync(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo) {
            this.ParcelInBoxExAsync(SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo, null);
        }
        
        /// <remarks/>
        public void ParcelInBoxExAsync(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo, object userState) {
            if ((this.ParcelInBoxExOperationCompleted == null)) {
                this.ParcelInBoxExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelInBoxExOperationCompleted);
            }
            this.InvokeAsync("ParcelInBoxEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridIDFrom,
                        ECGridIDTo}, this.ParcelInBoxExOperationCompleted, userState);
        }
        
        private void OnParcelInBoxExOperationCompleted(object arg) {
            if ((this.ParcelInBoxExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelInBoxExCompleted(this, new ParcelInBoxExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelInBoxExShort", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfoCollection ParcelInBoxExShort(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo, ParcelStatus Status) {
            object[] results = this.Invoke("ParcelInBoxExShort", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridIDFrom,
                        ECGridIDTo,
                        Status});
            return ((ParcelIDInfoCollection)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelInBoxExShortAsync(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo, ParcelStatus Status) {
            this.ParcelInBoxExShortAsync(SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo, Status, null);
        }
        
        /// <remarks/>
        public void ParcelInBoxExShortAsync(string SessionID, int NetworkID, int MailboxID, int ECGridIDFrom, int ECGridIDTo, ParcelStatus Status, object userState) {
            if ((this.ParcelInBoxExShortOperationCompleted == null)) {
                this.ParcelInBoxExShortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelInBoxExShortOperationCompleted);
            }
            this.InvokeAsync("ParcelInBoxExShort", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        ECGridIDFrom,
                        ECGridIDTo,
                        Status}, this.ParcelInBoxExShortOperationCompleted, userState);
        }
        
        private void OnParcelInBoxExShortOperationCompleted(object arg) {
            if ((this.ParcelInBoxExShortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelInBoxExShortCompleted(this, new ParcelInBoxExShortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelInfo", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParcelIDInfo ParcelInfo(string SessionID, long ParcelID) {
            object[] results = this.Invoke("ParcelInfo", new object[] {
                        SessionID,
                        ParcelID});
            return ((ParcelIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelInfoAsync(string SessionID, long ParcelID) {
            this.ParcelInfoAsync(SessionID, ParcelID, null);
        }
        
        /// <remarks/>
        public void ParcelInfoAsync(string SessionID, long ParcelID, object userState) {
            if ((this.ParcelInfoOperationCompleted == null)) {
                this.ParcelInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelInfoOperationCompleted);
            }
            this.InvokeAsync("ParcelInfo", new object[] {
                        SessionID,
                        ParcelID}, this.ParcelInfoOperationCompleted, userState);
        }
        
        private void OnParcelInfoOperationCompleted(object arg) {
            if ((this.ParcelInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelInfoCompleted(this, new ParcelInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelDownload", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FileInfo ParcelDownload(string SessionID, long ParcelID) {
            object[] results = this.Invoke("ParcelDownload", new object[] {
                        SessionID,
                        ParcelID});
            return ((FileInfo)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelDownloadAsync(string SessionID, long ParcelID) {
            this.ParcelDownloadAsync(SessionID, ParcelID, null);
        }
        
        /// <remarks/>
        public void ParcelDownloadAsync(string SessionID, long ParcelID, object userState) {
            if ((this.ParcelDownloadOperationCompleted == null)) {
                this.ParcelDownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelDownloadOperationCompleted);
            }
            this.InvokeAsync("ParcelDownload", new object[] {
                        SessionID,
                        ParcelID}, this.ParcelDownloadOperationCompleted, userState);
        }
        
        private void OnParcelDownloadOperationCompleted(object arg) {
            if ((this.ParcelDownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelDownloadCompleted(this, new ParcelDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelDownloadA", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FileInfo ParcelDownloadA(string SessionID, long ParcelID) {
            object[] results = this.Invoke("ParcelDownloadA", new object[] {
                        SessionID,
                        ParcelID});
            return ((FileInfo)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelDownloadAAsync(string SessionID, long ParcelID) {
            this.ParcelDownloadAAsync(SessionID, ParcelID, null);
        }
        
        /// <remarks/>
        public void ParcelDownloadAAsync(string SessionID, long ParcelID, object userState) {
            if ((this.ParcelDownloadAOperationCompleted == null)) {
                this.ParcelDownloadAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelDownloadAOperationCompleted);
            }
            this.InvokeAsync("ParcelDownloadA", new object[] {
                        SessionID,
                        ParcelID}, this.ParcelDownloadAOperationCompleted, userState);
        }
        
        private void OnParcelDownloadAOperationCompleted(object arg) {
            if ((this.ParcelDownloadACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelDownloadACompleted(this, new ParcelDownloadACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelDownloadS3", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ParcelDownloadS3(string SessionID, long ParcelID, string AccessKey, string SecretKey, string Bucket, string Prefix, string Region) {
            object[] results = this.Invoke("ParcelDownloadS3", new object[] {
                        SessionID,
                        ParcelID,
                        AccessKey,
                        SecretKey,
                        Bucket,
                        Prefix,
                        Region});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelDownloadS3Async(string SessionID, long ParcelID, string AccessKey, string SecretKey, string Bucket, string Prefix, string Region) {
            this.ParcelDownloadS3Async(SessionID, ParcelID, AccessKey, SecretKey, Bucket, Prefix, Region, null);
        }
        
        /// <remarks/>
        public void ParcelDownloadS3Async(string SessionID, long ParcelID, string AccessKey, string SecretKey, string Bucket, string Prefix, string Region, object userState) {
            if ((this.ParcelDownloadS3OperationCompleted == null)) {
                this.ParcelDownloadS3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelDownloadS3OperationCompleted);
            }
            this.InvokeAsync("ParcelDownloadS3", new object[] {
                        SessionID,
                        ParcelID,
                        AccessKey,
                        SecretKey,
                        Bucket,
                        Prefix,
                        Region}, this.ParcelDownloadS3OperationCompleted, userState);
        }
        
        private void OnParcelDownloadS3OperationCompleted(object arg) {
            if ((this.ParcelDownloadS3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelDownloadS3Completed(this, new ParcelDownloadS3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelDownloadNoUpdate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FileInfo ParcelDownloadNoUpdate(string SessionID, long ParcelID) {
            object[] results = this.Invoke("ParcelDownloadNoUpdate", new object[] {
                        SessionID,
                        ParcelID});
            return ((FileInfo)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelDownloadNoUpdateAsync(string SessionID, long ParcelID) {
            this.ParcelDownloadNoUpdateAsync(SessionID, ParcelID, null);
        }
        
        /// <remarks/>
        public void ParcelDownloadNoUpdateAsync(string SessionID, long ParcelID, object userState) {
            if ((this.ParcelDownloadNoUpdateOperationCompleted == null)) {
                this.ParcelDownloadNoUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelDownloadNoUpdateOperationCompleted);
            }
            this.InvokeAsync("ParcelDownloadNoUpdate", new object[] {
                        SessionID,
                        ParcelID}, this.ParcelDownloadNoUpdateOperationCompleted, userState);
        }
        
        private void OnParcelDownloadNoUpdateOperationCompleted(object arg) {
            if ((this.ParcelDownloadNoUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelDownloadNoUpdateCompleted(this, new ParcelDownloadNoUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelDownloadNoUpdateA", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FileInfo ParcelDownloadNoUpdateA(string SessionID, long ParcelID) {
            object[] results = this.Invoke("ParcelDownloadNoUpdateA", new object[] {
                        SessionID,
                        ParcelID});
            return ((FileInfo)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelDownloadNoUpdateAAsync(string SessionID, long ParcelID) {
            this.ParcelDownloadNoUpdateAAsync(SessionID, ParcelID, null);
        }
        
        /// <remarks/>
        public void ParcelDownloadNoUpdateAAsync(string SessionID, long ParcelID, object userState) {
            if ((this.ParcelDownloadNoUpdateAOperationCompleted == null)) {
                this.ParcelDownloadNoUpdateAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelDownloadNoUpdateAOperationCompleted);
            }
            this.InvokeAsync("ParcelDownloadNoUpdateA", new object[] {
                        SessionID,
                        ParcelID}, this.ParcelDownloadNoUpdateAOperationCompleted, userState);
        }
        
        private void OnParcelDownloadNoUpdateAOperationCompleted(object arg) {
            if ((this.ParcelDownloadNoUpdateACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelDownloadNoUpdateACompleted(this, new ParcelDownloadNoUpdateACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelDownloadConfirm", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ParcelDownloadConfirm(string SessionID, long ParcelID) {
            object[] results = this.Invoke("ParcelDownloadConfirm", new object[] {
                        SessionID,
                        ParcelID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelDownloadConfirmAsync(string SessionID, long ParcelID) {
            this.ParcelDownloadConfirmAsync(SessionID, ParcelID, null);
        }
        
        /// <remarks/>
        public void ParcelDownloadConfirmAsync(string SessionID, long ParcelID, object userState) {
            if ((this.ParcelDownloadConfirmOperationCompleted == null)) {
                this.ParcelDownloadConfirmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelDownloadConfirmOperationCompleted);
            }
            this.InvokeAsync("ParcelDownloadConfirm", new object[] {
                        SessionID,
                        ParcelID}, this.ParcelDownloadConfirmOperationCompleted, userState);
        }
        
        private void OnParcelDownloadConfirmOperationCompleted(object arg) {
            if ((this.ParcelDownloadConfirmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelDownloadConfirmCompleted(this, new ParcelDownloadConfirmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelAcknowledgmentNote", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ParcelAcknowledgmentNote(string SessionID, long ParcelID, string Subject, string Note) {
            object[] results = this.Invoke("ParcelAcknowledgmentNote", new object[] {
                        SessionID,
                        ParcelID,
                        Subject,
                        Note});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelAcknowledgmentNoteAsync(string SessionID, long ParcelID, string Subject, string Note) {
            this.ParcelAcknowledgmentNoteAsync(SessionID, ParcelID, Subject, Note, null);
        }
        
        /// <remarks/>
        public void ParcelAcknowledgmentNoteAsync(string SessionID, long ParcelID, string Subject, string Note, object userState) {
            if ((this.ParcelAcknowledgmentNoteOperationCompleted == null)) {
                this.ParcelAcknowledgmentNoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelAcknowledgmentNoteOperationCompleted);
            }
            this.InvokeAsync("ParcelAcknowledgmentNote", new object[] {
                        SessionID,
                        ParcelID,
                        Subject,
                        Note}, this.ParcelAcknowledgmentNoteOperationCompleted, userState);
        }
        
        private void OnParcelAcknowledgmentNoteOperationCompleted(object arg) {
            if ((this.ParcelAcknowledgmentNoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelAcknowledgmentNoteCompleted(this, new ParcelAcknowledgmentNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelDownloadCancel", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ParcelDownloadCancel(string SessionID, long ParcelID) {
            object[] results = this.Invoke("ParcelDownloadCancel", new object[] {
                        SessionID,
                        ParcelID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelDownloadCancelAsync(string SessionID, long ParcelID) {
            this.ParcelDownloadCancelAsync(SessionID, ParcelID, null);
        }
        
        /// <remarks/>
        public void ParcelDownloadCancelAsync(string SessionID, long ParcelID, object userState) {
            if ((this.ParcelDownloadCancelOperationCompleted == null)) {
                this.ParcelDownloadCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelDownloadCancelOperationCompleted);
            }
            this.InvokeAsync("ParcelDownloadCancel", new object[] {
                        SessionID,
                        ParcelID}, this.ParcelDownloadCancelOperationCompleted, userState);
        }
        
        private void OnParcelDownloadCancelOperationCompleted(object arg) {
            if ((this.ParcelDownloadCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelDownloadCancelCompleted(this, new ParcelDownloadCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelDownloadConfirmPendingAck", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ParcelDownloadConfirmPendingAck(string SessionID, long ParcelID, ParcelStatus Status) {
            object[] results = this.Invoke("ParcelDownloadConfirmPendingAck", new object[] {
                        SessionID,
                        ParcelID,
                        Status});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelDownloadConfirmPendingAckAsync(string SessionID, long ParcelID, ParcelStatus Status) {
            this.ParcelDownloadConfirmPendingAckAsync(SessionID, ParcelID, Status, null);
        }
        
        /// <remarks/>
        public void ParcelDownloadConfirmPendingAckAsync(string SessionID, long ParcelID, ParcelStatus Status, object userState) {
            if ((this.ParcelDownloadConfirmPendingAckOperationCompleted == null)) {
                this.ParcelDownloadConfirmPendingAckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelDownloadConfirmPendingAckOperationCompleted);
            }
            this.InvokeAsync("ParcelDownloadConfirmPendingAck", new object[] {
                        SessionID,
                        ParcelID,
                        Status}, this.ParcelDownloadConfirmPendingAckOperationCompleted, userState);
        }
        
        private void OnParcelDownloadConfirmPendingAckOperationCompleted(object arg) {
            if ((this.ParcelDownloadConfirmPendingAckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelDownloadConfirmPendingAckCompleted(this, new ParcelDownloadConfirmPendingAckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelDownloadReset", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ParcelDownloadReset(string SessionID, long ParcelID) {
            object[] results = this.Invoke("ParcelDownloadReset", new object[] {
                        SessionID,
                        ParcelID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelDownloadResetAsync(string SessionID, long ParcelID) {
            this.ParcelDownloadResetAsync(SessionID, ParcelID, null);
        }
        
        /// <remarks/>
        public void ParcelDownloadResetAsync(string SessionID, long ParcelID, object userState) {
            if ((this.ParcelDownloadResetOperationCompleted == null)) {
                this.ParcelDownloadResetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelDownloadResetOperationCompleted);
            }
            this.InvokeAsync("ParcelDownloadReset", new object[] {
                        SessionID,
                        ParcelID}, this.ParcelDownloadResetOperationCompleted, userState);
        }
        
        private void OnParcelDownloadResetOperationCompleted(object arg) {
            if ((this.ParcelDownloadResetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelDownloadResetCompleted(this, new ParcelDownloadResetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelResend", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ParcelResend(string SessionID, long ParcelID) {
            object[] results = this.Invoke("ParcelResend", new object[] {
                        SessionID,
                        ParcelID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelResendAsync(string SessionID, long ParcelID) {
            this.ParcelResendAsync(SessionID, ParcelID, null);
        }
        
        /// <remarks/>
        public void ParcelResendAsync(string SessionID, long ParcelID, object userState) {
            if ((this.ParcelResendOperationCompleted == null)) {
                this.ParcelResendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelResendOperationCompleted);
            }
            this.InvokeAsync("ParcelResend", new object[] {
                        SessionID,
                        ParcelID}, this.ParcelResendOperationCompleted, userState);
        }
        
        private void OnParcelResendOperationCompleted(object arg) {
            if ((this.ParcelResendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelResendCompleted(this, new ParcelResendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelUpload", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ParcelUpload(string SessionID, string FileName, int Bytes, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] Content) {
            object[] results = this.Invoke("ParcelUpload", new object[] {
                        SessionID,
                        FileName,
                        Bytes,
                        Content});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelUploadAsync(string SessionID, string FileName, int Bytes, byte[] Content) {
            this.ParcelUploadAsync(SessionID, FileName, Bytes, Content, null);
        }
        
        /// <remarks/>
        public void ParcelUploadAsync(string SessionID, string FileName, int Bytes, byte[] Content, object userState) {
            if ((this.ParcelUploadOperationCompleted == null)) {
                this.ParcelUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelUploadOperationCompleted);
            }
            this.InvokeAsync("ParcelUpload", new object[] {
                        SessionID,
                        FileName,
                        Bytes,
                        Content}, this.ParcelUploadOperationCompleted, userState);
        }
        
        private void OnParcelUploadOperationCompleted(object arg) {
            if ((this.ParcelUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelUploadCompleted(this, new ParcelUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelUploadA", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ParcelUploadA(string SessionID, string FileName, string ContentBase64) {
            object[] results = this.Invoke("ParcelUploadA", new object[] {
                        SessionID,
                        FileName,
                        ContentBase64});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelUploadAAsync(string SessionID, string FileName, string ContentBase64) {
            this.ParcelUploadAAsync(SessionID, FileName, ContentBase64, null);
        }
        
        /// <remarks/>
        public void ParcelUploadAAsync(string SessionID, string FileName, string ContentBase64, object userState) {
            if ((this.ParcelUploadAOperationCompleted == null)) {
                this.ParcelUploadAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelUploadAOperationCompleted);
            }
            this.InvokeAsync("ParcelUploadA", new object[] {
                        SessionID,
                        FileName,
                        ContentBase64}, this.ParcelUploadAOperationCompleted, userState);
        }
        
        private void OnParcelUploadAOperationCompleted(object arg) {
            if ((this.ParcelUploadACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelUploadACompleted(this, new ParcelUploadACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ParcelUploadEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ParcelUploadEx(string SessionID, int NetworkID, int MailboxID, string FileName, int Bytes, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] Content) {
            object[] results = this.Invoke("ParcelUploadEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        FileName,
                        Bytes,
                        Content});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ParcelUploadExAsync(string SessionID, int NetworkID, int MailboxID, string FileName, int Bytes, byte[] Content) {
            this.ParcelUploadExAsync(SessionID, NetworkID, MailboxID, FileName, Bytes, Content, null);
        }
        
        /// <remarks/>
        public void ParcelUploadExAsync(string SessionID, int NetworkID, int MailboxID, string FileName, int Bytes, byte[] Content, object userState) {
            if ((this.ParcelUploadExOperationCompleted == null)) {
                this.ParcelUploadExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnParcelUploadExOperationCompleted);
            }
            this.InvokeAsync("ParcelUploadEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        FileName,
                        Bytes,
                        Content}, this.ParcelUploadExOperationCompleted, userState);
        }
        
        private void OnParcelUploadExOperationCompleted(object arg) {
            if ((this.ParcelUploadExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ParcelUploadExCompleted(this, new ParcelUploadExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/Login", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Login(string LoginName, string Password) {
            object[] results = this.Invoke("Login", new object[] {
                        LoginName,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string LoginName, string Password) {
            this.LoginAsync(LoginName, Password, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string LoginName, string Password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        LoginName,
                        Password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/GenerateAPIKey", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateAPIKey(string SessionID, int UserID) {
            object[] results = this.Invoke("GenerateAPIKey", new object[] {
                        SessionID,
                        UserID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateAPIKeyAsync(string SessionID, int UserID) {
            this.GenerateAPIKeyAsync(SessionID, UserID, null);
        }
        
        /// <remarks/>
        public void GenerateAPIKeyAsync(string SessionID, int UserID, object userState) {
            if ((this.GenerateAPIKeyOperationCompleted == null)) {
                this.GenerateAPIKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateAPIKeyOperationCompleted);
            }
            this.InvokeAsync("GenerateAPIKey", new object[] {
                        SessionID,
                        UserID}, this.GenerateAPIKeyOperationCompleted, userState);
        }
        
        private void OnGenerateAPIKeyOperationCompleted(object arg) {
            if ((this.GenerateAPIKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateAPIKeyCompleted(this, new GenerateAPIKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/GeneratePassword", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GeneratePassword(string SessionID, short Length) {
            object[] results = this.Invoke("GeneratePassword", new object[] {
                        SessionID,
                        Length});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GeneratePasswordAsync(string SessionID, short Length) {
            this.GeneratePasswordAsync(SessionID, Length, null);
        }
        
        /// <remarks/>
        public void GeneratePasswordAsync(string SessionID, short Length, object userState) {
            if ((this.GeneratePasswordOperationCompleted == null)) {
                this.GeneratePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneratePasswordOperationCompleted);
            }
            this.InvokeAsync("GeneratePassword", new object[] {
                        SessionID,
                        Length}, this.GeneratePasswordOperationCompleted, userState);
        }
        
        private void OnGeneratePasswordOperationCompleted(object arg) {
            if ((this.GeneratePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneratePasswordCompleted(this, new GeneratePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/Logout", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Logout(string SessionID) {
            object[] results = this.Invoke("Logout", new object[] {
                        SessionID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LogoutAsync(string SessionID) {
            this.LogoutAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void LogoutAsync(string SessionID, object userState) {
            if ((this.LogoutOperationCompleted == null)) {
                this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutOperationCompleted);
            }
            this.InvokeAsync("Logout", new object[] {
                        SessionID}, this.LogoutOperationCompleted, userState);
        }
        
        private void OnLogoutOperationCompleted(object arg) {
            if ((this.LogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutCompleted(this, new LogoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/ChangePassword", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ChangePassword(string SessionID, string OldPassword, string NewPassword) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        SessionID,
                        OldPassword,
                        NewPassword});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string SessionID, string OldPassword, string NewPassword) {
            this.ChangePasswordAsync(SessionID, OldPassword, NewPassword, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string SessionID, string OldPassword, string NewPassword, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        SessionID,
                        OldPassword,
                        NewPassword}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/WhoAmI", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SessionInfo WhoAmI(string SessionID) {
            object[] results = this.Invoke("WhoAmI", new object[] {
                        SessionID});
            return ((SessionInfo)(results[0]));
        }
        
        /// <remarks/>
        public void WhoAmIAsync(string SessionID) {
            this.WhoAmIAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void WhoAmIAsync(string SessionID, object userState) {
            if ((this.WhoAmIOperationCompleted == null)) {
                this.WhoAmIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWhoAmIOperationCompleted);
            }
            this.InvokeAsync("WhoAmI", new object[] {
                        SessionID}, this.WhoAmIOperationCompleted, userState);
        }
        
        private void OnWhoAmIOperationCompleted(object arg) {
            if ((this.WhoAmICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WhoAmICompleted(this, new WhoAmICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserAdd", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UserAdd(string SessionID, int MailboxID, string LoginName, string Password, string RecoveryQuestion, string RecoveryAnswer, string FirstName, string LastName, string Company, string EMail, string Phone, string CellPhone, CellCarrier CellCarrier, AuthLevel AuthLevel) {
            object[] results = this.Invoke("UserAdd", new object[] {
                        SessionID,
                        MailboxID,
                        LoginName,
                        Password,
                        RecoveryQuestion,
                        RecoveryAnswer,
                        FirstName,
                        LastName,
                        Company,
                        EMail,
                        Phone,
                        CellPhone,
                        CellCarrier,
                        AuthLevel});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UserAddAsync(string SessionID, int MailboxID, string LoginName, string Password, string RecoveryQuestion, string RecoveryAnswer, string FirstName, string LastName, string Company, string EMail, string Phone, string CellPhone, CellCarrier CellCarrier, AuthLevel AuthLevel) {
            this.UserAddAsync(SessionID, MailboxID, LoginName, Password, RecoveryQuestion, RecoveryAnswer, FirstName, LastName, Company, EMail, Phone, CellPhone, CellCarrier, AuthLevel, null);
        }
        
        /// <remarks/>
        public void UserAddAsync(string SessionID, int MailboxID, string LoginName, string Password, string RecoveryQuestion, string RecoveryAnswer, string FirstName, string LastName, string Company, string EMail, string Phone, string CellPhone, CellCarrier CellCarrier, AuthLevel AuthLevel, object userState) {
            if ((this.UserAddOperationCompleted == null)) {
                this.UserAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserAddOperationCompleted);
            }
            this.InvokeAsync("UserAdd", new object[] {
                        SessionID,
                        MailboxID,
                        LoginName,
                        Password,
                        RecoveryQuestion,
                        RecoveryAnswer,
                        FirstName,
                        LastName,
                        Company,
                        EMail,
                        Phone,
                        CellPhone,
                        CellCarrier,
                        AuthLevel}, this.UserAddOperationCompleted, userState);
        }
        
        private void OnUserAddOperationCompleted(object arg) {
            if ((this.UserAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserAddCompleted(this, new UserAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserAddEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UserAddEx(string SessionID, int NetworkID, int MailboxID, string LoginName, string Password, string RecoveryQuestion, string RecoveryAnswer, string FirstName, string LastName, string Company, string EMail, string Phone, string CellPhone, CellCarrier CellCarrier, AuthLevel AuthLevel) {
            object[] results = this.Invoke("UserAddEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        LoginName,
                        Password,
                        RecoveryQuestion,
                        RecoveryAnswer,
                        FirstName,
                        LastName,
                        Company,
                        EMail,
                        Phone,
                        CellPhone,
                        CellCarrier,
                        AuthLevel});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UserAddExAsync(string SessionID, int NetworkID, int MailboxID, string LoginName, string Password, string RecoveryQuestion, string RecoveryAnswer, string FirstName, string LastName, string Company, string EMail, string Phone, string CellPhone, CellCarrier CellCarrier, AuthLevel AuthLevel) {
            this.UserAddExAsync(SessionID, NetworkID, MailboxID, LoginName, Password, RecoveryQuestion, RecoveryAnswer, FirstName, LastName, Company, EMail, Phone, CellPhone, CellCarrier, AuthLevel, null);
        }
        
        /// <remarks/>
        public void UserAddExAsync(
                    string SessionID, 
                    int NetworkID, 
                    int MailboxID, 
                    string LoginName, 
                    string Password, 
                    string RecoveryQuestion, 
                    string RecoveryAnswer, 
                    string FirstName, 
                    string LastName, 
                    string Company, 
                    string EMail, 
                    string Phone, 
                    string CellPhone, 
                    CellCarrier CellCarrier, 
                    AuthLevel AuthLevel, 
                    object userState) {
            if ((this.UserAddExOperationCompleted == null)) {
                this.UserAddExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserAddExOperationCompleted);
            }
            this.InvokeAsync("UserAddEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        LoginName,
                        Password,
                        RecoveryQuestion,
                        RecoveryAnswer,
                        FirstName,
                        LastName,
                        Company,
                        EMail,
                        Phone,
                        CellPhone,
                        CellCarrier,
                        AuthLevel}, this.UserAddExOperationCompleted, userState);
        }
        
        private void OnUserAddExOperationCompleted(object arg) {
            if ((this.UserAddExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserAddExCompleted(this, new UserAddExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserInfo", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserIDInfo UserInfo(string SessionID, int UserID) {
            object[] results = this.Invoke("UserInfo", new object[] {
                        SessionID,
                        UserID});
            return ((UserIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void UserInfoAsync(string SessionID, int UserID) {
            this.UserInfoAsync(SessionID, UserID, null);
        }
        
        /// <remarks/>
        public void UserInfoAsync(string SessionID, int UserID, object userState) {
            if ((this.UserInfoOperationCompleted == null)) {
                this.UserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserInfoOperationCompleted);
            }
            this.InvokeAsync("UserInfo", new object[] {
                        SessionID,
                        UserID}, this.UserInfoOperationCompleted, userState);
        }
        
        private void OnUserInfoOperationCompleted(object arg) {
            if ((this.UserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserInfoCompleted(this, new UserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserInfobyLogin", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserIDInfo UserInfobyLogin(string SessionID, string LoginName) {
            object[] results = this.Invoke("UserInfobyLogin", new object[] {
                        SessionID,
                        LoginName});
            return ((UserIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void UserInfobyLoginAsync(string SessionID, string LoginName) {
            this.UserInfobyLoginAsync(SessionID, LoginName, null);
        }
        
        /// <remarks/>
        public void UserInfobyLoginAsync(string SessionID, string LoginName, object userState) {
            if ((this.UserInfobyLoginOperationCompleted == null)) {
                this.UserInfobyLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserInfobyLoginOperationCompleted);
            }
            this.InvokeAsync("UserInfobyLogin", new object[] {
                        SessionID,
                        LoginName}, this.UserInfobyLoginOperationCompleted, userState);
        }
        
        private void OnUserInfobyLoginOperationCompleted(object arg) {
            if ((this.UserInfobyLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserInfobyLoginCompleted(this, new UserInfobyLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserUpdate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserUpdate(string SessionID, int UserID, string FirstName, string LastName, string Company, string EMail, string Phone, string CellPhone, CellCarrier CellCarrier, AuthLevel AuthLevel) {
            object[] results = this.Invoke("UserUpdate", new object[] {
                        SessionID,
                        UserID,
                        FirstName,
                        LastName,
                        Company,
                        EMail,
                        Phone,
                        CellPhone,
                        CellCarrier,
                        AuthLevel});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserUpdateAsync(string SessionID, int UserID, string FirstName, string LastName, string Company, string EMail, string Phone, string CellPhone, CellCarrier CellCarrier, AuthLevel AuthLevel) {
            this.UserUpdateAsync(SessionID, UserID, FirstName, LastName, Company, EMail, Phone, CellPhone, CellCarrier, AuthLevel, null);
        }
        
        /// <remarks/>
        public void UserUpdateAsync(string SessionID, int UserID, string FirstName, string LastName, string Company, string EMail, string Phone, string CellPhone, CellCarrier CellCarrier, AuthLevel AuthLevel, object userState) {
            if ((this.UserUpdateOperationCompleted == null)) {
                this.UserUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserUpdateOperationCompleted);
            }
            this.InvokeAsync("UserUpdate", new object[] {
                        SessionID,
                        UserID,
                        FirstName,
                        LastName,
                        Company,
                        EMail,
                        Phone,
                        CellPhone,
                        CellCarrier,
                        AuthLevel}, this.UserUpdateOperationCompleted, userState);
        }
        
        private void OnUserUpdateOperationCompleted(object arg) {
            if ((this.UserUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserUpdateCompleted(this, new UserUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserPassword", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserPassword(string SessionID, int UserID, string CurrentRecoveryAnswer, string Password, string RecoveryQuestion, string RecoveryAnswer) {
            object[] results = this.Invoke("UserPassword", new object[] {
                        SessionID,
                        UserID,
                        CurrentRecoveryAnswer,
                        Password,
                        RecoveryQuestion,
                        RecoveryAnswer});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserPasswordAsync(string SessionID, int UserID, string CurrentRecoveryAnswer, string Password, string RecoveryQuestion, string RecoveryAnswer) {
            this.UserPasswordAsync(SessionID, UserID, CurrentRecoveryAnswer, Password, RecoveryQuestion, RecoveryAnswer, null);
        }
        
        /// <remarks/>
        public void UserPasswordAsync(string SessionID, int UserID, string CurrentRecoveryAnswer, string Password, string RecoveryQuestion, string RecoveryAnswer, object userState) {
            if ((this.UserPasswordOperationCompleted == null)) {
                this.UserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserPasswordOperationCompleted);
            }
            this.InvokeAsync("UserPassword", new object[] {
                        SessionID,
                        UserID,
                        CurrentRecoveryAnswer,
                        Password,
                        RecoveryQuestion,
                        RecoveryAnswer}, this.UserPasswordOperationCompleted, userState);
        }
        
        private void OnUserPasswordOperationCompleted(object arg) {
            if ((this.UserPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserPasswordCompleted(this, new UserPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserActivate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserActivate(string SessionID, int UserID) {
            object[] results = this.Invoke("UserActivate", new object[] {
                        SessionID,
                        UserID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserActivateAsync(string SessionID, int UserID) {
            this.UserActivateAsync(SessionID, UserID, null);
        }
        
        /// <remarks/>
        public void UserActivateAsync(string SessionID, int UserID, object userState) {
            if ((this.UserActivateOperationCompleted == null)) {
                this.UserActivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserActivateOperationCompleted);
            }
            this.InvokeAsync("UserActivate", new object[] {
                        SessionID,
                        UserID}, this.UserActivateOperationCompleted, userState);
        }
        
        private void OnUserActivateOperationCompleted(object arg) {
            if ((this.UserActivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserActivateCompleted(this, new UserActivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserSuspend", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserSuspend(string SessionID, int UserID) {
            object[] results = this.Invoke("UserSuspend", new object[] {
                        SessionID,
                        UserID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserSuspendAsync(string SessionID, int UserID) {
            this.UserSuspendAsync(SessionID, UserID, null);
        }
        
        /// <remarks/>
        public void UserSuspendAsync(string SessionID, int UserID, object userState) {
            if ((this.UserSuspendOperationCompleted == null)) {
                this.UserSuspendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserSuspendOperationCompleted);
            }
            this.InvokeAsync("UserSuspend", new object[] {
                        SessionID,
                        UserID}, this.UserSuspendOperationCompleted, userState);
        }
        
        private void OnUserSuspendOperationCompleted(object arg) {
            if ((this.UserSuspendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserSuspendCompleted(this, new UserSuspendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserTerminate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserTerminate(string SessionID, int UserID) {
            object[] results = this.Invoke("UserTerminate", new object[] {
                        SessionID,
                        UserID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserTerminateAsync(string SessionID, int UserID) {
            this.UserTerminateAsync(SessionID, UserID, null);
        }
        
        /// <remarks/>
        public void UserTerminateAsync(string SessionID, int UserID, object userState) {
            if ((this.UserTerminateOperationCompleted == null)) {
                this.UserTerminateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserTerminateOperationCompleted);
            }
            this.InvokeAsync("UserTerminate", new object[] {
                        SessionID,
                        UserID}, this.UserTerminateOperationCompleted, userState);
        }
        
        private void OnUserTerminateOperationCompleted(object arg) {
            if ((this.UserTerminateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserTerminateCompleted(this, new UserTerminateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserSendSMS", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserSendSMS(string SessionID, int UserID, string Text) {
            object[] results = this.Invoke("UserSendSMS", new object[] {
                        SessionID,
                        UserID,
                        Text});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserSendSMSAsync(string SessionID, int UserID, string Text) {
            this.UserSendSMSAsync(SessionID, UserID, Text, null);
        }
        
        /// <remarks/>
        public void UserSendSMSAsync(string SessionID, int UserID, string Text, object userState) {
            if ((this.UserSendSMSOperationCompleted == null)) {
                this.UserSendSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserSendSMSOperationCompleted);
            }
            this.InvokeAsync("UserSendSMS", new object[] {
                        SessionID,
                        UserID,
                        Text}, this.UserSendSMSOperationCompleted, userState);
        }
        
        private void OnUserSendSMSOperationCompleted(object arg) {
            if ((this.UserSendSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserSendSMSCompleted(this, new UserSendSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserReset", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserReset(string SessionID, int UserID) {
            object[] results = this.Invoke("UserReset", new object[] {
                        SessionID,
                        UserID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserResetAsync(string SessionID, int UserID) {
            this.UserResetAsync(SessionID, UserID, null);
        }
        
        /// <remarks/>
        public void UserResetAsync(string SessionID, int UserID, object userState) {
            if ((this.UserResetOperationCompleted == null)) {
                this.UserResetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserResetOperationCompleted);
            }
            this.InvokeAsync("UserReset", new object[] {
                        SessionID,
                        UserID}, this.UserResetOperationCompleted, userState);
        }
        
        private void OnUserResetOperationCompleted(object arg) {
            if ((this.UserResetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserResetCompleted(this, new UserResetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserList", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserIDInfo[] UserList(string SessionID, string Name) {
            object[] results = this.Invoke("UserList", new object[] {
                        SessionID,
                        Name});
            return ((UserIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void UserListAsync(string SessionID, string Name) {
            this.UserListAsync(SessionID, Name, null);
        }
        
        /// <remarks/>
        public void UserListAsync(string SessionID, string Name, object userState) {
            if ((this.UserListOperationCompleted == null)) {
                this.UserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserListOperationCompleted);
            }
            this.InvokeAsync("UserList", new object[] {
                        SessionID,
                        Name}, this.UserListOperationCompleted, userState);
        }
        
        private void OnUserListOperationCompleted(object arg) {
            if ((this.UserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserListCompleted(this, new UserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserListEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserIDInfo[] UserListEx(string SessionID, int NetworkID, int MailboxID, string Name) {
            object[] results = this.Invoke("UserListEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        Name});
            return ((UserIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void UserListExAsync(string SessionID, int NetworkID, int MailboxID, string Name) {
            this.UserListExAsync(SessionID, NetworkID, MailboxID, Name, null);
        }
        
        /// <remarks/>
        public void UserListExAsync(string SessionID, int NetworkID, int MailboxID, string Name, object userState) {
            if ((this.UserListExOperationCompleted == null)) {
                this.UserListExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserListExOperationCompleted);
            }
            this.InvokeAsync("UserListEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID,
                        Name}, this.UserListExOperationCompleted, userState);
        }
        
        private void OnUserListExOperationCompleted(object arg) {
            if ((this.UserListExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserListExCompleted(this, new UserListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserListLockedOut", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserIDInfo[] UserListLockedOut(string SessionID) {
            object[] results = this.Invoke("UserListLockedOut", new object[] {
                        SessionID});
            return ((UserIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void UserListLockedOutAsync(string SessionID) {
            this.UserListLockedOutAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void UserListLockedOutAsync(string SessionID, object userState) {
            if ((this.UserListLockedOutOperationCompleted == null)) {
                this.UserListLockedOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserListLockedOutOperationCompleted);
            }
            this.InvokeAsync("UserListLockedOut", new object[] {
                        SessionID}, this.UserListLockedOutOperationCompleted, userState);
        }
        
        private void OnUserListLockedOutOperationCompleted(object arg) {
            if ((this.UserListLockedOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserListLockedOutCompleted(this, new UserListLockedOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserListLockedOutEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserIDInfo[] UserListLockedOutEx(string SessionID, int NetworkID, int MailboxID) {
            object[] results = this.Invoke("UserListLockedOutEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID});
            return ((UserIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void UserListLockedOutExAsync(string SessionID, int NetworkID, int MailboxID) {
            this.UserListLockedOutExAsync(SessionID, NetworkID, MailboxID, null);
        }
        
        /// <remarks/>
        public void UserListLockedOutExAsync(string SessionID, int NetworkID, int MailboxID, object userState) {
            if ((this.UserListLockedOutExOperationCompleted == null)) {
                this.UserListLockedOutExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserListLockedOutExOperationCompleted);
            }
            this.InvokeAsync("UserListLockedOutEx", new object[] {
                        SessionID,
                        NetworkID,
                        MailboxID}, this.UserListLockedOutExOperationCompleted, userState);
        }
        
        private void OnUserListLockedOutExOperationCompleted(object arg) {
            if ((this.UserListLockedOutExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserListLockedOutExCompleted(this, new UserListLockedOutExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserSetNetworkMailbox", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserSetNetworkMailbox(string SessionID, int UserID, int NetworkID, int MailboxID) {
            object[] results = this.Invoke("UserSetNetworkMailbox", new object[] {
                        SessionID,
                        UserID,
                        NetworkID,
                        MailboxID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserSetNetworkMailboxAsync(string SessionID, int UserID, int NetworkID, int MailboxID) {
            this.UserSetNetworkMailboxAsync(SessionID, UserID, NetworkID, MailboxID, null);
        }
        
        /// <remarks/>
        public void UserSetNetworkMailboxAsync(string SessionID, int UserID, int NetworkID, int MailboxID, object userState) {
            if ((this.UserSetNetworkMailboxOperationCompleted == null)) {
                this.UserSetNetworkMailboxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserSetNetworkMailboxOperationCompleted);
            }
            this.InvokeAsync("UserSetNetworkMailbox", new object[] {
                        SessionID,
                        UserID,
                        NetworkID,
                        MailboxID}, this.UserSetNetworkMailboxOperationCompleted, userState);
        }
        
        private void OnUserSetNetworkMailboxOperationCompleted(object arg) {
            if ((this.UserSetNetworkMailboxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserSetNetworkMailboxCompleted(this, new UserSetNetworkMailboxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserSetAuthLevel", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserSetAuthLevel(string SessionID, int UserID, AuthLevel AuthLevel) {
            object[] results = this.Invoke("UserSetAuthLevel", new object[] {
                        SessionID,
                        UserID,
                        AuthLevel});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserSetAuthLevelAsync(string SessionID, int UserID, AuthLevel AuthLevel) {
            this.UserSetAuthLevelAsync(SessionID, UserID, AuthLevel, null);
        }
        
        /// <remarks/>
        public void UserSetAuthLevelAsync(string SessionID, int UserID, AuthLevel AuthLevel, object userState) {
            if ((this.UserSetAuthLevelOperationCompleted == null)) {
                this.UserSetAuthLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserSetAuthLevelOperationCompleted);
            }
            this.InvokeAsync("UserSetAuthLevel", new object[] {
                        SessionID,
                        UserID,
                        AuthLevel}, this.UserSetAuthLevelOperationCompleted, userState);
        }
        
        private void OnUserSetAuthLevelOperationCompleted(object arg) {
            if ((this.UserSetAuthLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserSetAuthLevelCompleted(this, new UserSetAuthLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserSetMaxSessions", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UserSetMaxSessions(string SessionID, int UserID, short MaxSessions) {
            object[] results = this.Invoke("UserSetMaxSessions", new object[] {
                        SessionID,
                        UserID,
                        MaxSessions});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserSetMaxSessionsAsync(string SessionID, int UserID, short MaxSessions) {
            this.UserSetMaxSessionsAsync(SessionID, UserID, MaxSessions, null);
        }
        
        /// <remarks/>
        public void UserSetMaxSessionsAsync(string SessionID, int UserID, short MaxSessions, object userState) {
            if ((this.UserSetMaxSessionsOperationCompleted == null)) {
                this.UserSetMaxSessionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserSetMaxSessionsOperationCompleted);
            }
            this.InvokeAsync("UserSetMaxSessions", new object[] {
                        SessionID,
                        UserID,
                        MaxSessions}, this.UserSetMaxSessionsOperationCompleted, userState);
        }
        
        private void OnUserSetMaxSessionsOperationCompleted(object arg) {
            if ((this.UserSetMaxSessionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserSetMaxSessionsCompleted(this, new UserSetMaxSessionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/UserGetAPIKey", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UserGetAPIKey(string SessionID, int UserID) {
            object[] results = this.Invoke("UserGetAPIKey", new object[] {
                        SessionID,
                        UserID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UserGetAPIKeyAsync(string SessionID, int UserID) {
            this.UserGetAPIKeyAsync(SessionID, UserID, null);
        }
        
        /// <remarks/>
        public void UserGetAPIKeyAsync(string SessionID, int UserID, object userState) {
            if ((this.UserGetAPIKeyOperationCompleted == null)) {
                this.UserGetAPIKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserGetAPIKeyOperationCompleted);
            }
            this.InvokeAsync("UserGetAPIKey", new object[] {
                        SessionID,
                        UserID}, this.UserGetAPIKeyOperationCompleted, userState);
        }
        
        private void OnUserGetAPIKeyOperationCompleted(object arg) {
            if ((this.UserGetAPIKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserGetAPIKeyCompleted(this, new UserGetAPIKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/SessionLogCurrent", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SessionLogInfo SessionLogCurrent(string SessionID) {
            object[] results = this.Invoke("SessionLogCurrent", new object[] {
                        SessionID});
            return ((SessionLogInfo)(results[0]));
        }
        
        /// <remarks/>
        public void SessionLogCurrentAsync(string SessionID) {
            this.SessionLogCurrentAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void SessionLogCurrentAsync(string SessionID, object userState) {
            if ((this.SessionLogCurrentOperationCompleted == null)) {
                this.SessionLogCurrentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionLogCurrentOperationCompleted);
            }
            this.InvokeAsync("SessionLogCurrent", new object[] {
                        SessionID}, this.SessionLogCurrentOperationCompleted, userState);
        }
        
        private void OnSessionLogCurrentOperationCompleted(object arg) {
            if ((this.SessionLogCurrentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SessionLogCurrentCompleted(this, new SessionLogCurrentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/SessionLog", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SessionLogInfo[] SessionLog(string SessionID, short MaxRecords) {
            object[] results = this.Invoke("SessionLog", new object[] {
                        SessionID,
                        MaxRecords});
            return ((SessionLogInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void SessionLogAsync(string SessionID, short MaxRecords) {
            this.SessionLogAsync(SessionID, MaxRecords, null);
        }
        
        /// <remarks/>
        public void SessionLogAsync(string SessionID, short MaxRecords, object userState) {
            if ((this.SessionLogOperationCompleted == null)) {
                this.SessionLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionLogOperationCompleted);
            }
            this.InvokeAsync("SessionLog", new object[] {
                        SessionID,
                        MaxRecords}, this.SessionLogOperationCompleted, userState);
        }
        
        private void OnSessionLogOperationCompleted(object arg) {
            if ((this.SessionLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SessionLogCompleted(this, new SessionLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/SessionLogEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SessionLogInfo[] SessionLogEx(string SessionID, int UserID, System.DateTime StartTime, System.DateTime EndTime, short MaxRecords) {
            object[] results = this.Invoke("SessionLogEx", new object[] {
                        SessionID,
                        UserID,
                        StartTime,
                        EndTime,
                        MaxRecords});
            return ((SessionLogInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void SessionLogExAsync(string SessionID, int UserID, System.DateTime StartTime, System.DateTime EndTime, short MaxRecords) {
            this.SessionLogExAsync(SessionID, UserID, StartTime, EndTime, MaxRecords, null);
        }
        
        /// <remarks/>
        public void SessionLogExAsync(string SessionID, int UserID, System.DateTime StartTime, System.DateTime EndTime, short MaxRecords, object userState) {
            if ((this.SessionLogExOperationCompleted == null)) {
                this.SessionLogExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionLogExOperationCompleted);
            }
            this.InvokeAsync("SessionLogEx", new object[] {
                        SessionID,
                        UserID,
                        StartTime,
                        EndTime,
                        MaxRecords}, this.SessionLogExOperationCompleted, userState);
        }
        
        private void OnSessionLogExOperationCompleted(object arg) {
            if ((this.SessionLogExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SessionLogExCompleted(this, new SessionLogExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/KeyGet", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public KeyValue KeyGet(string SessionID, string Key, Objects SystemObject, int ObjectID, KeyVisibility Visibility) {
            object[] results = this.Invoke("KeyGet", new object[] {
                        SessionID,
                        Key,
                        SystemObject,
                        ObjectID,
                        Visibility});
            return ((KeyValue)(results[0]));
        }
        
        /// <remarks/>
        public void KeyGetAsync(string SessionID, string Key, Objects SystemObject, int ObjectID, KeyVisibility Visibility) {
            this.KeyGetAsync(SessionID, Key, SystemObject, ObjectID, Visibility, null);
        }
        
        /// <remarks/>
        public void KeyGetAsync(string SessionID, string Key, Objects SystemObject, int ObjectID, KeyVisibility Visibility, object userState) {
            if ((this.KeyGetOperationCompleted == null)) {
                this.KeyGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyGetOperationCompleted);
            }
            this.InvokeAsync("KeyGet", new object[] {
                        SessionID,
                        Key,
                        SystemObject,
                        ObjectID,
                        Visibility}, this.KeyGetOperationCompleted, userState);
        }
        
        private void OnKeyGetOperationCompleted(object arg) {
            if ((this.KeyGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyGetCompleted(this, new KeyGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/KeyList", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public KeyValue[] KeyList(string SessionID, Objects SystemObject, int ObjectID) {
            object[] results = this.Invoke("KeyList", new object[] {
                        SessionID,
                        SystemObject,
                        ObjectID});
            return ((KeyValue[])(results[0]));
        }
        
        /// <remarks/>
        public void KeyListAsync(string SessionID, Objects SystemObject, int ObjectID) {
            this.KeyListAsync(SessionID, SystemObject, ObjectID, null);
        }
        
        /// <remarks/>
        public void KeyListAsync(string SessionID, Objects SystemObject, int ObjectID, object userState) {
            if ((this.KeyListOperationCompleted == null)) {
                this.KeyListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyListOperationCompleted);
            }
            this.InvokeAsync("KeyList", new object[] {
                        SessionID,
                        SystemObject,
                        ObjectID}, this.KeyListOperationCompleted, userState);
        }
        
        private void OnKeyListOperationCompleted(object arg) {
            if ((this.KeyListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyListCompleted(this, new KeyListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/KeySet", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool KeySet(string SessionID, string Key, Objects SystemObject, int ObjectID, KeyVisibility Visibility, string Value, string Meta, int DaysToLive) {
            object[] results = this.Invoke("KeySet", new object[] {
                        SessionID,
                        Key,
                        SystemObject,
                        ObjectID,
                        Visibility,
                        Value,
                        Meta,
                        DaysToLive});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void KeySetAsync(string SessionID, string Key, Objects SystemObject, int ObjectID, KeyVisibility Visibility, string Value, string Meta, int DaysToLive) {
            this.KeySetAsync(SessionID, Key, SystemObject, ObjectID, Visibility, Value, Meta, DaysToLive, null);
        }
        
        /// <remarks/>
        public void KeySetAsync(string SessionID, string Key, Objects SystemObject, int ObjectID, KeyVisibility Visibility, string Value, string Meta, int DaysToLive, object userState) {
            if ((this.KeySetOperationCompleted == null)) {
                this.KeySetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeySetOperationCompleted);
            }
            this.InvokeAsync("KeySet", new object[] {
                        SessionID,
                        Key,
                        SystemObject,
                        ObjectID,
                        Visibility,
                        Value,
                        Meta,
                        DaysToLive}, this.KeySetOperationCompleted, userState);
        }
        
        private void OnKeySetOperationCompleted(object arg) {
            if ((this.KeySetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeySetCompleted(this, new KeySetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/KeyRemove", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool KeyRemove(string SessionID, string Key, Objects SystemObject, int ObjectID, KeyVisibility Visibility) {
            object[] results = this.Invoke("KeyRemove", new object[] {
                        SessionID,
                        Key,
                        SystemObject,
                        ObjectID,
                        Visibility});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void KeyRemoveAsync(string SessionID, string Key, Objects SystemObject, int ObjectID, KeyVisibility Visibility) {
            this.KeyRemoveAsync(SessionID, Key, SystemObject, ObjectID, Visibility, null);
        }
        
        /// <remarks/>
        public void KeyRemoveAsync(string SessionID, string Key, Objects SystemObject, int ObjectID, KeyVisibility Visibility, object userState) {
            if ((this.KeyRemoveOperationCompleted == null)) {
                this.KeyRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyRemoveOperationCompleted);
            }
            this.InvokeAsync("KeyRemove", new object[] {
                        SessionID,
                        Key,
                        SystemObject,
                        ObjectID,
                        Visibility}, this.KeyRemoveOperationCompleted, userState);
        }
        
        private void OnKeyRemoveOperationCompleted(object arg) {
            if ((this.KeyRemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyRemoveCompleted(this, new KeyRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/StatusList", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StatusInfo[] StatusList(string SessionID) {
            object[] results = this.Invoke("StatusList", new object[] {
                        SessionID});
            return ((StatusInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void StatusListAsync(string SessionID) {
            this.StatusListAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void StatusListAsync(string SessionID, object userState) {
            if ((this.StatusListOperationCompleted == null)) {
                this.StatusListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStatusListOperationCompleted);
            }
            this.InvokeAsync("StatusList", new object[] {
                        SessionID}, this.StatusListOperationCompleted, userState);
        }
        
        private void OnStatusListOperationCompleted(object arg) {
            if ((this.StatusListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StatusListCompleted(this, new StatusListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/NetworkInfo", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NetworkIDInfo NetworkInfo(string SessionID, int NetworkID) {
            object[] results = this.Invoke("NetworkInfo", new object[] {
                        SessionID,
                        NetworkID});
            return ((NetworkIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void NetworkInfoAsync(string SessionID, int NetworkID) {
            this.NetworkInfoAsync(SessionID, NetworkID, null);
        }
        
        /// <remarks/>
        public void NetworkInfoAsync(string SessionID, int NetworkID, object userState) {
            if ((this.NetworkInfoOperationCompleted == null)) {
                this.NetworkInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNetworkInfoOperationCompleted);
            }
            this.InvokeAsync("NetworkInfo", new object[] {
                        SessionID,
                        NetworkID}, this.NetworkInfoOperationCompleted, userState);
        }
        
        private void OnNetworkInfoOperationCompleted(object arg) {
            if ((this.NetworkInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NetworkInfoCompleted(this, new NetworkInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/NetworkInfoWithLog", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NetworkIDInfo NetworkInfoWithLog(string SessionID, int NetworkID) {
            object[] results = this.Invoke("NetworkInfoWithLog", new object[] {
                        SessionID,
                        NetworkID});
            return ((NetworkIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void NetworkInfoWithLogAsync(string SessionID, int NetworkID) {
            this.NetworkInfoWithLogAsync(SessionID, NetworkID, null);
        }
        
        /// <remarks/>
        public void NetworkInfoWithLogAsync(string SessionID, int NetworkID, object userState) {
            if ((this.NetworkInfoWithLogOperationCompleted == null)) {
                this.NetworkInfoWithLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNetworkInfoWithLogOperationCompleted);
            }
            this.InvokeAsync("NetworkInfoWithLog", new object[] {
                        SessionID,
                        NetworkID}, this.NetworkInfoWithLogOperationCompleted, userState);
        }
        
        private void OnNetworkInfoWithLogOperationCompleted(object arg) {
            if ((this.NetworkInfoWithLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NetworkInfoWithLogCompleted(this, new NetworkInfoWithLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/NetworkList", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NetworkIDInfo[] NetworkList(string SessionID, string Name) {
            object[] results = this.Invoke("NetworkList", new object[] {
                        SessionID,
                        Name});
            return ((NetworkIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void NetworkListAsync(string SessionID, string Name) {
            this.NetworkListAsync(SessionID, Name, null);
        }
        
        /// <remarks/>
        public void NetworkListAsync(string SessionID, string Name, object userState) {
            if ((this.NetworkListOperationCompleted == null)) {
                this.NetworkListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNetworkListOperationCompleted);
            }
            this.InvokeAsync("NetworkList", new object[] {
                        SessionID,
                        Name}, this.NetworkListOperationCompleted, userState);
        }
        
        private void OnNetworkListOperationCompleted(object arg) {
            if ((this.NetworkListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NetworkListCompleted(this, new NetworkListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/NetworkStatusSummary", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet NetworkStatusSummary(string SessionID, bool ShowInactive) {
            object[] results = this.Invoke("NetworkStatusSummary", new object[] {
                        SessionID,
                        ShowInactive});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void NetworkStatusSummaryAsync(string SessionID, bool ShowInactive) {
            this.NetworkStatusSummaryAsync(SessionID, ShowInactive, null);
        }
        
        /// <remarks/>
        public void NetworkStatusSummaryAsync(string SessionID, bool ShowInactive, object userState) {
            if ((this.NetworkStatusSummaryOperationCompleted == null)) {
                this.NetworkStatusSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNetworkStatusSummaryOperationCompleted);
            }
            this.InvokeAsync("NetworkStatusSummary", new object[] {
                        SessionID,
                        ShowInactive}, this.NetworkStatusSummaryOperationCompleted, userState);
        }
        
        private void OnNetworkStatusSummaryOperationCompleted(object arg) {
            if ((this.NetworkStatusSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NetworkStatusSummaryCompleted(this, new NetworkStatusSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/NetworkOutageList", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NetworkIDInfo[] NetworkOutageList(string SessionID) {
            object[] results = this.Invoke("NetworkOutageList", new object[] {
                        SessionID});
            return ((NetworkIDInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void NetworkOutageListAsync(string SessionID) {
            this.NetworkOutageListAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void NetworkOutageListAsync(string SessionID, object userState) {
            if ((this.NetworkOutageListOperationCompleted == null)) {
                this.NetworkOutageListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNetworkOutageListOperationCompleted);
            }
            this.InvokeAsync("NetworkOutageList", new object[] {
                        SessionID}, this.NetworkOutageListOperationCompleted, userState);
        }
        
        private void OnNetworkOutageListOperationCompleted(object arg) {
            if ((this.NetworkOutageListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NetworkOutageListCompleted(this, new NetworkOutageListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/NetworkUpdate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NetworkUpdate(string SessionID, int NetworkID, string Name, string Location) {
            object[] results = this.Invoke("NetworkUpdate", new object[] {
                        SessionID,
                        NetworkID,
                        Name,
                        Location});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NetworkUpdateAsync(string SessionID, int NetworkID, string Name, string Location) {
            this.NetworkUpdateAsync(SessionID, NetworkID, Name, Location, null);
        }
        
        /// <remarks/>
        public void NetworkUpdateAsync(string SessionID, int NetworkID, string Name, string Location, object userState) {
            if ((this.NetworkUpdateOperationCompleted == null)) {
                this.NetworkUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNetworkUpdateOperationCompleted);
            }
            this.InvokeAsync("NetworkUpdate", new object[] {
                        SessionID,
                        NetworkID,
                        Name,
                        Location}, this.NetworkUpdateOperationCompleted, userState);
        }
        
        private void OnNetworkUpdateOperationCompleted(object arg) {
            if ((this.NetworkUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NetworkUpdateCompleted(this, new NetworkUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/NetworkSetContact", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NetworkSetContact(string SessionID, int NetworkID, int UserID, NetworkContactType ContactType) {
            object[] results = this.Invoke("NetworkSetContact", new object[] {
                        SessionID,
                        NetworkID,
                        UserID,
                        ContactType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NetworkSetContactAsync(string SessionID, int NetworkID, int UserID, NetworkContactType ContactType) {
            this.NetworkSetContactAsync(SessionID, NetworkID, UserID, ContactType, null);
        }
        
        /// <remarks/>
        public void NetworkSetContactAsync(string SessionID, int NetworkID, int UserID, NetworkContactType ContactType, object userState) {
            if ((this.NetworkSetContactOperationCompleted == null)) {
                this.NetworkSetContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNetworkSetContactOperationCompleted);
            }
            this.InvokeAsync("NetworkSetContact", new object[] {
                        SessionID,
                        NetworkID,
                        UserID,
                        ContactType}, this.NetworkSetContactOperationCompleted, userState);
        }
        
        private void OnNetworkSetContactOperationCompleted(object arg) {
            if ((this.NetworkSetContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NetworkSetContactCompleted(this, new NetworkSetContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/NetworkGetContact", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserIDInfo NetworkGetContact(string SessionID, int NetworkID, NetworkContactType ContactType) {
            object[] results = this.Invoke("NetworkGetContact", new object[] {
                        SessionID,
                        NetworkID,
                        ContactType});
            return ((UserIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void NetworkGetContactAsync(string SessionID, int NetworkID, NetworkContactType ContactType) {
            this.NetworkGetContactAsync(SessionID, NetworkID, ContactType, null);
        }
        
        /// <remarks/>
        public void NetworkGetContactAsync(string SessionID, int NetworkID, NetworkContactType ContactType, object userState) {
            if ((this.NetworkGetContactOperationCompleted == null)) {
                this.NetworkGetContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNetworkGetContactOperationCompleted);
            }
            this.InvokeAsync("NetworkGetContact", new object[] {
                        SessionID,
                        NetworkID,
                        ContactType}, this.NetworkGetContactOperationCompleted, userState);
        }
        
        private void OnNetworkGetContactOperationCompleted(object arg) {
            if ((this.NetworkGetContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NetworkGetContactCompleted(this, new NetworkGetContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/NetworkSetWebsite", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NetworkSetWebsite(string SessionID, int NetworkID, string URL, NetworkWebsiteType WebsiteType) {
            object[] results = this.Invoke("NetworkSetWebsite", new object[] {
                        SessionID,
                        NetworkID,
                        URL,
                        WebsiteType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NetworkSetWebsiteAsync(string SessionID, int NetworkID, string URL, NetworkWebsiteType WebsiteType) {
            this.NetworkSetWebsiteAsync(SessionID, NetworkID, URL, WebsiteType, null);
        }
        
        /// <remarks/>
        public void NetworkSetWebsiteAsync(string SessionID, int NetworkID, string URL, NetworkWebsiteType WebsiteType, object userState) {
            if ((this.NetworkSetWebsiteOperationCompleted == null)) {
                this.NetworkSetWebsiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNetworkSetWebsiteOperationCompleted);
            }
            this.InvokeAsync("NetworkSetWebsite", new object[] {
                        SessionID,
                        NetworkID,
                        URL,
                        WebsiteType}, this.NetworkSetWebsiteOperationCompleted, userState);
        }
        
        private void OnNetworkSetWebsiteOperationCompleted(object arg) {
            if ((this.NetworkSetWebsiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NetworkSetWebsiteCompleted(this, new NetworkSetWebsiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/NetworkX12Delimiters", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NetworkX12Delimiters(string SessionID, int NetworkID, byte SegTerm, byte ElmSep, byte SubElmSep) {
            object[] results = this.Invoke("NetworkX12Delimiters", new object[] {
                        SessionID,
                        NetworkID,
                        SegTerm,
                        ElmSep,
                        SubElmSep});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NetworkX12DelimitersAsync(string SessionID, int NetworkID, byte SegTerm, byte ElmSep, byte SubElmSep) {
            this.NetworkX12DelimitersAsync(SessionID, NetworkID, SegTerm, ElmSep, SubElmSep, null);
        }
        
        /// <remarks/>
        public void NetworkX12DelimitersAsync(string SessionID, int NetworkID, byte SegTerm, byte ElmSep, byte SubElmSep, object userState) {
            if ((this.NetworkX12DelimitersOperationCompleted == null)) {
                this.NetworkX12DelimitersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNetworkX12DelimitersOperationCompleted);
            }
            this.InvokeAsync("NetworkX12Delimiters", new object[] {
                        SessionID,
                        NetworkID,
                        SegTerm,
                        ElmSep,
                        SubElmSep}, this.NetworkX12DelimitersOperationCompleted, userState);
        }
        
        private void OnNetworkX12DelimitersOperationCompleted(object arg) {
            if ((this.NetworkX12DelimitersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NetworkX12DelimitersCompleted(this, new NetworkX12DelimitersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/NetworkRootDeleteOnDownload", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NetworkRootDeleteOnDownload(string SessionID, int NetworkID, bool DeleteOnDownload) {
            object[] results = this.Invoke("NetworkRootDeleteOnDownload", new object[] {
                        SessionID,
                        NetworkID,
                        DeleteOnDownload});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NetworkRootDeleteOnDownloadAsync(string SessionID, int NetworkID, bool DeleteOnDownload) {
            this.NetworkRootDeleteOnDownloadAsync(SessionID, NetworkID, DeleteOnDownload, null);
        }
        
        /// <remarks/>
        public void NetworkRootDeleteOnDownloadAsync(string SessionID, int NetworkID, bool DeleteOnDownload, object userState) {
            if ((this.NetworkRootDeleteOnDownloadOperationCompleted == null)) {
                this.NetworkRootDeleteOnDownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNetworkRootDeleteOnDownloadOperationCompleted);
            }
            this.InvokeAsync("NetworkRootDeleteOnDownload", new object[] {
                        SessionID,
                        NetworkID,
                        DeleteOnDownload}, this.NetworkRootDeleteOnDownloadOperationCompleted, userState);
        }
        
        private void OnNetworkRootDeleteOnDownloadOperationCompleted(object arg) {
            if ((this.NetworkRootDeleteOnDownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NetworkRootDeleteOnDownloadCompleted(this, new NetworkRootDeleteOnDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MailboxAdd", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int MailboxAdd(string SessionID, string Name, int UserID) {
            object[] results = this.Invoke("MailboxAdd", new object[] {
                        SessionID,
                        Name,
                        UserID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void MailboxAddAsync(string SessionID, string Name, int UserID) {
            this.MailboxAddAsync(SessionID, Name, UserID, null);
        }
        
        /// <remarks/>
        public void MailboxAddAsync(string SessionID, string Name, int UserID, object userState) {
            if ((this.MailboxAddOperationCompleted == null)) {
                this.MailboxAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailboxAddOperationCompleted);
            }
            this.InvokeAsync("MailboxAdd", new object[] {
                        SessionID,
                        Name,
                        UserID}, this.MailboxAddOperationCompleted, userState);
        }
        
        private void OnMailboxAddOperationCompleted(object arg) {
            if ((this.MailboxAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailboxAddCompleted(this, new MailboxAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MailboxAddEx", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int MailboxAddEx(string SessionID, int NetworkID, string Name, string UserID) {
            object[] results = this.Invoke("MailboxAddEx", new object[] {
                        SessionID,
                        NetworkID,
                        Name,
                        UserID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void MailboxAddExAsync(string SessionID, int NetworkID, string Name, string UserID) {
            this.MailboxAddExAsync(SessionID, NetworkID, Name, UserID, null);
        }
        
        /// <remarks/>
        public void MailboxAddExAsync(string SessionID, int NetworkID, string Name, string UserID, object userState) {
            if ((this.MailboxAddExOperationCompleted == null)) {
                this.MailboxAddExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailboxAddExOperationCompleted);
            }
            this.InvokeAsync("MailboxAddEx", new object[] {
                        SessionID,
                        NetworkID,
                        Name,
                        UserID}, this.MailboxAddExOperationCompleted, userState);
        }
        
        private void OnMailboxAddExOperationCompleted(object arg) {
            if ((this.MailboxAddExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailboxAddExCompleted(this, new MailboxAddExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MailboxActivate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MailboxActivate(string SessionID, int MailboxID) {
            object[] results = this.Invoke("MailboxActivate", new object[] {
                        SessionID,
                        MailboxID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MailboxActivateAsync(string SessionID, int MailboxID) {
            this.MailboxActivateAsync(SessionID, MailboxID, null);
        }
        
        /// <remarks/>
        public void MailboxActivateAsync(string SessionID, int MailboxID, object userState) {
            if ((this.MailboxActivateOperationCompleted == null)) {
                this.MailboxActivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailboxActivateOperationCompleted);
            }
            this.InvokeAsync("MailboxActivate", new object[] {
                        SessionID,
                        MailboxID}, this.MailboxActivateOperationCompleted, userState);
        }
        
        private void OnMailboxActivateOperationCompleted(object arg) {
            if ((this.MailboxActivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailboxActivateCompleted(this, new MailboxActivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MailboxSuspend", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MailboxSuspend(string SessionID, int MailboxID) {
            object[] results = this.Invoke("MailboxSuspend", new object[] {
                        SessionID,
                        MailboxID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MailboxSuspendAsync(string SessionID, int MailboxID) {
            this.MailboxSuspendAsync(SessionID, MailboxID, null);
        }
        
        /// <remarks/>
        public void MailboxSuspendAsync(string SessionID, int MailboxID, object userState) {
            if ((this.MailboxSuspendOperationCompleted == null)) {
                this.MailboxSuspendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailboxSuspendOperationCompleted);
            }
            this.InvokeAsync("MailboxSuspend", new object[] {
                        SessionID,
                        MailboxID}, this.MailboxSuspendOperationCompleted, userState);
        }
        
        private void OnMailboxSuspendOperationCompleted(object arg) {
            if ((this.MailboxSuspendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailboxSuspendCompleted(this, new MailboxSuspendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MailboxTerminate", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MailboxTerminate(string SessionID, int MailboxID) {
            object[] results = this.Invoke("MailboxTerminate", new object[] {
                        SessionID,
                        MailboxID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MailboxTerminateAsync(string SessionID, int MailboxID) {
            this.MailboxTerminateAsync(SessionID, MailboxID, null);
        }
        
        /// <remarks/>
        public void MailboxTerminateAsync(string SessionID, int MailboxID, object userState) {
            if ((this.MailboxTerminateOperationCompleted == null)) {
                this.MailboxTerminateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailboxTerminateOperationCompleted);
            }
            this.InvokeAsync("MailboxTerminate", new object[] {
                        SessionID,
                        MailboxID}, this.MailboxTerminateOperationCompleted, userState);
        }
        
        private void OnMailboxTerminateOperationCompleted(object arg) {
            if ((this.MailboxTerminateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailboxTerminateCompleted(this, new MailboxTerminateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MailboxManaged", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MailboxManaged(string SessionID, int MailboxID, bool Managed) {
            object[] results = this.Invoke("MailboxManaged", new object[] {
                        SessionID,
                        MailboxID,
                        Managed});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MailboxManagedAsync(string SessionID, int MailboxID, bool Managed) {
            this.MailboxManagedAsync(SessionID, MailboxID, Managed, null);
        }
        
        /// <remarks/>
        public void MailboxManagedAsync(string SessionID, int MailboxID, bool Managed, object userState) {
            if ((this.MailboxManagedOperationCompleted == null)) {
                this.MailboxManagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailboxManagedOperationCompleted);
            }
            this.InvokeAsync("MailboxManaged", new object[] {
                        SessionID,
                        MailboxID,
                        Managed}, this.MailboxManagedOperationCompleted, userState);
        }
        
        private void OnMailboxManagedOperationCompleted(object arg) {
            if ((this.MailboxManagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailboxManagedCompleted(this, new MailboxManagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MailboxDeleteOnDownload", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MailboxDeleteOnDownload(string SessionID, int MailboxID, bool DeleteOnDownload) {
            object[] results = this.Invoke("MailboxDeleteOnDownload", new object[] {
                        SessionID,
                        MailboxID,
                        DeleteOnDownload});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MailboxDeleteOnDownloadAsync(string SessionID, int MailboxID, bool DeleteOnDownload) {
            this.MailboxDeleteOnDownloadAsync(SessionID, MailboxID, DeleteOnDownload, null);
        }
        
        /// <remarks/>
        public void MailboxDeleteOnDownloadAsync(string SessionID, int MailboxID, bool DeleteOnDownload, object userState) {
            if ((this.MailboxDeleteOnDownloadOperationCompleted == null)) {
                this.MailboxDeleteOnDownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailboxDeleteOnDownloadOperationCompleted);
            }
            this.InvokeAsync("MailboxDeleteOnDownload", new object[] {
                        SessionID,
                        MailboxID,
                        DeleteOnDownload}, this.MailboxDeleteOnDownloadOperationCompleted, userState);
        }
        
        private void OnMailboxDeleteOnDownloadOperationCompleted(object arg) {
            if ((this.MailboxDeleteOnDownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailboxDeleteOnDownloadCompleted(this, new MailboxDeleteOnDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MailboxInfo", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MailboxIDInfo MailboxInfo(string SessionID, int MailboxID) {
            object[] results = this.Invoke("MailboxInfo", new object[] {
                        SessionID,
                        MailboxID});
            return ((MailboxIDInfo)(results[0]));
        }
        
        /// <remarks/>
        public void MailboxInfoAsync(string SessionID, int MailboxID) {
            this.MailboxInfoAsync(SessionID, MailboxID, null);
        }
        
        /// <remarks/>
        public void MailboxInfoAsync(string SessionID, int MailboxID, object userState) {
            if ((this.MailboxInfoOperationCompleted == null)) {
                this.MailboxInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailboxInfoOperationCompleted);
            }
            this.InvokeAsync("MailboxInfo", new object[] {
                        SessionID,
                        MailboxID}, this.MailboxInfoOperationCompleted, userState);
        }
        
        private void OnMailboxInfoOperationCompleted(object arg) {
            if ((this.MailboxInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailboxInfoCompleted(this, new MailboxInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MailboxName", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MailboxName(string SessionID, int MailboxID, string Name) {
            object[] results = this.Invoke("MailboxName", new object[] {
                        SessionID,
                        MailboxID,
                        Name});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MailboxNameAsync(string SessionID, int MailboxID, string Name) {
            this.MailboxNameAsync(SessionID, MailboxID, Name, null);
        }
        
        /// <remarks/>
        public void MailboxNameAsync(string SessionID, int MailboxID, string Name, object userState) {
            if ((this.MailboxNameOperationCompleted == null)) {
                this.MailboxNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailboxNameOperationCompleted);
            }
            this.InvokeAsync("MailboxName", new object[] {
                        SessionID,
                        MailboxID,
                        Name}, this.MailboxNameOperationCompleted, userState);
        }
        
        private void OnMailboxNameOperationCompleted(object arg) {
            if ((this.MailboxNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailboxNameCompleted(this, new MailboxNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MailboxSetContact", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MailboxSetContact(string SessionID, int MailboxID, int UserID, NetworkContactType ContactType) {
            object[] results = this.Invoke("MailboxSetContact", new object[] {
                        SessionID,
                        MailboxID,
                        UserID,
                        ContactType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MailboxSetContactAsync(string SessionID, int MailboxID, int UserID, NetworkContactType ContactType) {
            this.MailboxSetContactAsync(SessionID, MailboxID, UserID, ContactType, null);
        }
        
        /// <remarks/>
        public void MailboxSetContactAsync(string SessionID, int MailboxID, int UserID, NetworkContactType ContactType, object userState) {
            if ((this.MailboxSetContactOperationCompleted == null)) {
                this.MailboxSetContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailboxSetContactOperationCompleted);
            }
            this.InvokeAsync("MailboxSetContact", new object[] {
                        SessionID,
                        MailboxID,
                        UserID,
                        ContactType}, this.MailboxSetContactOperationCompleted, userState);
        }
        
        private void OnMailboxSetContactOperationCompleted(object arg) {
            if ((this.MailboxSetContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailboxSetContactCompleted(this, new MailboxSetContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MailboxX12Delimiters", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MailboxX12Delimiters(string SessionID, int MailboxID, byte SegTerm, byte ElmSep, byte SubElmSep) {
            object[] results = this.Invoke("MailboxX12Delimiters", new object[] {
                        SessionID,
                        MailboxID,
                        SegTerm,
                        ElmSep,
                        SubElmSep});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MailboxX12DelimitersAsync(string SessionID, int MailboxID, byte SegTerm, byte ElmSep, byte SubElmSep) {
            this.MailboxX12DelimitersAsync(SessionID, MailboxID, SegTerm, ElmSep, SubElmSep, null);
        }
        
        /// <remarks/>
        public void MailboxX12DelimitersAsync(string SessionID, int MailboxID, byte SegTerm, byte ElmSep, byte SubElmSep, object userState) {
            if ((this.MailboxX12DelimitersOperationCompleted == null)) {
                this.MailboxX12DelimitersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailboxX12DelimitersOperationCompleted);
            }
            this.InvokeAsync("MailboxX12Delimiters", new object[] {
                        SessionID,
                        MailboxID,
                        SegTerm,
                        ElmSep,
                        SubElmSep}, this.MailboxX12DelimitersOperationCompleted, userState);
        }
        
        private void OnMailboxX12DelimitersOperationCompleted(object arg) {
            if ((this.MailboxX12DelimitersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailboxX12DelimitersCompleted(this, new MailboxX12DelimitersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://os.ecgrid.io/MailboxInBoxTimeout", RequestNamespace="https://os.ecgrid.io/", ResponseNamespace="https://os.ecgrid.io/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MailboxInBoxTimeout(string SessionID, int MailboxID, short Minutes) {
            object[] results = this.Invoke("MailboxInBoxTimeout", new object[] {
                        SessionID,
                        MailboxID,
                        Minutes});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MailboxInBoxTimeoutAsync(string SessionID, int MailboxID, short Minutes) {
            this.MailboxInBoxTimeoutAsync(SessionID, MailboxID, Minutes, null);
        }
        
        /// <remarks/>
        public void MailboxInBoxTimeoutAsync(string SessionID, int MailboxID, short Minutes, object userState) {
            if ((this.MailboxInBoxTimeoutOperationCompleted == null)) {
                this.MailboxInBoxTimeoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMailboxInBoxTimeoutOperationCompleted);
            }
            this.InvokeAsync("MailboxInBoxTimeout", new object[] {
                        SessionID,
                        MailboxID,
                        Minutes}, this.MailboxInBoxTimeoutOperationCompleted, userState);
        }
        
        private void OnMailboxInBoxTimeoutOperationCompleted(object arg) {
            if ((this.MailboxInBoxTimeoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MailboxInBoxTimeoutCompleted(this, new MailboxInBoxTimeoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class CallBackQueueIDInfo {
        
        private int callBackQueueIDField;
        
        private System.DateTime dateField;
        
        private CallBackEventIDInfo callBackEventField;
        
        private short callsRemainingField;
        
        private System.DateTime nextCallField;
        
        private StatusCallBack statusField;
        
        private int objectIDField;
        
        private int userIDField;
        
        private bool testField;
        
        private CallBackLogInfo[] callBackLogField;
        
        /// <remarks/>
        public int CallBackQueueID {
            get {
                return this.callBackQueueIDField;
            }
            set {
                this.callBackQueueIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public CallBackEventIDInfo CallBackEvent {
            get {
                return this.callBackEventField;
            }
            set {
                this.callBackEventField = value;
            }
        }
        
        /// <remarks/>
        public short CallsRemaining {
            get {
                return this.callsRemainingField;
            }
            set {
                this.callsRemainingField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime NextCall {
            get {
                return this.nextCallField;
            }
            set {
                this.nextCallField = value;
            }
        }
        
        /// <remarks/>
        public StatusCallBack Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public int ObjectID {
            get {
                return this.objectIDField;
            }
            set {
                this.objectIDField = value;
            }
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public bool Test {
            get {
                return this.testField;
            }
            set {
                this.testField = value;
            }
        }
        
        /// <remarks/>
        public CallBackLogInfo[] CallBackLog {
            get {
                return this.callBackLogField;
            }
            set {
                this.callBackLogField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class CallBackEventIDInfo {
        
        private int callBackEventIDField;
        
        private int networkIDField;
        
        private int mailboxIDField;
        
        private int userIDField;
        
        private System.DateTime createdField;
        
        private System.DateTime modifiedField;
        
        private Objects systemObjectField;
        
        private short objectStatusField;
        
        private string statusCodeField;
        
        private Direction directionField;
        
        private short frequencyField;
        
        private short maxCallsField;
        
        private Status statusField;
        
        private string uRLField;
        
        private HTTPAuthInfo hTTPAuthenticationField;
        
        private CallBackQueueIDInfo[] callBackQueueField;
        
        /// <remarks/>
        public int CallBackEventID {
            get {
                return this.callBackEventIDField;
            }
            set {
                this.callBackEventIDField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkID {
            get {
                return this.networkIDField;
            }
            set {
                this.networkIDField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxID {
            get {
                return this.mailboxIDField;
            }
            set {
                this.mailboxIDField = value;
            }
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public Objects SystemObject {
            get {
                return this.systemObjectField;
            }
            set {
                this.systemObjectField = value;
            }
        }
        
        /// <remarks/>
        public short ObjectStatus {
            get {
                return this.objectStatusField;
            }
            set {
                this.objectStatusField = value;
            }
        }
        
        /// <remarks/>
        public string StatusCode {
            get {
                return this.statusCodeField;
            }
            set {
                this.statusCodeField = value;
            }
        }
        
        /// <remarks/>
        public Direction Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        public short Frequency {
            get {
                return this.frequencyField;
            }
            set {
                this.frequencyField = value;
            }
        }
        
        /// <remarks/>
        public short MaxCalls {
            get {
                return this.maxCallsField;
            }
            set {
                this.maxCallsField = value;
            }
        }
        
        /// <remarks/>
        public Status Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        /// <remarks/>
        public HTTPAuthInfo HTTPAuthentication {
            get {
                return this.hTTPAuthenticationField;
            }
            set {
                this.hTTPAuthenticationField = value;
            }
        }
        
        /// <remarks/>
        public CallBackQueueIDInfo[] CallBackQueue {
            get {
                return this.callBackQueueField;
            }
            set {
                this.callBackQueueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum Objects {
        
        /// <remarks/>
        System,
        
        /// <remarks/>
        User,
        
        /// <remarks/>
        Network,
        
        /// <remarks/>
        Mailbox,
        
        /// <remarks/>
        ECGridID,
        
        /// <remarks/>
        Interconnect,
        
        /// <remarks/>
        Migration,
        
        /// <remarks/>
        Parcel,
        
        /// <remarks/>
        Interchange,
        
        /// <remarks/>
        CarbonCopy,
        
        /// <remarks/>
        CallBackEvent,
        
        /// <remarks/>
        AS2,
        
        /// <remarks/>
        Comm,
        
        /// <remarks/>
        GISB,
        
        /// <remarks/>
        ParcelNotes,
        
        /// <remarks/>
        InterconnectNote,
        
        /// <remarks/>
        PriceList,
        
        /// <remarks/>
        Contract,
        
        /// <remarks/>
        Invoice,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum Direction {
        
        /// <remarks/>
        NoDir,
        
        /// <remarks/>
        OutBox,
        
        /// <remarks/>
        InBox,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum Status {
        
        /// <remarks/>
        Development,
        
        /// <remarks/>
        Active,
        
        /// <remarks/>
        Preproduction,
        
        /// <remarks/>
        Suspended,
        
        /// <remarks/>
        Terminated,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class HTTPAuthInfo {
        
        private HTTPAuthType typeField;
        
        private string userField;
        
        private string passwordField;
        
        /// <remarks/>
        public HTTPAuthType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum HTTPAuthType {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Basic,
        
        /// <remarks/>
        Digest,
        
        /// <remarks/>
        Certificate,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class StatusInfo {
        
        private short codeField;
        
        private string qualifierField;
        
        private string messageField;
        
        private string levelField;
        
        /// <remarks/>
        public short Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string Qualifier {
            get {
                return this.qualifierField;
            }
            set {
                this.qualifierField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string Level {
            get {
                return this.levelField;
            }
            set {
                this.levelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class KeyValue {
        
        private string keyField;
        
        private string valueField;
        
        private string metaField;
        
        private System.DateTime createdField;
        
        private System.DateTime expiresField;
        
        private KeyVisibility visibilityField;
        
        private int networkIDField;
        
        private int mailboxIDField;
        
        private int userIDField;
        
        private string sessionIDField;
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public string Meta {
            get {
                return this.metaField;
            }
            set {
                this.metaField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Expires {
            get {
                return this.expiresField;
            }
            set {
                this.expiresField = value;
            }
        }
        
        /// <remarks/>
        public KeyVisibility Visibility {
            get {
                return this.visibilityField;
            }
            set {
                this.visibilityField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkID {
            get {
                return this.networkIDField;
            }
            set {
                this.networkIDField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxID {
            get {
                return this.mailboxIDField;
            }
            set {
                this.mailboxIDField = value;
            }
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string SessionID {
            get {
                return this.sessionIDField;
            }
            set {
                this.sessionIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum KeyVisibility {
        
        /// <remarks/>
        Private,
        
        /// <remarks/>
        Shared,
        
        /// <remarks/>
        Public,
        
        /// <remarks/>
        Session,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class SessionEvents {
        
        private APICall aPICallField;
        
        private System.DateTime dateField;
        
        private int millisecondsField;
        
        private string ipField;
        
        private RetCode returnCodeField;
        
        private string commentField;
        
        /// <remarks/>
        public APICall APICall {
            get {
                return this.aPICallField;
            }
            set {
                this.aPICallField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public int Milliseconds {
            get {
                return this.millisecondsField;
            }
            set {
                this.millisecondsField = value;
            }
        }
        
        /// <remarks/>
        public string ip {
            get {
                return this.ipField;
            }
            set {
                this.ipField = value;
            }
        }
        
        /// <remarks/>
        public RetCode ReturnCode {
            get {
                return this.returnCodeField;
            }
            set {
                this.returnCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum APICall {
        
        /// <remarks/>
        GenerateAPIKey,
        
        /// <remarks/>
        Login,
        
        /// <remarks/>
        Logout,
        
        /// <remarks/>
        ChangePassword,
        
        /// <remarks/>
        WhoAmI,
        
        /// <remarks/>
        UserAdd,
        
        /// <remarks/>
        UserAddEx,
        
        /// <remarks/>
        UserInfo,
        
        /// <remarks/>
        UserUpdate,
        
        /// <remarks/>
        UserActivate,
        
        /// <remarks/>
        UserSuspend,
        
        /// <remarks/>
        UserTerminate,
        
        /// <remarks/>
        UserReset,
        
        /// <remarks/>
        UserList,
        
        /// <remarks/>
        UserListEx,
        
        /// <remarks/>
        UserPassword,
        
        /// <remarks/>
        SessionLog,
        
        /// <remarks/>
        SessionLogEx,
        
        /// <remarks/>
        SessionLogCurrent,
        
        /// <remarks/>
        KeySave,
        
        /// <remarks/>
        KeyGet,
        
        /// <remarks/>
        KeyList,
        
        /// <remarks/>
        KeyRemove,
        
        /// <remarks/>
        UserSetNetworkMailbox,
        
        /// <remarks/>
        UserSetAuthLevel,
        
        /// <remarks/>
        UserListLockedOut,
        
        /// <remarks/>
        UserListLockedOutEx,
        
        /// <remarks/>
        UserResetAll,
        
        /// <remarks/>
        SetLocalTime,
        
        /// <remarks/>
        TerminateAPIKey,
        
        /// <remarks/>
        GeneratePassword,
        
        /// <remarks/>
        UserSendSMS,
        
        /// <remarks/>
        UserGetAPIKey,
        
        /// <remarks/>
        UserInfoByLogin,
        
        /// <remarks/>
        StatusList,
        
        /// <remarks/>
        UserSetMaxSessions,
        
        /// <remarks/>
        NetworkInfo,
        
        /// <remarks/>
        NetworkList,
        
        /// <remarks/>
        NetworkStatusSummary,
        
        /// <remarks/>
        NetworkOutageList,
        
        /// <remarks/>
        NetworkStart,
        
        /// <remarks/>
        NetworkStop,
        
        /// <remarks/>
        NetworkRestart,
        
        /// <remarks/>
        NetworkAdd,
        
        /// <remarks/>
        NetworkOwnerContact,
        
        /// <remarks/>
        NetworkErrorsContact,
        
        /// <remarks/>
        NetworkInterconnectsContact,
        
        /// <remarks/>
        NetworkNoticesContact,
        
        /// <remarks/>
        NetworkBillingContact,
        
        /// <remarks/>
        NetworkReportsContact,
        
        /// <remarks/>
        NetworkSetContact,
        
        /// <remarks/>
        NetworkGetContact,
        
        /// <remarks/>
        NetworkSetWebsite,
        
        /// <remarks/>
        NetworkSetStatus,
        
        /// <remarks/>
        NetworkInfoWithLog,
        
        /// <remarks/>
        NetworkBackupAllConfigs,
        
        /// <remarks/>
        NetworkX12Delimiters,
        
        /// <remarks/>
        NetworkCheckIn,
        
        /// <remarks/>
        NetworkRootDeleteOnDownload,
        
        /// <remarks/>
        NetworkUpdate,
        
        /// <remarks/>
        NetworkPause,
        
        /// <remarks/>
        MailboxAdd,
        
        /// <remarks/>
        MailboxAddEx,
        
        /// <remarks/>
        MailboxActivate,
        
        /// <remarks/>
        MailboxSuspend,
        
        /// <remarks/>
        MailboxTerminate,
        
        /// <remarks/>
        MailboxInfo,
        
        /// <remarks/>
        MailboxName,
        
        /// <remarks/>
        MailboxErrorsContact,
        
        /// <remarks/>
        MailboxInterconnectsContact,
        
        /// <remarks/>
        MailboxNoticesContact,
        
        /// <remarks/>
        MailboxX12Delimiters,
        
        /// <remarks/>
        MailboxInBoxTimeout,
        
        /// <remarks/>
        MailboxList,
        
        /// <remarks/>
        MailboxListEx,
        
        /// <remarks/>
        MailboxOwnerContact,
        
        /// <remarks/>
        MailboxManaged,
        
        /// <remarks/>
        MailboxDescription,
        
        /// <remarks/>
        MailboxUse,
        
        /// <remarks/>
        MailboxSetContact,
        
        /// <remarks/>
        MailboxDeleteOnDownload,
        
        /// <remarks/>
        TPAdd,
        
        /// <remarks/>
        TPAddVAN,
        
        /// <remarks/>
        TPAddEx,
        
        /// <remarks/>
        TPMove,
        
        /// <remarks/>
        TPMoveEx,
        
        /// <remarks/>
        TPUpdateDescription,
        
        /// <remarks/>
        TPActivate,
        
        /// <remarks/>
        TPSuspend,
        
        /// <remarks/>
        TPTerminate,
        
        /// <remarks/>
        TPInfo,
        
        /// <remarks/>
        TPSearch,
        
        /// <remarks/>
        TPSearchEx,
        
        /// <remarks/>
        TPList,
        
        /// <remarks/>
        TPListEx,
        
        /// <remarks/>
        TPFind,
        
        /// <remarks/>
        TPFindEx,
        
        /// <remarks/>
        TPDataEMail,
        
        /// <remarks/>
        TPSetMailboxDefault,
        
        /// <remarks/>
        TPGetMailboxDefault,
        
        /// <remarks/>
        TPEMailX400Format,
        
        /// <remarks/>
        TPMoveMailbox,
        
        /// <remarks/>
        TPSetRoutingGroup,
        
        /// <remarks/>
        TPListExPaged,
        
        /// <remarks/>
        TPListByOwner,
        
        /// <remarks/>
        TPSetOwner,
        
        /// <remarks/>
        InterconnectAdd,
        
        /// <remarks/>
        InterconnectUpdate,
        
        /// <remarks/>
        InterconnectNote,
        
        /// <remarks/>
        InterconnectCancel,
        
        /// <remarks/>
        InterconnectInfo,
        
        /// <remarks/>
        InterconnectNoteList,
        
        /// <remarks/>
        InterconnectListByECGridID,
        
        /// <remarks/>
        InterconnectListByStatus,
        
        /// <remarks/>
        InterconnectListByStatusEx,
        
        /// <remarks/>
        InterconnectAssignNetOps,
        
        /// <remarks/>
        InterconnectCount,
        
        /// <remarks/>
        InterconnectCountEx,
        
        /// <remarks/>
        InterconnectInfoGUID,
        
        /// <remarks/>
        MigrationAdd,
        
        /// <remarks/>
        MigrationAddEx,
        
        /// <remarks/>
        MigrationSendRequest,
        
        /// <remarks/>
        MigrationUpdate,
        
        /// <remarks/>
        MigrationStatus,
        
        /// <remarks/>
        MigrationInfo,
        
        /// <remarks/>
        MigrationList,
        
        /// <remarks/>
        MigrationListEx,
        
        /// <remarks/>
        MigrationECGridIDAdd,
        
        /// <remarks/>
        MigrationECGridIDRemove,
        
        /// <remarks/>
        MigrationECGridIDStatus,
        
        /// <remarks/>
        MigrationECGridIDNote,
        
        /// <remarks/>
        CarbonCopyAdd,
        
        /// <remarks/>
        CarbonCopyAddEx,
        
        /// <remarks/>
        CarbonCopyActivate,
        
        /// <remarks/>
        CarbonCopySuspend,
        
        /// <remarks/>
        CarbonCopyTerminate,
        
        /// <remarks/>
        CarbonCopyInfo,
        
        /// <remarks/>
        CarbonCopyList,
        
        /// <remarks/>
        CarbonCopyListEx,
        
        /// <remarks/>
        ParcelInBox,
        
        /// <remarks/>
        ParcelInBoxEx,
        
        /// <remarks/>
        ParcelDownload,
        
        /// <remarks/>
        ParcelDownloadInner,
        
        /// <remarks/>
        ParcelDownloadConfirm,
        
        /// <remarks/>
        ParcelUpload,
        
        /// <remarks/>
        ParcelUploadExA,
        
        /// <remarks/>
        ParcelInfo,
        
        /// <remarks/>
        ParcelMainfest,
        
        /// <remarks/>
        ParcelInterchangeManifest,
        
        /// <remarks/>
        ParcelNoteList,
        
        /// <remarks/>
        ParcelInBoxArchive,
        
        /// <remarks/>
        ParcelInBoxArchiveEx,
        
        /// <remarks/>
        ParcelOutBoxArchive,
        
        /// <remarks/>
        ParcelOutBoxArchiveEx,
        
        /// <remarks/>
        ParcelOutBoxError,
        
        /// <remarks/>
        ParcelOutBoxErrorEx,
        
        /// <remarks/>
        InterchangeInBox,
        
        /// <remarks/>
        InterchangeInBoxEx,
        
        /// <remarks/>
        InterchangeOutBox,
        
        /// <remarks/>
        InterchangeOutBoxEx,
        
        /// <remarks/>
        InterchangeHeaderInfo,
        
        /// <remarks/>
        ParcelDownloadReset,
        
        /// <remarks/>
        InterchangeOutBoxNoRoute,
        
        /// <remarks/>
        InterchangeOutBoxNoRouteEx,
        
        /// <remarks/>
        ParcelUploadGZip,
        
        /// <remarks/>
        InterchangeInfo,
        
        /// <remarks/>
        InterchangeResend,
        
        /// <remarks/>
        ParcelUploadGZipEx,
        
        /// <remarks/>
        ParcelUploadEx,
        
        /// <remarks/>
        ParcelSetMailbagControlID,
        
        /// <remarks/>
        ParcelUpdateStatus,
        
        /// <remarks/>
        ParcelUpdateLocalStatus,
        
        /// <remarks/>
        ParcelUploadMft,
        
        /// <remarks/>
        ParcelUploadDirectedGZip,
        
        /// <remarks/>
        ParcelDownloadConfirmPendingAck,
        
        /// <remarks/>
        InterchangeHeaderInfoB,
        
        /// <remarks/>
        ParcelDownloadGZip,
        
        /// <remarks/>
        ParcelDownloadCancel,
        
        /// <remarks/>
        ParcelTest,
        
        /// <remarks/>
        InterchangeManifest,
        
        /// <remarks/>
        ParcelOutBoxInProcess,
        
        /// <remarks/>
        ParcelOutBoxInProcessEx,
        
        /// <remarks/>
        ParcelResend,
        
        /// <remarks/>
        InterchangeCancel,
        
        /// <remarks/>
        ParcelAcknowledgmentNote,
        
        /// <remarks/>
        InterchangeOutBoxPending,
        
        /// <remarks/>
        InterchangeOutBoxPendingEx,
        
        /// <remarks/>
        InterchangeInBoxPending,
        
        /// <remarks/>
        InterchangeInBoxPendingEx,
        
        /// <remarks/>
        InterchangeInBoxArchive,
        
        /// <remarks/>
        InterchangeInBoxArchiveEx,
        
        /// <remarks/>
        InterchangeOutBoxArchive,
        
        /// <remarks/>
        InterchangeOutBoxArchiveEx,
        
        /// <remarks/>
        ParcelInBoxArchiveDescEx,
        
        /// <remarks/>
        ParcelOutBoxArchiveDescEx,
        
        /// <remarks/>
        ParcelArchive,
        
        /// <remarks/>
        ParcelArchivePending,
        
        /// <remarks/>
        InterchangeArchive,
        
        /// <remarks/>
        InterchangeArchivePending,
        
        /// <remarks/>
        ParcelDownloadS3,
        
        /// <remarks/>
        ParcelInBoxExShort,
        
        /// <remarks/>
        ParcelInBoxArchiveExShort,
        
        /// <remarks/>
        ParcelOutBoxArchiveExShort,
        
        /// <remarks/>
        InterchangeInBoxBlocked,
        
        /// <remarks/>
        InterchangeInBoxBlockedEx,
        
        /// <remarks/>
        InterchangeOutBoxBlocked,
        
        /// <remarks/>
        InterchangeOutBoxBlockedEx,
        
        /// <remarks/>
        ParcelFindMailbagControlID,
        
        /// <remarks/>
        ParcelUploadA,
        
        /// <remarks/>
        ParcelUploadMftA,
        
        /// <remarks/>
        ParcelDownloadA,
        
        /// <remarks/>
        ParcelDownloadNoUpdate,
        
        /// <remarks/>
        ParcelDownloadNoUpdateA,
        
        /// <remarks/>
        ParcelUploadExAdmin,
        
        /// <remarks/>
        ParcelUploadMftAdmin,
        
        /// <remarks/>
        ParcelFindMailbagControlIDTo,
        
        /// <remarks/>
        InterchangeCarbonCopy,
        
        /// <remarks/>
        CallBackAdd,
        
        /// <remarks/>
        CallBackActivate,
        
        /// <remarks/>
        CallBackSuspend,
        
        /// <remarks/>
        CallBackTerminate,
        
        /// <remarks/>
        CallBackList,
        
        /// <remarks/>
        CallBackListEx,
        
        /// <remarks/>
        CallBackEventList,
        
        /// <remarks/>
        CallBackEventListEx,
        
        /// <remarks/>
        CallBackInvoke,
        
        /// <remarks/>
        CallBackTest,
        
        /// <remarks/>
        CallBackPendingList,
        
        /// <remarks/>
        CallBackPendingListEx,
        
        /// <remarks/>
        CallBackQueueInfo,
        
        /// <remarks/>
        CallBackEventInfo,
        
        /// <remarks/>
        CallBackAddEx,
        
        /// <remarks/>
        CallBackFailedList,
        
        /// <remarks/>
        CallBackFailedListEx,
        
        /// <remarks/>
        CallBackEventSetStatus,
        
        /// <remarks/>
        CallBackPendingListExA,
        
        /// <remarks/>
        ReportMonthly,
        
        /// <remarks/>
        ReportMonthlyEx,
        
        /// <remarks/>
        ReportTrafficStats,
        
        /// <remarks/>
        ReportTrafficStatsEx,
        
        /// <remarks/>
        ReportInstantStats,
        
        /// <remarks/>
        ReportInstantStatsEx,
        
        /// <remarks/>
        ReportMailboxStats,
        
        /// <remarks/>
        ReportMailboxStatsEx,
        
        /// <remarks/>
        ReportInterchangeStats,
        
        /// <remarks/>
        ReportInterchangeStatsEx,
        
        /// <remarks/>
        ReportAdHoc,
        
        /// <remarks/>
        ReportTagVerifyJson,
        
        /// <remarks/>
        ReportMailboxInterchangeStats,
        
        /// <remarks/>
        ReportMailboxInterchangeStatsEx,
        
        /// <remarks/>
        AS2Add,
        
        /// <remarks/>
        AS2Update,
        
        /// <remarks/>
        AS2Activate,
        
        /// <remarks/>
        AS2Suspend,
        
        /// <remarks/>
        AS2Terminate,
        
        /// <remarks/>
        AS2CertAddPublic,
        
        /// <remarks/>
        AS2CertAddPrivate,
        
        /// <remarks/>
        AS2CertTerminate,
        
        /// <remarks/>
        AS2Find,
        
        /// <remarks/>
        AS2List,
        
        /// <remarks/>
        AS2ListEx,
        
        /// <remarks/>
        AS2Info,
        
        /// <remarks/>
        AS2CertCreatePrivate,
        
        /// <remarks/>
        AS2Pair,
        
        /// <remarks/>
        AS2DefaultMailbox,
        
        /// <remarks/>
        AS2SetPair,
        
        /// <remarks/>
        AS2SetStatus,
        
        /// <remarks/>
        AS2CertRenewPrivate,
        
        /// <remarks/>
        AS2PairTest,
        
        /// <remarks/>
        AS2CertsExpiring,
        
        /// <remarks/>
        GISBAdd,
        
        /// <remarks/>
        GISBUpdate,
        
        /// <remarks/>
        GISBActivate,
        
        /// <remarks/>
        GISBSuspend,
        
        /// <remarks/>
        GISBTerminate,
        
        /// <remarks/>
        GISBKeyAdd,
        
        /// <remarks/>
        GISBKeyTerminate,
        
        /// <remarks/>
        GISBFind,
        
        /// <remarks/>
        GISBList,
        
        /// <remarks/>
        GISBListEx,
        
        /// <remarks/>
        GISBInfo,
        
        /// <remarks/>
        CertificateAddPublic,
        
        /// <remarks/>
        CertificateAddPrivate,
        
        /// <remarks/>
        CertificateCreatePrivate,
        
        /// <remarks/>
        CertificateSetUsageDates,
        
        /// <remarks/>
        CertificateTerminate,
        
        /// <remarks/>
        CertificateAddPublicA,
        
        /// <remarks/>
        CertificateAddPrivateA,
        
        /// <remarks/>
        CertificateRenewPrivate,
        
        /// <remarks/>
        CommAdd,
        
        /// <remarks/>
        CommUpdate,
        
        /// <remarks/>
        CommSetStatus,
        
        /// <remarks/>
        CommFind,
        
        /// <remarks/>
        CommList,
        
        /// <remarks/>
        CommListEx,
        
        /// <remarks/>
        CommInfo,
        
        /// <remarks/>
        CommPair,
        
        /// <remarks/>
        CommSetPair,
        
        /// <remarks/>
        CommDefaultMailbox,
        
        /// <remarks/>
        ContractInfo,
        
        /// <remarks/>
        ContractList,
        
        /// <remarks/>
        ContractListEx,
        
        /// <remarks/>
        ContractAdd,
        
        /// <remarks/>
        ContractActivate,
        
        /// <remarks/>
        ContractSuspend,
        
        /// <remarks/>
        ContractTerminate,
        
        /// <remarks/>
        ContractExpiring,
        
        /// <remarks/>
        ContractSet,
        
        /// <remarks/>
        ContractSetEx,
        
        /// <remarks/>
        PricelistInfo,
        
        /// <remarks/>
        PricelistAdd,
        
        /// <remarks/>
        PricelistLineAdd,
        
        /// <remarks/>
        PricelistLineDelete,
        
        /// <remarks/>
        InvoiceCreate,
        
        /// <remarks/>
        InvoiceInfo,
        
        /// <remarks/>
        InvoiceList,
        
        /// <remarks/>
        InvoiceSetStatus,
        
        /// <remarks/>
        InvoiceCalculateLineItem,
        
        /// <remarks/>
        RouterInProcessPending,
        
        /// <remarks/>
        RouterInProcess,
        
        /// <remarks/>
        RouterToProcess,
        
        /// <remarks/>
        RouterOutProcess,
        
        /// <remarks/>
        RouterReprocessInterchange,
        
        /// <remarks/>
        RouterAlternateDirectoryDateGet,
        
        /// <remarks/>
        RouterAlternateDirectoryDateSet,
        
        /// <remarks/>
        RouterInterchangeSuspended,
        
        /// <remarks/>
        RouterSyncToParcel,
        
        /// <remarks/>
        GatewayOutProcess,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum RetCode {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        SessionTimeout,
        
        /// <remarks/>
        AccessDenied,
        
        /// <remarks/>
        NotFound,
        
        /// <remarks/>
        InvalidID,
        
        /// <remarks/>
        Duplicate,
        
        /// <remarks/>
        IDExistsOnNetwork,
        
        /// <remarks/>
        InvalidDataType,
        
        /// <remarks/>
        InvalidDataLength,
        
        /// <remarks/>
        DataError,
        
        /// <remarks/>
        SQLError,
        
        /// <remarks/>
        InternalError,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class SessionLogInfo {
        
        private string sessionIDField;
        
        private System.DateTime startTimeField;
        
        private System.DateTime endTimeField;
        
        private System.DateTime expiresField;
        
        private int networkIDField;
        
        private int mailboxIDField;
        
        private int userIDField;
        
        private SessionStatus statusField;
        
        private string versionField;
        
        private SessionEvents[] eventsField;
        
        /// <remarks/>
        public string SessionID {
            get {
                return this.sessionIDField;
            }
            set {
                this.sessionIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Expires {
            get {
                return this.expiresField;
            }
            set {
                this.expiresField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkID {
            get {
                return this.networkIDField;
            }
            set {
                this.networkIDField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxID {
            get {
                return this.mailboxIDField;
            }
            set {
                this.mailboxIDField = value;
            }
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public SessionStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public SessionEvents[] Events {
            get {
                return this.eventsField;
            }
            set {
                this.eventsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum SessionStatus {
        
        /// <remarks/>
        Open,
        
        /// <remarks/>
        Closed,
        
        /// <remarks/>
        Expired,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class SessionInfo {
        
        private string eCGridOSVersionField;
        
        private string sessionIDField;
        
        private int sessionEventIDField;
        
        private int userIDField;
        
        private string loginNameField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string companyField;
        
        private string eMailField;
        
        private string phoneField;
        
        private float timeZoneOffsetField;
        
        private AuthLevel authLevelField;
        
        private System.DateTime lastLoginField;
        
        private short openSessionsField;
        
        private short timeOutField;
        
        private int networkIDField;
        
        private int mailboxIDField;
        
        private string ipField;
        
        /// <remarks/>
        public string ECGridOSVersion {
            get {
                return this.eCGridOSVersionField;
            }
            set {
                this.eCGridOSVersionField = value;
            }
        }
        
        /// <remarks/>
        public string SessionID {
            get {
                return this.sessionIDField;
            }
            set {
                this.sessionIDField = value;
            }
        }
        
        /// <remarks/>
        public int SessionEventID {
            get {
                return this.sessionEventIDField;
            }
            set {
                this.sessionEventIDField = value;
            }
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string LoginName {
            get {
                return this.loginNameField;
            }
            set {
                this.loginNameField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        public string EMail {
            get {
                return this.eMailField;
            }
            set {
                this.eMailField = value;
            }
        }
        
        /// <remarks/>
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public float TimeZoneOffset {
            get {
                return this.timeZoneOffsetField;
            }
            set {
                this.timeZoneOffsetField = value;
            }
        }
        
        /// <remarks/>
        public AuthLevel AuthLevel {
            get {
                return this.authLevelField;
            }
            set {
                this.authLevelField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastLogin {
            get {
                return this.lastLoginField;
            }
            set {
                this.lastLoginField = value;
            }
        }
        
        /// <remarks/>
        public short OpenSessions {
            get {
                return this.openSessionsField;
            }
            set {
                this.openSessionsField = value;
            }
        }
        
        /// <remarks/>
        public short TimeOut {
            get {
                return this.timeOutField;
            }
            set {
                this.timeOutField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkID {
            get {
                return this.networkIDField;
            }
            set {
                this.networkIDField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxID {
            get {
                return this.mailboxIDField;
            }
            set {
                this.mailboxIDField = value;
            }
        }
        
        /// <remarks/>
        public string ip {
            get {
                return this.ipField;
            }
            set {
                this.ipField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum AuthLevel {
        
        /// <remarks/>
        NoChange,
        
        /// <remarks/>
        Root,
        
        /// <remarks/>
        TechOps,
        
        /// <remarks/>
        NetOps,
        
        /// <remarks/>
        NetworkAdmin,
        
        /// <remarks/>
        NetworkUser,
        
        /// <remarks/>
        MailboxAdmin,
        
        /// <remarks/>
        MailboxUser,
        
        /// <remarks/>
        TPUser,
        
        /// <remarks/>
        General,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class FileInfo {
        
        private long parcelIDField;
        
        private string fileNameField;
        
        private System.DateTime fileDateField;
        
        private int bytesField;
        
        private EDIStandard standardField;
        
        private byte[] contentField;
        
        private string contentBase64StringField;
        
        private bool routerArchiveField;
        
        /// <remarks/>
        public long ParcelID {
            get {
                return this.parcelIDField;
            }
            set {
                this.parcelIDField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime FileDate {
            get {
                return this.fileDateField;
            }
            set {
                this.fileDateField = value;
            }
        }
        
        /// <remarks/>
        public int Bytes {
            get {
                return this.bytesField;
            }
            set {
                this.bytesField = value;
            }
        }
        
        /// <remarks/>
        public EDIStandard Standard {
            get {
                return this.standardField;
            }
            set {
                this.standardField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
            }
        }
        
        /// <remarks/>
        public string ContentBase64String {
            get {
                return this.contentBase64StringField;
            }
            set {
                this.contentBase64StringField = value;
            }
        }
        
        /// <remarks/>
        public bool routerArchive {
            get {
                return this.routerArchiveField;
            }
            set {
                this.routerArchiveField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum EDIStandard {
        
        /// <remarks/>
        X12,
        
        /// <remarks/>
        EDIFACT,
        
        /// <remarks/>
        TRADACOMS,
        
        /// <remarks/>
        VDA,
        
        /// <remarks/>
        XML,
        
        /// <remarks/>
        TXT,
        
        /// <remarks/>
        PDF,
        
        /// <remarks/>
        Binary,
        
        /// <remarks/>
        PEPPOL,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class CarbonCopyIDInfo {
        
        private int carbonCopyIDField;
        
        private int networkIDField;
        
        private int mailboxIDField;
        
        private System.DateTime createdField;
        
        private System.DateTime modifiedField;
        
        private Status statusField;
        
        private ECGridIDInfo originalFromField;
        
        private ECGridIDInfo originalToField;
        
        private ECGridIDInfo cCFromField;
        
        private ECGridIDInfo cCToField;
        
        private string gSFromField;
        
        private string gSToField;
        
        private string transactionSetField;
        
        /// <remarks/>
        public int CarbonCopyID {
            get {
                return this.carbonCopyIDField;
            }
            set {
                this.carbonCopyIDField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkID {
            get {
                return this.networkIDField;
            }
            set {
                this.networkIDField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxID {
            get {
                return this.mailboxIDField;
            }
            set {
                this.mailboxIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public Status Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public ECGridIDInfo OriginalFrom {
            get {
                return this.originalFromField;
            }
            set {
                this.originalFromField = value;
            }
        }
        
        /// <remarks/>
        public ECGridIDInfo OriginalTo {
            get {
                return this.originalToField;
            }
            set {
                this.originalToField = value;
            }
        }
        
        /// <remarks/>
        public ECGridIDInfo CCFrom {
            get {
                return this.cCFromField;
            }
            set {
                this.cCFromField = value;
            }
        }
        
        /// <remarks/>
        public ECGridIDInfo CCTo {
            get {
                return this.cCToField;
            }
            set {
                this.cCToField = value;
            }
        }
        
        /// <remarks/>
        public string GSFrom {
            get {
                return this.gSFromField;
            }
            set {
                this.gSFromField = value;
            }
        }
        
        /// <remarks/>
        public string GSTo {
            get {
                return this.gSToField;
            }
            set {
                this.gSToField = value;
            }
        }
        
        /// <remarks/>
        public string TransactionSet {
            get {
                return this.transactionSetField;
            }
            set {
                this.transactionSetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class ECGridIDInfo {
        
        private int eCGridIDField;
        
        private int networkIDField;
        
        private string networkNameField;
        
        private int mailboxIDField;
        
        private string mailboxNameField;
        
        private string qualifierField;
        
        private string idField;
        
        private string descriptionField;
        
        private string dataEMailField;
        
        private bool mailboxDefaultField;
        
        private StatusECGridID statusField;
        
        private UseType useTypeField;
        
        private UserIDInfo ownerField;
        
        private ECGridOwnerInfo ownerInfoField;
        
        private MailboxConfig configField;
        
        /// <remarks/>
        public int ECGridID {
            get {
                return this.eCGridIDField;
            }
            set {
                this.eCGridIDField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkID {
            get {
                return this.networkIDField;
            }
            set {
                this.networkIDField = value;
            }
        }
        
        /// <remarks/>
        public string NetworkName {
            get {
                return this.networkNameField;
            }
            set {
                this.networkNameField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxID {
            get {
                return this.mailboxIDField;
            }
            set {
                this.mailboxIDField = value;
            }
        }
        
        /// <remarks/>
        public string MailboxName {
            get {
                return this.mailboxNameField;
            }
            set {
                this.mailboxNameField = value;
            }
        }
        
        /// <remarks/>
        public string Qualifier {
            get {
                return this.qualifierField;
            }
            set {
                this.qualifierField = value;
            }
        }
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string DataEMail {
            get {
                return this.dataEMailField;
            }
            set {
                this.dataEMailField = value;
            }
        }
        
        /// <remarks/>
        public bool MailboxDefault {
            get {
                return this.mailboxDefaultField;
            }
            set {
                this.mailboxDefaultField = value;
            }
        }
        
        /// <remarks/>
        public StatusECGridID Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public UseType UseType {
            get {
                return this.useTypeField;
            }
            set {
                this.useTypeField = value;
            }
        }
        
        /// <remarks/>
        public UserIDInfo Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        public ECGridOwnerInfo OwnerInfo {
            get {
                return this.ownerInfoField;
            }
            set {
                this.ownerInfoField = value;
            }
        }
        
        /// <remarks/>
        public MailboxConfig Config {
            get {
                return this.configField;
            }
            set {
                this.configField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum StatusECGridID {
        
        /// <remarks/>
        Active,
        
        /// <remarks/>
        AutoRoute,
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Suspended,
        
        /// <remarks/>
        Terminated,
        
        /// <remarks/>
        Duplicate,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum UseType {
        
        /// <remarks/>
        Undefined,
        
        /// <remarks/>
        Test,
        
        /// <remarks/>
        Production,
        
        /// <remarks/>
        TestAndProduction,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class UserIDInfo {
        
        private int userIDField;
        
        private string loginNameField;
        
        private string recoveryQuestionField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string companyField;
        
        private string eMailField;
        
        private string phoneField;
        
        private string cellPhoneField;
        
        private CellCarrier cellCarrierField;
        
        private short timeZoneOffsetField;
        
        private int networkIDField;
        
        private int mailboxIDField;
        
        private AuthLevel authLevelField;
        
        private System.DateTime createdField;
        
        private System.DateTime modifiedField;
        
        private System.DateTime lastLoginField;
        
        private Status statusField;
        
        private bool lockedOutField;
        
        private short openSessionsField;
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string LoginName {
            get {
                return this.loginNameField;
            }
            set {
                this.loginNameField = value;
            }
        }
        
        /// <remarks/>
        public string RecoveryQuestion {
            get {
                return this.recoveryQuestionField;
            }
            set {
                this.recoveryQuestionField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        public string EMail {
            get {
                return this.eMailField;
            }
            set {
                this.eMailField = value;
            }
        }
        
        /// <remarks/>
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public string CellPhone {
            get {
                return this.cellPhoneField;
            }
            set {
                this.cellPhoneField = value;
            }
        }
        
        /// <remarks/>
        public CellCarrier CellCarrier {
            get {
                return this.cellCarrierField;
            }
            set {
                this.cellCarrierField = value;
            }
        }
        
        /// <remarks/>
        public short TimeZoneOffset {
            get {
                return this.timeZoneOffsetField;
            }
            set {
                this.timeZoneOffsetField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkID {
            get {
                return this.networkIDField;
            }
            set {
                this.networkIDField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxID {
            get {
                return this.mailboxIDField;
            }
            set {
                this.mailboxIDField = value;
            }
        }
        
        /// <remarks/>
        public AuthLevel AuthLevel {
            get {
                return this.authLevelField;
            }
            set {
                this.authLevelField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastLogin {
            get {
                return this.lastLoginField;
            }
            set {
                this.lastLoginField = value;
            }
        }
        
        /// <remarks/>
        public Status Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public bool LockedOut {
            get {
                return this.lockedOutField;
            }
            set {
                this.lockedOutField = value;
            }
        }
        
        /// <remarks/>
        public short OpenSessions {
            get {
                return this.openSessionsField;
            }
            set {
                this.openSessionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum CellCarrier {
        
        /// <remarks/>
        NoChange,
        
        /// <remarks/>
        Undefined,
        
        /// <remarks/>
        ATTCingular,
        
        /// <remarks/>
        Verizon,
        
        /// <remarks/>
        TMobile,
        
        /// <remarks/>
        SprintPCS,
        
        /// <remarks/>
        Nextel,
        
        /// <remarks/>
        Alltel,
        
        /// <remarks/>
        VirginMobile,
        
        /// <remarks/>
        ATTPreCingular,
        
        /// <remarks/>
        ATT,
        
        /// <remarks/>
        BoostMobile,
        
        /// <remarks/>
        USCellular,
        
        /// <remarks/>
        MetroPCS,
        
        /// <remarks/>
        Powertel,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class ECGridOwnerInfo {
        
        private int networkIDField;
        
        private string networkNameField;
        
        private int mailboxIDField;
        
        private string mailboxNameField;
        
        private System.DateTime createdField;
        
        private System.DateTime modifiedField;
        
        private System.DateTime effectiveField;
        
        private System.DateTime expiresField;
        
        private System.DateTime lastTrafficField;
        
        private RoutingGroup routingGroupField;
        
        /// <remarks/>
        public int NetworkID {
            get {
                return this.networkIDField;
            }
            set {
                this.networkIDField = value;
            }
        }
        
        /// <remarks/>
        public string NetworkName {
            get {
                return this.networkNameField;
            }
            set {
                this.networkNameField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxID {
            get {
                return this.mailboxIDField;
            }
            set {
                this.mailboxIDField = value;
            }
        }
        
        /// <remarks/>
        public string MailboxName {
            get {
                return this.mailboxNameField;
            }
            set {
                this.mailboxNameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Effective {
            get {
                return this.effectiveField;
            }
            set {
                this.effectiveField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Expires {
            get {
                return this.expiresField;
            }
            set {
                this.expiresField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastTraffic {
            get {
                return this.lastTrafficField;
            }
            set {
                this.lastTrafficField = value;
            }
        }
        
        /// <remarks/>
        public RoutingGroup RoutingGroup {
            get {
                return this.routingGroupField;
            }
            set {
                this.routingGroupField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum RoutingGroup {
        
        /// <remarks/>
        ProductionA,
        
        /// <remarks/>
        ProductionB,
        
        /// <remarks/>
        Migration1,
        
        /// <remarks/>
        Migration2,
        
        /// <remarks/>
        NetOpsOnly1,
        
        /// <remarks/>
        NetOpsOnly2,
        
        /// <remarks/>
        ManagedFileTransfer,
        
        /// <remarks/>
        SuperHub,
        
        /// <remarks/>
        Test,
        
        /// <remarks/>
        Suspense1,
        
        /// <remarks/>
        Suspense2,
        
        /// <remarks/>
        Suspense3,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class MailboxConfig {
        
        private short inBoxTimeoutField;
        
        private byte segTermField;
        
        private byte elmSepField;
        
        private byte subElmSepField;
        
        private short eBCDICFilterField;
        
        private bool fTPasciiFilterField;
        
        private bool lowPassFilterField;
        
        private bool mailbagPassThroughField;
        
        private bool deleteOnDownloadField;
        
        private bool stripDirectedEnvelopeField;
        
        /// <remarks/>
        public short InBoxTimeout {
            get {
                return this.inBoxTimeoutField;
            }
            set {
                this.inBoxTimeoutField = value;
            }
        }
        
        /// <remarks/>
        public byte SegTerm {
            get {
                return this.segTermField;
            }
            set {
                this.segTermField = value;
            }
        }
        
        /// <remarks/>
        public byte ElmSep {
            get {
                return this.elmSepField;
            }
            set {
                this.elmSepField = value;
            }
        }
        
        /// <remarks/>
        public byte SubElmSep {
            get {
                return this.subElmSepField;
            }
            set {
                this.subElmSepField = value;
            }
        }
        
        /// <remarks/>
        public short EBCDICFilter {
            get {
                return this.eBCDICFilterField;
            }
            set {
                this.eBCDICFilterField = value;
            }
        }
        
        /// <remarks/>
        public bool FTPasciiFilter {
            get {
                return this.fTPasciiFilterField;
            }
            set {
                this.fTPasciiFilterField = value;
            }
        }
        
        /// <remarks/>
        public bool LowPassFilter {
            get {
                return this.lowPassFilterField;
            }
            set {
                this.lowPassFilterField = value;
            }
        }
        
        /// <remarks/>
        public bool MailbagPassThrough {
            get {
                return this.mailbagPassThroughField;
            }
            set {
                this.mailbagPassThroughField = value;
            }
        }
        
        /// <remarks/>
        public bool DeleteOnDownload {
            get {
                return this.deleteOnDownloadField;
            }
            set {
                this.deleteOnDownloadField = value;
            }
        }
        
        /// <remarks/>
        public bool StripDirectedEnvelope {
            get {
                return this.stripDirectedEnvelopeField;
            }
            set {
                this.stripDirectedEnvelopeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class MigrationNote {
        
        private int migrationNoteIDField;
        
        private System.DateTime noteDateField;
        
        private StatusInterconnect statusField;
        
        private int userIDField;
        
        private string mailToField;
        
        private string noteField;
        
        private NoteAttachment attachmentField;
        
        /// <remarks/>
        public int MigrationNoteID {
            get {
                return this.migrationNoteIDField;
            }
            set {
                this.migrationNoteIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime NoteDate {
            get {
                return this.noteDateField;
            }
            set {
                this.noteDateField = value;
            }
        }
        
        /// <remarks/>
        public StatusInterconnect Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string MailTo {
            get {
                return this.mailToField;
            }
            set {
                this.mailToField = value;
            }
        }
        
        /// <remarks/>
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
            }
        }
        
        /// <remarks/>
        public NoteAttachment Attachment {
            get {
                return this.attachmentField;
            }
            set {
                this.attachmentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum StatusInterconnect {
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Completed,
        
        /// <remarks/>
        Canceled,
        
        /// <remarks/>
        Delayed,
        
        /// <remarks/>
        Problem,
        
        /// <remarks/>
        AuthorizationRequired,
        
        /// <remarks/>
        NoStatusChange,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class NoteAttachment {
        
        private string fileNameField;
        
        private byte[] contentField;
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class MigrationTP {
        
        private ECGridIDInfo eCGridIDField;
        
        private MigrationType typeField;
        
        private MigrationTPStatus statusField;
        
        private ECGridIDInfo[] tPsField;
        
        /// <remarks/>
        public ECGridIDInfo ECGridID {
            get {
                return this.eCGridIDField;
            }
            set {
                this.eCGridIDField = value;
            }
        }
        
        /// <remarks/>
        public MigrationType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public MigrationTPStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public ECGridIDInfo[] TPs {
            get {
                return this.tPsField;
            }
            set {
                this.tPsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum MigrationType {
        
        /// <remarks/>
        Expected,
        
        /// <remarks/>
        Unexpected,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum MigrationTPStatus {
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Inbound,
        
        /// <remarks/>
        Outbound,
        
        /// <remarks/>
        Complete,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class MigrationBatch {
        
        private int migrationBatchIdField;
        
        private string nameField;
        
        private System.DateTime scheduledField;
        
        private System.DateTime createdField;
        
        private System.DateTime modifiedField;
        
        private System.DateTime contactedField;
        
        private System.DateTime respondedField;
        
        private System.DateTime confirmedField;
        
        private int totalField;
        
        private int completeField;
        
        private int inboundField;
        
        private int outboundField;
        
        private MigrationStatus statusField;
        
        private MigrationTP[] tPsField;
        
        private MigrationNote[] notesField;
        
        /// <remarks/>
        public int MigrationBatchId {
            get {
                return this.migrationBatchIdField;
            }
            set {
                this.migrationBatchIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Scheduled {
            get {
                return this.scheduledField;
            }
            set {
                this.scheduledField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Contacted {
            get {
                return this.contactedField;
            }
            set {
                this.contactedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Responded {
            get {
                return this.respondedField;
            }
            set {
                this.respondedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Confirmed {
            get {
                return this.confirmedField;
            }
            set {
                this.confirmedField = value;
            }
        }
        
        /// <remarks/>
        public int Total {
            get {
                return this.totalField;
            }
            set {
                this.totalField = value;
            }
        }
        
        /// <remarks/>
        public int Complete {
            get {
                return this.completeField;
            }
            set {
                this.completeField = value;
            }
        }
        
        /// <remarks/>
        public int Inbound {
            get {
                return this.inboundField;
            }
            set {
                this.inboundField = value;
            }
        }
        
        /// <remarks/>
        public int Outbound {
            get {
                return this.outboundField;
            }
            set {
                this.outboundField = value;
            }
        }
        
        /// <remarks/>
        public MigrationStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public MigrationTP[] TPs {
            get {
                return this.tPsField;
            }
            set {
                this.tPsField = value;
            }
        }
        
        /// <remarks/>
        public MigrationNote[] Notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum MigrationStatus {
        
        /// <remarks/>
        All,
        
        /// <remarks/>
        Canceled,
        
        /// <remarks/>
        Planned,
        
        /// <remarks/>
        Requested,
        
        /// <remarks/>
        Confirmed,
        
        /// <remarks/>
        Active,
        
        /// <remarks/>
        Completed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class NetworkFTPInfo {
        
        private string[] ipField;
        
        private string userIDField;
        
        private string passwordField;
        
        private string accountField;
        
        private string virtualDirectoryInField;
        
        private string virtualDirectoryOutField;
        
        private string logicalDirectoryField;
        
        private short maxThreadsField;
        
        /// <remarks/>
        public string[] IP {
            get {
                return this.ipField;
            }
            set {
                this.ipField = value;
            }
        }
        
        /// <remarks/>
        public string UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string Account {
            get {
                return this.accountField;
            }
            set {
                this.accountField = value;
            }
        }
        
        /// <remarks/>
        public string VirtualDirectoryIn {
            get {
                return this.virtualDirectoryInField;
            }
            set {
                this.virtualDirectoryInField = value;
            }
        }
        
        /// <remarks/>
        public string VirtualDirectoryOut {
            get {
                return this.virtualDirectoryOutField;
            }
            set {
                this.virtualDirectoryOutField = value;
            }
        }
        
        /// <remarks/>
        public string LogicalDirectory {
            get {
                return this.logicalDirectoryField;
            }
            set {
                this.logicalDirectoryField = value;
            }
        }
        
        /// <remarks/>
        public short MaxThreads {
            get {
                return this.maxThreadsField;
            }
            set {
                this.maxThreadsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class NetworkVPN {
        
        private string localTunnelField;
        
        private string remoteTunnelField;
        
        private string[] encryptionDomainField;
        
        private string sharedSecretField;
        
        private NetworkVPNEncryptionMethod encryptionMethodField;
        
        /// <remarks/>
        public string LocalTunnel {
            get {
                return this.localTunnelField;
            }
            set {
                this.localTunnelField = value;
            }
        }
        
        /// <remarks/>
        public string RemoteTunnel {
            get {
                return this.remoteTunnelField;
            }
            set {
                this.remoteTunnelField = value;
            }
        }
        
        /// <remarks/>
        public string[] EncryptionDomain {
            get {
                return this.encryptionDomainField;
            }
            set {
                this.encryptionDomainField = value;
            }
        }
        
        /// <remarks/>
        public string SharedSecret {
            get {
                return this.sharedSecretField;
            }
            set {
                this.sharedSecretField = value;
            }
        }
        
        /// <remarks/>
        public NetworkVPNEncryptionMethod EncryptionMethod {
            get {
                return this.encryptionMethodField;
            }
            set {
                this.encryptionMethodField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum NetworkVPNEncryptionMethod {
        
        /// <remarks/>
        _3DES_SHA1,
        
        /// <remarks/>
        _DES_SHA1,
        
        /// <remarks/>
        _3DES_MD5,
        
        /// <remarks/>
        _DES_MD5,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class NetworkGateway {
        
        private string applicationField;
        
        private short applicationTimeOutField;
        
        private string applicationLogFileField;
        
        private short frequencyField;
        
        private short minimumPollingField;
        
        private NetworkGatewayHandshake handshakeField;
        
        private NetworkGatewayCommChannel commChannelField;
        
        private NetworkGatewayConnection connectionField;
        
        /// <remarks/>
        public string Application {
            get {
                return this.applicationField;
            }
            set {
                this.applicationField = value;
            }
        }
        
        /// <remarks/>
        public short ApplicationTimeOut {
            get {
                return this.applicationTimeOutField;
            }
            set {
                this.applicationTimeOutField = value;
            }
        }
        
        /// <remarks/>
        public string ApplicationLogFile {
            get {
                return this.applicationLogFileField;
            }
            set {
                this.applicationLogFileField = value;
            }
        }
        
        /// <remarks/>
        public short Frequency {
            get {
                return this.frequencyField;
            }
            set {
                this.frequencyField = value;
            }
        }
        
        /// <remarks/>
        public short MinimumPolling {
            get {
                return this.minimumPollingField;
            }
            set {
                this.minimumPollingField = value;
            }
        }
        
        /// <remarks/>
        public NetworkGatewayHandshake Handshake {
            get {
                return this.handshakeField;
            }
            set {
                this.handshakeField = value;
            }
        }
        
        /// <remarks/>
        public NetworkGatewayCommChannel CommChannel {
            get {
                return this.commChannelField;
            }
            set {
                this.commChannelField = value;
            }
        }
        
        /// <remarks/>
        public NetworkGatewayConnection Connection {
            get {
                return this.connectionField;
            }
            set {
                this.connectionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum NetworkGatewayHandshake {
        
        /// <remarks/>
        Push,
        
        /// <remarks/>
        Pull,
        
        /// <remarks/>
        PushPull,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum NetworkGatewayCommChannel {
        
        /// <remarks/>
        none,
        
        /// <remarks/>
        ftp,
        
        /// <remarks/>
        sftp,
        
        /// <remarks/>
        as2,
        
        /// <remarks/>
        http,
        
        /// <remarks/>
        oftp,
        
        /// <remarks/>
        x400,
        
        /// <remarks/>
        gisb,
        
        /// <remarks/>
        rnif,
        
        /// <remarks/>
        cxml,
        
        /// <remarks/>
        undefined,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum NetworkGatewayConnection {
        
        /// <remarks/>
        Internet,
        
        /// <remarks/>
        VPN,
        
        /// <remarks/>
        Dial,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class x1256mailbag {
        
        private string passwordFromField;
        
        private string passwordToField;
        
        private string qualifierFromField;
        
        private string idFromField;
        
        private string qualifierToField;
        
        private string idToField;
        
        private string versionField;
        
        private bool productionField;
        
        /// <remarks/>
        public string passwordFrom {
            get {
                return this.passwordFromField;
            }
            set {
                this.passwordFromField = value;
            }
        }
        
        /// <remarks/>
        public string passwordTo {
            get {
                return this.passwordToField;
            }
            set {
                this.passwordToField = value;
            }
        }
        
        /// <remarks/>
        public string qualifierFrom {
            get {
                return this.qualifierFromField;
            }
            set {
                this.qualifierFromField = value;
            }
        }
        
        /// <remarks/>
        public string idFrom {
            get {
                return this.idFromField;
            }
            set {
                this.idFromField = value;
            }
        }
        
        /// <remarks/>
        public string qualifierTo {
            get {
                return this.qualifierToField;
            }
            set {
                this.qualifierToField = value;
            }
        }
        
        /// <remarks/>
        public string idTo {
            get {
                return this.idToField;
            }
            set {
                this.idToField = value;
            }
        }
        
        /// <remarks/>
        public string version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public bool production {
            get {
                return this.productionField;
            }
            set {
                this.productionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class NetworkNetOpsInfo {
        
        private int billingUserIDField;
        
        private string billingContactField;
        
        private string billingEMailField;
        
        private short billingTypeField;
        
        private string invoiceContactField;
        
        private string invoiceEMailField;
        
        private string softwareVersionField;
        
        private System.DateTime createdField;
        
        private System.DateTime commissionedField;
        
        private System.DateTime decommissionedField;
        
        private System.DateTime modifiedField;
        
        private string runDirField;
        
        private string internalDirectoryField;
        
        private string externalDirectoryRootField;
        
        private string externalDirectoryInField;
        
        private string externalDirectoryOutField;
        
        private short archiveDaysField;
        
        private string supportURLField;
        
        private short blockSizeField;
        
        private short envPerMBField;
        
        private short outBoxTimeOutField;
        
        private string masterAccountField;
        
        private int processIDField;
        
        private string userNameField;
        
        private string userDomainField;
        
        private string serverField;
        
        private int aliasNetworkIDField;
        
        private int aliasMailboxIDField;
        
        private string inBoxPatternField;
        
        private string outBoxPatternField;
        
        private x1256mailbag x1256Field;
        
        private short archiveDaysInternalField;
        
        private short archiveDaysExternalField;
        
        private short maxBatchField;
        
        private short dbOpenMaxCyclesField;
        
        private short dbOpenMaxSecondsField;
        
        private NetworkGateway gatewayField;
        
        private NetworkVPN vPNField;
        
        private NetworkFTPInfo fTPServerField;
        
        private NetworkFTPInfo fTPClientField;
        
        /// <remarks/>
        public int BillingUserID {
            get {
                return this.billingUserIDField;
            }
            set {
                this.billingUserIDField = value;
            }
        }
        
        /// <remarks/>
        public string BillingContact {
            get {
                return this.billingContactField;
            }
            set {
                this.billingContactField = value;
            }
        }
        
        /// <remarks/>
        public string BillingEMail {
            get {
                return this.billingEMailField;
            }
            set {
                this.billingEMailField = value;
            }
        }
        
        /// <remarks/>
        public short BillingType {
            get {
                return this.billingTypeField;
            }
            set {
                this.billingTypeField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceContact {
            get {
                return this.invoiceContactField;
            }
            set {
                this.invoiceContactField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceEMail {
            get {
                return this.invoiceEMailField;
            }
            set {
                this.invoiceEMailField = value;
            }
        }
        
        /// <remarks/>
        public string SoftwareVersion {
            get {
                return this.softwareVersionField;
            }
            set {
                this.softwareVersionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Commissioned {
            get {
                return this.commissionedField;
            }
            set {
                this.commissionedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Decommissioned {
            get {
                return this.decommissionedField;
            }
            set {
                this.decommissionedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public string RunDir {
            get {
                return this.runDirField;
            }
            set {
                this.runDirField = value;
            }
        }
        
        /// <remarks/>
        public string InternalDirectory {
            get {
                return this.internalDirectoryField;
            }
            set {
                this.internalDirectoryField = value;
            }
        }
        
        /// <remarks/>
        public string ExternalDirectoryRoot {
            get {
                return this.externalDirectoryRootField;
            }
            set {
                this.externalDirectoryRootField = value;
            }
        }
        
        /// <remarks/>
        public string ExternalDirectoryIn {
            get {
                return this.externalDirectoryInField;
            }
            set {
                this.externalDirectoryInField = value;
            }
        }
        
        /// <remarks/>
        public string ExternalDirectoryOut {
            get {
                return this.externalDirectoryOutField;
            }
            set {
                this.externalDirectoryOutField = value;
            }
        }
        
        /// <remarks/>
        public short ArchiveDays {
            get {
                return this.archiveDaysField;
            }
            set {
                this.archiveDaysField = value;
            }
        }
        
        /// <remarks/>
        public string SupportURL {
            get {
                return this.supportURLField;
            }
            set {
                this.supportURLField = value;
            }
        }
        
        /// <remarks/>
        public short BlockSize {
            get {
                return this.blockSizeField;
            }
            set {
                this.blockSizeField = value;
            }
        }
        
        /// <remarks/>
        public short EnvPerMB {
            get {
                return this.envPerMBField;
            }
            set {
                this.envPerMBField = value;
            }
        }
        
        /// <remarks/>
        public short OutBoxTimeOut {
            get {
                return this.outBoxTimeOutField;
            }
            set {
                this.outBoxTimeOutField = value;
            }
        }
        
        /// <remarks/>
        public string MasterAccount {
            get {
                return this.masterAccountField;
            }
            set {
                this.masterAccountField = value;
            }
        }
        
        /// <remarks/>
        public int ProcessID {
            get {
                return this.processIDField;
            }
            set {
                this.processIDField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string UserDomain {
            get {
                return this.userDomainField;
            }
            set {
                this.userDomainField = value;
            }
        }
        
        /// <remarks/>
        public string Server {
            get {
                return this.serverField;
            }
            set {
                this.serverField = value;
            }
        }
        
        /// <remarks/>
        public int AliasNetworkID {
            get {
                return this.aliasNetworkIDField;
            }
            set {
                this.aliasNetworkIDField = value;
            }
        }
        
        /// <remarks/>
        public int AliasMailboxID {
            get {
                return this.aliasMailboxIDField;
            }
            set {
                this.aliasMailboxIDField = value;
            }
        }
        
        /// <remarks/>
        public string InBoxPattern {
            get {
                return this.inBoxPatternField;
            }
            set {
                this.inBoxPatternField = value;
            }
        }
        
        /// <remarks/>
        public string OutBoxPattern {
            get {
                return this.outBoxPatternField;
            }
            set {
                this.outBoxPatternField = value;
            }
        }
        
        /// <remarks/>
        public x1256mailbag x1256 {
            get {
                return this.x1256Field;
            }
            set {
                this.x1256Field = value;
            }
        }
        
        /// <remarks/>
        public short ArchiveDaysInternal {
            get {
                return this.archiveDaysInternalField;
            }
            set {
                this.archiveDaysInternalField = value;
            }
        }
        
        /// <remarks/>
        public short ArchiveDaysExternal {
            get {
                return this.archiveDaysExternalField;
            }
            set {
                this.archiveDaysExternalField = value;
            }
        }
        
        /// <remarks/>
        public short MaxBatch {
            get {
                return this.maxBatchField;
            }
            set {
                this.maxBatchField = value;
            }
        }
        
        /// <remarks/>
        public short dbOpenMaxCycles {
            get {
                return this.dbOpenMaxCyclesField;
            }
            set {
                this.dbOpenMaxCyclesField = value;
            }
        }
        
        /// <remarks/>
        public short dbOpenMaxSeconds {
            get {
                return this.dbOpenMaxSecondsField;
            }
            set {
                this.dbOpenMaxSecondsField = value;
            }
        }
        
        /// <remarks/>
        public NetworkGateway Gateway {
            get {
                return this.gatewayField;
            }
            set {
                this.gatewayField = value;
            }
        }
        
        /// <remarks/>
        public NetworkVPN VPN {
            get {
                return this.vPNField;
            }
            set {
                this.vPNField = value;
            }
        }
        
        /// <remarks/>
        public NetworkFTPInfo FTPServer {
            get {
                return this.fTPServerField;
            }
            set {
                this.fTPServerField = value;
            }
        }
        
        /// <remarks/>
        public NetworkFTPInfo FTPClient {
            get {
                return this.fTPClientField;
            }
            set {
                this.fTPClientField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class NetworkOwnerInfo {
        
        private string typeField;
        
        private string routingTypeField;
        
        private NetworkRoutingType routingField;
        
        private string legacyPasswordField;
        
        private string interconnectContactField;
        
        private string interconnectEMailField;
        
        private string errorContactField;
        
        private string errorEMailField;
        
        private MailboxConfig configField;
        
        private int pricelistIDField;
        
        private int contractIDField;
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string RoutingType {
            get {
                return this.routingTypeField;
            }
            set {
                this.routingTypeField = value;
            }
        }
        
        /// <remarks/>
        public NetworkRoutingType Routing {
            get {
                return this.routingField;
            }
            set {
                this.routingField = value;
            }
        }
        
        /// <remarks/>
        public string LegacyPassword {
            get {
                return this.legacyPasswordField;
            }
            set {
                this.legacyPasswordField = value;
            }
        }
        
        /// <remarks/>
        public string InterconnectContact {
            get {
                return this.interconnectContactField;
            }
            set {
                this.interconnectContactField = value;
            }
        }
        
        /// <remarks/>
        public string InterconnectEMail {
            get {
                return this.interconnectEMailField;
            }
            set {
                this.interconnectEMailField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorContact {
            get {
                return this.errorContactField;
            }
            set {
                this.errorContactField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorEMail {
            get {
                return this.errorEMailField;
            }
            set {
                this.errorEMailField = value;
            }
        }
        
        /// <remarks/>
        public MailboxConfig Config {
            get {
                return this.configField;
            }
            set {
                this.configField = value;
            }
        }
        
        /// <remarks/>
        public int PricelistID {
            get {
                return this.pricelistIDField;
            }
            set {
                this.pricelistIDField = value;
            }
        }
        
        /// <remarks/>
        public int ContractID {
            get {
                return this.contractIDField;
            }
            set {
                this.contractIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum NetworkRoutingType {
        
        /// <remarks/>
        Open,
        
        /// <remarks/>
        OpenWithSenderValidation,
        
        /// <remarks/>
        TradingPartnerPairs,
        
        /// <remarks/>
        MultiNetwork,
        
        /// <remarks/>
        ECGridOpen,
        
        /// <remarks/>
        ECGridTradingPartnerPairs,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class NetworkLog {
        
        private int logIDField;
        
        private System.DateTime logDateField;
        
        private int userIDField;
        
        private NetworkLogType typeField;
        
        private NetworkLogStatus statusField;
        
        private AuthLevel authLevelField;
        
        private string descriptionField;
        
        /// <remarks/>
        public int LogID {
            get {
                return this.logIDField;
            }
            set {
                this.logIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LogDate {
            get {
                return this.logDateField;
            }
            set {
                this.logDateField = value;
            }
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public NetworkLogType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public NetworkLogStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public AuthLevel AuthLevel {
            get {
                return this.authLevelField;
            }
            set {
                this.authLevelField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum NetworkLogType {
        
        /// <remarks/>
        SystemResponse,
        
        /// <remarks/>
        SystemAutomated,
        
        /// <remarks/>
        User,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum NetworkLogStatus {
        
        /// <remarks/>
        Start,
        
        /// <remarks/>
        CheckIn,
        
        /// <remarks/>
        Access,
        
        /// <remarks/>
        Pause,
        
        /// <remarks/>
        Restart,
        
        /// <remarks/>
        Shutdown,
        
        /// <remarks/>
        StatusChange,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class NetworkIDInfo {
        
        private int networkIDField;
        
        private string nameField;
        
        private string locationField;
        
        private string adminContactField;
        
        private string adminPhoneField;
        
        private string adminEMailField;
        
        private System.DateTime lastContactField;
        
        private NetworkType typeField;
        
        private Status statusField;
        
        private NetworkRunStatus runStatusField;
        
        private NetworkStatus networkStatusField;
        
        private bool eCGridAccountField;
        
        private int ownerUserIDField;
        
        private int routingUserIDField;
        
        private int errorsUserIDField;
        
        private int interconnectsUserIDField;
        
        private int noticesUserIDField;
        
        private int reportsUserIDField;
        
        private int accountingUserIDField;
        
        private int customerServiceUserIDField;
        
        private string homeWebsiteField;
        
        private string supportWebsiteField;
        
        private string loginWebsiteField;
        
        private System.DateTime createdField;
        
        private System.DateTime modifiedField;
        
        private NetworkLog lastLogField;
        
        private NetworkOwnerInfo ownerInfoField;
        
        private NetworkNetOpsInfo netOpsInfoField;
        
        /// <remarks/>
        public int NetworkID {
            get {
                return this.networkIDField;
            }
            set {
                this.networkIDField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        public string AdminContact {
            get {
                return this.adminContactField;
            }
            set {
                this.adminContactField = value;
            }
        }
        
        /// <remarks/>
        public string AdminPhone {
            get {
                return this.adminPhoneField;
            }
            set {
                this.adminPhoneField = value;
            }
        }
        
        /// <remarks/>
        public string AdminEMail {
            get {
                return this.adminEMailField;
            }
            set {
                this.adminEMailField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastContact {
            get {
                return this.lastContactField;
            }
            set {
                this.lastContactField = value;
            }
        }
        
        /// <remarks/>
        public NetworkType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public Status Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public NetworkRunStatus RunStatus {
            get {
                return this.runStatusField;
            }
            set {
                this.runStatusField = value;
            }
        }
        
        /// <remarks/>
        public NetworkStatus NetworkStatus {
            get {
                return this.networkStatusField;
            }
            set {
                this.networkStatusField = value;
            }
        }
        
        /// <remarks/>
        public bool ECGridAccount {
            get {
                return this.eCGridAccountField;
            }
            set {
                this.eCGridAccountField = value;
            }
        }
        
        /// <remarks/>
        public int OwnerUserID {
            get {
                return this.ownerUserIDField;
            }
            set {
                this.ownerUserIDField = value;
            }
        }
        
        /// <remarks/>
        public int RoutingUserID {
            get {
                return this.routingUserIDField;
            }
            set {
                this.routingUserIDField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorsUserID {
            get {
                return this.errorsUserIDField;
            }
            set {
                this.errorsUserIDField = value;
            }
        }
        
        /// <remarks/>
        public int InterconnectsUserID {
            get {
                return this.interconnectsUserIDField;
            }
            set {
                this.interconnectsUserIDField = value;
            }
        }
        
        /// <remarks/>
        public int NoticesUserID {
            get {
                return this.noticesUserIDField;
            }
            set {
                this.noticesUserIDField = value;
            }
        }
        
        /// <remarks/>
        public int ReportsUserID {
            get {
                return this.reportsUserIDField;
            }
            set {
                this.reportsUserIDField = value;
            }
        }
        
        /// <remarks/>
        public int AccountingUserID {
            get {
                return this.accountingUserIDField;
            }
            set {
                this.accountingUserIDField = value;
            }
        }
        
        /// <remarks/>
        public int CustomerServiceUserID {
            get {
                return this.customerServiceUserIDField;
            }
            set {
                this.customerServiceUserIDField = value;
            }
        }
        
        /// <remarks/>
        public string HomeWebsite {
            get {
                return this.homeWebsiteField;
            }
            set {
                this.homeWebsiteField = value;
            }
        }
        
        /// <remarks/>
        public string SupportWebsite {
            get {
                return this.supportWebsiteField;
            }
            set {
                this.supportWebsiteField = value;
            }
        }
        
        /// <remarks/>
        public string LoginWebsite {
            get {
                return this.loginWebsiteField;
            }
            set {
                this.loginWebsiteField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public NetworkLog LastLog {
            get {
                return this.lastLogField;
            }
            set {
                this.lastLogField = value;
            }
        }
        
        /// <remarks/>
        public NetworkOwnerInfo OwnerInfo {
            get {
                return this.ownerInfoField;
            }
            set {
                this.ownerInfoField = value;
            }
        }
        
        /// <remarks/>
        public NetworkNetOpsInfo NetOpsInfo {
            get {
                return this.netOpsInfoField;
            }
            set {
                this.netOpsInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum NetworkType {
        
        /// <remarks/>
        Network,
        
        /// <remarks/>
        Router,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum NetworkRunStatus {
        
        /// <remarks/>
        Restart,
        
        /// <remarks/>
        OffLine,
        
        /// <remarks/>
        Active,
        
        /// <remarks/>
        Sleeping,
        
        /// <remarks/>
        Alert,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum NetworkStatus {
        
        /// <remarks/>
        Redirected,
        
        /// <remarks/>
        NormalOperation,
        
        /// <remarks/>
        ECGridScheduledOutage,
        
        /// <remarks/>
        ECGridUnscheduledOutage,
        
        /// <remarks/>
        NetworkScheduledOutage,
        
        /// <remarks/>
        NetworkUnscheduledOutage,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class MigrationIDInfo {
        
        private int migrationIDField;
        
        private string nameField;
        
        private NetworkIDInfo networkField;
        
        private MailboxIDInfo mailboxField;
        
        private NetworkIDInfo eCSPNetworkField;
        
        private MailboxIDInfo eCSPMailboxField;
        
        private System.DateTime createdField;
        
        private System.DateTime modifiedField;
        
        private MigrationStatus statusField;
        
        private UserIDInfo ownerField;
        
        private string helpTicketField;
        
        private MigrationBatch[] batchesField;
        
        private MigrationNote[] notesField;
        
        /// <remarks/>
        public int MigrationID {
            get {
                return this.migrationIDField;
            }
            set {
                this.migrationIDField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public NetworkIDInfo Network {
            get {
                return this.networkField;
            }
            set {
                this.networkField = value;
            }
        }
        
        /// <remarks/>
        public MailboxIDInfo Mailbox {
            get {
                return this.mailboxField;
            }
            set {
                this.mailboxField = value;
            }
        }
        
        /// <remarks/>
        public NetworkIDInfo ECSPNetwork {
            get {
                return this.eCSPNetworkField;
            }
            set {
                this.eCSPNetworkField = value;
            }
        }
        
        /// <remarks/>
        public MailboxIDInfo ECSPMailbox {
            get {
                return this.eCSPMailboxField;
            }
            set {
                this.eCSPMailboxField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public MigrationStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public UserIDInfo Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        public string HelpTicket {
            get {
                return this.helpTicketField;
            }
            set {
                this.helpTicketField = value;
            }
        }
        
        /// <remarks/>
        public MigrationBatch[] Batches {
            get {
                return this.batchesField;
            }
            set {
                this.batchesField = value;
            }
        }
        
        /// <remarks/>
        public MigrationNote[] Notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class MailboxIDInfo {
        
        private int mailboxIDField;
        
        private int networkIDField;
        
        private string nameField;
        
        private System.DateTime createdField;
        
        private System.DateTime modifiedField;
        
        private Status statusField;
        
        private string descriptionField;
        
        private UserIDInfo ownerUserIDField;
        
        private UserIDInfo errorsUserIDField;
        
        private UserIDInfo interconnectsUserIDField;
        
        private UserIDInfo noticesUserIDField;
        
        private UserIDInfo reportsUserIDField;
        
        private UserIDInfo customerServiceUserIDField;
        
        private UserIDInfo accountingUserIDField;
        
        private bool managedField;
        
        private UseType useTypeField;
        
        private MailboxConfig configField;
        
        private bool eCGridAccountField;
        
        private string defaultAS2IDField;
        
        private MailboxOwnerInfo ownerInfoField;
        
        private MailboxNetOpsInfo netOpsInfoField;
        
        /// <remarks/>
        public int MailboxID {
            get {
                return this.mailboxIDField;
            }
            set {
                this.mailboxIDField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkID {
            get {
                return this.networkIDField;
            }
            set {
                this.networkIDField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public Status Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public UserIDInfo OwnerUserID {
            get {
                return this.ownerUserIDField;
            }
            set {
                this.ownerUserIDField = value;
            }
        }
        
        /// <remarks/>
        public UserIDInfo ErrorsUserID {
            get {
                return this.errorsUserIDField;
            }
            set {
                this.errorsUserIDField = value;
            }
        }
        
        /// <remarks/>
        public UserIDInfo InterconnectsUserID {
            get {
                return this.interconnectsUserIDField;
            }
            set {
                this.interconnectsUserIDField = value;
            }
        }
        
        /// <remarks/>
        public UserIDInfo NoticesUserID {
            get {
                return this.noticesUserIDField;
            }
            set {
                this.noticesUserIDField = value;
            }
        }
        
        /// <remarks/>
        public UserIDInfo ReportsUserID {
            get {
                return this.reportsUserIDField;
            }
            set {
                this.reportsUserIDField = value;
            }
        }
        
        /// <remarks/>
        public UserIDInfo CustomerServiceUserID {
            get {
                return this.customerServiceUserIDField;
            }
            set {
                this.customerServiceUserIDField = value;
            }
        }
        
        /// <remarks/>
        public UserIDInfo AccountingUserID {
            get {
                return this.accountingUserIDField;
            }
            set {
                this.accountingUserIDField = value;
            }
        }
        
        /// <remarks/>
        public bool Managed {
            get {
                return this.managedField;
            }
            set {
                this.managedField = value;
            }
        }
        
        /// <remarks/>
        public UseType UseType {
            get {
                return this.useTypeField;
            }
            set {
                this.useTypeField = value;
            }
        }
        
        /// <remarks/>
        public MailboxConfig Config {
            get {
                return this.configField;
            }
            set {
                this.configField = value;
            }
        }
        
        /// <remarks/>
        public bool ECGridAccount {
            get {
                return this.eCGridAccountField;
            }
            set {
                this.eCGridAccountField = value;
            }
        }
        
        /// <remarks/>
        public string DefaultAS2ID {
            get {
                return this.defaultAS2IDField;
            }
            set {
                this.defaultAS2IDField = value;
            }
        }
        
        /// <remarks/>
        public MailboxOwnerInfo OwnerInfo {
            get {
                return this.ownerInfoField;
            }
            set {
                this.ownerInfoField = value;
            }
        }
        
        /// <remarks/>
        public MailboxNetOpsInfo NetOpsInfo {
            get {
                return this.netOpsInfoField;
            }
            set {
                this.netOpsInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class MailboxOwnerInfo {
        
        private int pricelistIDField;
        
        private int contractIDField;
        
        /// <remarks/>
        public int PricelistID {
            get {
                return this.pricelistIDField;
            }
            set {
                this.pricelistIDField = value;
            }
        }
        
        /// <remarks/>
        public int ContractID {
            get {
                return this.contractIDField;
            }
            set {
                this.contractIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class MailboxNetOpsInfo {
        
        private int aliasNetworkIDField;
        
        private int aliasMailboxIDField;
        
        /// <remarks/>
        public int AliasNetworkID {
            get {
                return this.aliasNetworkIDField;
            }
            set {
                this.aliasNetworkIDField = value;
            }
        }
        
        /// <remarks/>
        public int AliasMailboxID {
            get {
                return this.aliasMailboxIDField;
            }
            set {
                this.aliasMailboxIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class InterconnectNote {
        
        private int interconnectIDField;
        
        private int interconnectNoteIDField;
        
        private System.DateTime noteDateField;
        
        private StatusInterconnect statusField;
        
        private string postedByField;
        
        private int userIDField;
        
        private string mailToField;
        
        private string noteField;
        
        private NoteAttachment attachmentField;
        
        /// <remarks/>
        public int InterconnectID {
            get {
                return this.interconnectIDField;
            }
            set {
                this.interconnectIDField = value;
            }
        }
        
        /// <remarks/>
        public int InterconnectNoteID {
            get {
                return this.interconnectNoteIDField;
            }
            set {
                this.interconnectNoteIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime NoteDate {
            get {
                return this.noteDateField;
            }
            set {
                this.noteDateField = value;
            }
        }
        
        /// <remarks/>
        public StatusInterconnect Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string PostedBy {
            get {
                return this.postedByField;
            }
            set {
                this.postedByField = value;
            }
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string MailTo {
            get {
                return this.mailToField;
            }
            set {
                this.mailToField = value;
            }
        }
        
        /// <remarks/>
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
            }
        }
        
        /// <remarks/>
        public NoteAttachment Attachment {
            get {
                return this.attachmentField;
            }
            set {
                this.attachmentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class InterconnectIDInfo {
        
        private int interconnectIDField;
        
        private string uniqueIDField;
        
        private System.DateTime createdField;
        
        private System.DateTime modifiedField;
        
        private System.DateTime completedField;
        
        private System.DateTime lastTrafficField;
        
        private System.DateTime lastTrafficInboundField;
        
        private System.DateTime lastTrafficOutboundField;
        
        private UserIDInfo requestorUserField;
        
        private UserIDInfo contactUserField;
        
        private string contactNameField;
        
        private string contactEMailField;
        
        private StatusInterconnect statusField;
        
        private bool suspendPendingInterchangesField;
        
        private ECGridIDInfo tP1Field;
        
        private string aS2ID1Field;
        
        private string reference1Field;
        
        private ECGridIDInfo tP2Field;
        
        private string aS2ID2Field;
        
        private string reference2Field;
        
        private UserIDInfo netOpsField;
        
        /// <remarks/>
        public int InterconnectID {
            get {
                return this.interconnectIDField;
            }
            set {
                this.interconnectIDField = value;
            }
        }
        
        /// <remarks/>
        public string UniqueID {
            get {
                return this.uniqueIDField;
            }
            set {
                this.uniqueIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Completed {
            get {
                return this.completedField;
            }
            set {
                this.completedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastTraffic {
            get {
                return this.lastTrafficField;
            }
            set {
                this.lastTrafficField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastTrafficInbound {
            get {
                return this.lastTrafficInboundField;
            }
            set {
                this.lastTrafficInboundField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastTrafficOutbound {
            get {
                return this.lastTrafficOutboundField;
            }
            set {
                this.lastTrafficOutboundField = value;
            }
        }
        
        /// <remarks/>
        public UserIDInfo RequestorUser {
            get {
                return this.requestorUserField;
            }
            set {
                this.requestorUserField = value;
            }
        }
        
        /// <remarks/>
        public UserIDInfo ContactUser {
            get {
                return this.contactUserField;
            }
            set {
                this.contactUserField = value;
            }
        }
        
        /// <remarks/>
        public string ContactName {
            get {
                return this.contactNameField;
            }
            set {
                this.contactNameField = value;
            }
        }
        
        /// <remarks/>
        public string ContactEMail {
            get {
                return this.contactEMailField;
            }
            set {
                this.contactEMailField = value;
            }
        }
        
        /// <remarks/>
        public StatusInterconnect Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public bool SuspendPendingInterchanges {
            get {
                return this.suspendPendingInterchangesField;
            }
            set {
                this.suspendPendingInterchangesField = value;
            }
        }
        
        /// <remarks/>
        public ECGridIDInfo TP1 {
            get {
                return this.tP1Field;
            }
            set {
                this.tP1Field = value;
            }
        }
        
        /// <remarks/>
        public string AS2ID1 {
            get {
                return this.aS2ID1Field;
            }
            set {
                this.aS2ID1Field = value;
            }
        }
        
        /// <remarks/>
        public string Reference1 {
            get {
                return this.reference1Field;
            }
            set {
                this.reference1Field = value;
            }
        }
        
        /// <remarks/>
        public ECGridIDInfo TP2 {
            get {
                return this.tP2Field;
            }
            set {
                this.tP2Field = value;
            }
        }
        
        /// <remarks/>
        public string AS2ID2 {
            get {
                return this.aS2ID2Field;
            }
            set {
                this.aS2ID2Field = value;
            }
        }
        
        /// <remarks/>
        public string Reference2 {
            get {
                return this.reference2Field;
            }
            set {
                this.reference2Field = value;
            }
        }
        
        /// <remarks/>
        public UserIDInfo NetOps {
            get {
                return this.netOpsField;
            }
            set {
                this.netOpsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class ECGridIDInfoCollection {
        
        private short pageSizeField;
        
        private short pageNumberField;
        
        private int countField;
        
        private int totalRecordsField;
        
        private short totalPagesField;
        
        private ECGridIDInfo[] eCGridIDInfoListField;
        
        /// <remarks/>
        public short PageSize {
            get {
                return this.pageSizeField;
            }
            set {
                this.pageSizeField = value;
            }
        }
        
        /// <remarks/>
        public short PageNumber {
            get {
                return this.pageNumberField;
            }
            set {
                this.pageNumberField = value;
            }
        }
        
        /// <remarks/>
        public int Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        public int TotalRecords {
            get {
                return this.totalRecordsField;
            }
            set {
                this.totalRecordsField = value;
            }
        }
        
        /// <remarks/>
        public short TotalPages {
            get {
                return this.totalPagesField;
            }
            set {
                this.totalPagesField = value;
            }
        }
        
        /// <remarks/>
        public ECGridIDInfo[] ECGridIDInfoList {
            get {
                return this.eCGridIDInfoListField;
            }
            set {
                this.eCGridIDInfoListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class InterchangeIDStatus {
        
        private long idField;
        
        private System.DateTime interchangeProcessDateField;
        
        private int networkIDFromField;
        
        private int mailboxIDFromField;
        
        private int eCGridIDFromField;
        
        private int networkIDToField;
        
        private int mailboxIDToField;
        
        private int eCGridIDToField;
        
        private int routerIDField;
        
        private long bytesField;
        
        private string statusCodeField;
        
        private System.DateTime statusDateField;
        
        private string interchangeHeaderField;
        
        private EDIStandard standardField;
        
        private int parcelIDInboxField;
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime InterchangeProcessDate {
            get {
                return this.interchangeProcessDateField;
            }
            set {
                this.interchangeProcessDateField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkIDFrom {
            get {
                return this.networkIDFromField;
            }
            set {
                this.networkIDFromField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxIDFrom {
            get {
                return this.mailboxIDFromField;
            }
            set {
                this.mailboxIDFromField = value;
            }
        }
        
        /// <remarks/>
        public int ECGridIDFrom {
            get {
                return this.eCGridIDFromField;
            }
            set {
                this.eCGridIDFromField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkIDTo {
            get {
                return this.networkIDToField;
            }
            set {
                this.networkIDToField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxIDTo {
            get {
                return this.mailboxIDToField;
            }
            set {
                this.mailboxIDToField = value;
            }
        }
        
        /// <remarks/>
        public int ECGridIDTo {
            get {
                return this.eCGridIDToField;
            }
            set {
                this.eCGridIDToField = value;
            }
        }
        
        /// <remarks/>
        public int RouterID {
            get {
                return this.routerIDField;
            }
            set {
                this.routerIDField = value;
            }
        }
        
        /// <remarks/>
        public long Bytes {
            get {
                return this.bytesField;
            }
            set {
                this.bytesField = value;
            }
        }
        
        /// <remarks/>
        public string StatusCode {
            get {
                return this.statusCodeField;
            }
            set {
                this.statusCodeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StatusDate {
            get {
                return this.statusDateField;
            }
            set {
                this.statusDateField = value;
            }
        }
        
        /// <remarks/>
        public string InterchangeHeader {
            get {
                return this.interchangeHeaderField;
            }
            set {
                this.interchangeHeaderField = value;
            }
        }
        
        /// <remarks/>
        public EDIStandard standard {
            get {
                return this.standardField;
            }
            set {
                this.standardField = value;
            }
        }
        
        /// <remarks/>
        public int ParcelIDInbox {
            get {
                return this.parcelIDInboxField;
            }
            set {
                this.parcelIDInboxField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class InterchangeIDInfoCollection {
        
        private short pageSizeField;
        
        private short pageNumberField;
        
        private int countField;
        
        private int totalRecordsField;
        
        private short totalPagesField;
        
        private InterchangeIDInfo[] interchangeIDInfoListField;
        
        /// <remarks/>
        public short PageSize {
            get {
                return this.pageSizeField;
            }
            set {
                this.pageSizeField = value;
            }
        }
        
        /// <remarks/>
        public short PageNumber {
            get {
                return this.pageNumberField;
            }
            set {
                this.pageNumberField = value;
            }
        }
        
        /// <remarks/>
        public int Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        public int TotalRecords {
            get {
                return this.totalRecordsField;
            }
            set {
                this.totalRecordsField = value;
            }
        }
        
        /// <remarks/>
        public short TotalPages {
            get {
                return this.totalPagesField;
            }
            set {
                this.totalPagesField = value;
            }
        }
        
        /// <remarks/>
        public InterchangeIDInfo[] InterchangeIDInfoList {
            get {
                return this.interchangeIDInfoListField;
            }
            set {
                this.interchangeIDInfoListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class InterchangeIDInfo {
        
        private int interchangeIDField;
        
        private System.DateTime interchangeProcessDateField;
        
        private int networkIDFromField;
        
        private string networkNameFromField;
        
        private int mailboxIDFromField;
        
        private int networkIDToField;
        
        private string networkNameToField;
        
        private int mailboxIDToField;
        
        private EDIStandard standardField;
        
        private int bytesField;
        
        private string interchangeControlIDField;
        
        private System.DateTime interchangeDateTimeField;
        
        private System.DateTime archiveDateField;
        
        private System.DateTime statusDateField;
        
        private string statusCodeField;
        
        private string statusMessageField;
        
        private string documentTypeField;
        
        private string headerField;
        
        private ECGridIDInfo tPFromField;
        
        private ECGridIDInfo tPToField;
        
        private ParcelIDInfo[] parcelsField;
        
        /// <remarks/>
        public int InterchangeID {
            get {
                return this.interchangeIDField;
            }
            set {
                this.interchangeIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime InterchangeProcessDate {
            get {
                return this.interchangeProcessDateField;
            }
            set {
                this.interchangeProcessDateField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkIDFrom {
            get {
                return this.networkIDFromField;
            }
            set {
                this.networkIDFromField = value;
            }
        }
        
        /// <remarks/>
        public string NetworkNameFrom {
            get {
                return this.networkNameFromField;
            }
            set {
                this.networkNameFromField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxIDFrom {
            get {
                return this.mailboxIDFromField;
            }
            set {
                this.mailboxIDFromField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkIDTo {
            get {
                return this.networkIDToField;
            }
            set {
                this.networkIDToField = value;
            }
        }
        
        /// <remarks/>
        public string NetworkNameTo {
            get {
                return this.networkNameToField;
            }
            set {
                this.networkNameToField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxIDTo {
            get {
                return this.mailboxIDToField;
            }
            set {
                this.mailboxIDToField = value;
            }
        }
        
        /// <remarks/>
        public EDIStandard Standard {
            get {
                return this.standardField;
            }
            set {
                this.standardField = value;
            }
        }
        
        /// <remarks/>
        public int Bytes {
            get {
                return this.bytesField;
            }
            set {
                this.bytesField = value;
            }
        }
        
        /// <remarks/>
        public string InterchangeControlID {
            get {
                return this.interchangeControlIDField;
            }
            set {
                this.interchangeControlIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime InterchangeDateTime {
            get {
                return this.interchangeDateTimeField;
            }
            set {
                this.interchangeDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ArchiveDate {
            get {
                return this.archiveDateField;
            }
            set {
                this.archiveDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StatusDate {
            get {
                return this.statusDateField;
            }
            set {
                this.statusDateField = value;
            }
        }
        
        /// <remarks/>
        public string StatusCode {
            get {
                return this.statusCodeField;
            }
            set {
                this.statusCodeField = value;
            }
        }
        
        /// <remarks/>
        public string StatusMessage {
            get {
                return this.statusMessageField;
            }
            set {
                this.statusMessageField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentType {
            get {
                return this.documentTypeField;
            }
            set {
                this.documentTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Header {
            get {
                return this.headerField;
            }
            set {
                this.headerField = value;
            }
        }
        
        /// <remarks/>
        public ECGridIDInfo TPFrom {
            get {
                return this.tPFromField;
            }
            set {
                this.tPFromField = value;
            }
        }
        
        /// <remarks/>
        public ECGridIDInfo TPTo {
            get {
                return this.tPToField;
            }
            set {
                this.tPToField = value;
            }
        }
        
        /// <remarks/>
        public ParcelIDInfo[] Parcels {
            get {
                return this.parcelsField;
            }
            set {
                this.parcelsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class ParcelIDInfo {
        
        private int parcelBytesField;
        
        private System.DateTime parcelDateField;
        
        private int actualBytesField;
        
        private int networkIDFromField;
        
        private string networkNameFromField;
        
        private int mailboxIDFromField;
        
        private string mailboxNameFromField;
        
        private int networkIDToField;
        
        private string networkNameToField;
        
        private int mailboxIDToField;
        
        private string mailboxNameToField;
        
        private string fileNameField;
        
        private string mailbagControlIDField;
        
        private System.DateTime archiveDateField;
        
        private System.DateTime statusDateField;
        
        private string statusCodeField;
        
        private string statusMessageField;
        
        private short localStatusField;
        
        private System.DateTime localStatusDateField;
        
        private ParcelValid validField;
        
        private string acknowledgmentField;
        
        private Direction directionField;
        
        private InterchangeIDInfo[] interchangesField;
        
        private ManifestInfo[] logField;
        
        private long parcelIDField;
        
        /// <remarks/>
        public int ParcelBytes {
            get {
                return this.parcelBytesField;
            }
            set {
                this.parcelBytesField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ParcelDate {
            get {
                return this.parcelDateField;
            }
            set {
                this.parcelDateField = value;
            }
        }
        
        /// <remarks/>
        public int ActualBytes {
            get {
                return this.actualBytesField;
            }
            set {
                this.actualBytesField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkIDFrom {
            get {
                return this.networkIDFromField;
            }
            set {
                this.networkIDFromField = value;
            }
        }
        
        /// <remarks/>
        public string NetworkNameFrom {
            get {
                return this.networkNameFromField;
            }
            set {
                this.networkNameFromField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxIDFrom {
            get {
                return this.mailboxIDFromField;
            }
            set {
                this.mailboxIDFromField = value;
            }
        }
        
        /// <remarks/>
        public string MailboxNameFrom {
            get {
                return this.mailboxNameFromField;
            }
            set {
                this.mailboxNameFromField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkIDTo {
            get {
                return this.networkIDToField;
            }
            set {
                this.networkIDToField = value;
            }
        }
        
        /// <remarks/>
        public string NetworkNameTo {
            get {
                return this.networkNameToField;
            }
            set {
                this.networkNameToField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxIDTo {
            get {
                return this.mailboxIDToField;
            }
            set {
                this.mailboxIDToField = value;
            }
        }
        
        /// <remarks/>
        public string MailboxNameTo {
            get {
                return this.mailboxNameToField;
            }
            set {
                this.mailboxNameToField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public string MailbagControlID {
            get {
                return this.mailbagControlIDField;
            }
            set {
                this.mailbagControlIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ArchiveDate {
            get {
                return this.archiveDateField;
            }
            set {
                this.archiveDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StatusDate {
            get {
                return this.statusDateField;
            }
            set {
                this.statusDateField = value;
            }
        }
        
        /// <remarks/>
        public string StatusCode {
            get {
                return this.statusCodeField;
            }
            set {
                this.statusCodeField = value;
            }
        }
        
        /// <remarks/>
        public string StatusMessage {
            get {
                return this.statusMessageField;
            }
            set {
                this.statusMessageField = value;
            }
        }
        
        /// <remarks/>
        public short LocalStatus {
            get {
                return this.localStatusField;
            }
            set {
                this.localStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LocalStatusDate {
            get {
                return this.localStatusDateField;
            }
            set {
                this.localStatusDateField = value;
            }
        }
        
        /// <remarks/>
        public ParcelValid Valid {
            get {
                return this.validField;
            }
            set {
                this.validField = value;
            }
        }
        
        /// <remarks/>
        public string Acknowledgment {
            get {
                return this.acknowledgmentField;
            }
            set {
                this.acknowledgmentField = value;
            }
        }
        
        /// <remarks/>
        public Direction Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        public InterchangeIDInfo[] Interchanges {
            get {
                return this.interchangesField;
            }
            set {
                this.interchangesField = value;
            }
        }
        
        /// <remarks/>
        public ManifestInfo[] Log {
            get {
                return this.logField;
            }
            set {
                this.logField = value;
            }
        }
        
        /// <remarks/>
        public long ParcelID {
            get {
                return this.parcelIDField;
            }
            set {
                this.parcelIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum ParcelValid {
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Invalid,
        
        /// <remarks/>
        Valid,
        
        /// <remarks/>
        PartialValid,
        
        /// <remarks/>
        ValidNoneRouted,
        
        /// <remarks/>
        Duplicate,
        
        /// <remarks/>
        ZeroByte,
        
        /// <remarks/>
        VallidRouted,
        
        /// <remarks/>
        ValidPartialRouted,
        
        /// <remarks/>
        ValidNoneRoutedx,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class ManifestInfo {
        
        private System.DateTime manifestDateField;
        
        private int networkIDField;
        
        private string networkNameField;
        
        private ManifestType typeField;
        
        private long parcelIDField;
        
        private long interchangeIDField;
        
        private string statusCodeField;
        
        private string statusMessageField;
        
        private string statusColorField;
        
        /// <remarks/>
        public System.DateTime ManifestDate {
            get {
                return this.manifestDateField;
            }
            set {
                this.manifestDateField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkID {
            get {
                return this.networkIDField;
            }
            set {
                this.networkIDField = value;
            }
        }
        
        /// <remarks/>
        public string NetworkName {
            get {
                return this.networkNameField;
            }
            set {
                this.networkNameField = value;
            }
        }
        
        /// <remarks/>
        public ManifestType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public long ParcelID {
            get {
                return this.parcelIDField;
            }
            set {
                this.parcelIDField = value;
            }
        }
        
        /// <remarks/>
        public long InterchangeID {
            get {
                return this.interchangeIDField;
            }
            set {
                this.interchangeIDField = value;
            }
        }
        
        /// <remarks/>
        public string StatusCode {
            get {
                return this.statusCodeField;
            }
            set {
                this.statusCodeField = value;
            }
        }
        
        /// <remarks/>
        public string StatusMessage {
            get {
                return this.statusMessageField;
            }
            set {
                this.statusMessageField = value;
            }
        }
        
        /// <remarks/>
        public string StatusColor {
            get {
                return this.statusColorField;
            }
            set {
                this.statusColorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum ManifestType {
        
        /// <remarks/>
        System,
        
        /// <remarks/>
        Error,
        
        /// <remarks/>
        Manual,
        
        /// <remarks/>
        ECGridOS,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class ParcelIDInfoCollection {
        
        private short pageSizeField;
        
        private short pageNumberField;
        
        private int countField;
        
        private int totalRecordsField;
        
        private short totalPagesField;
        
        private ParcelIDInfo[] parcelIDInfoListField;
        
        /// <remarks/>
        public short PageSize {
            get {
                return this.pageSizeField;
            }
            set {
                this.pageSizeField = value;
            }
        }
        
        /// <remarks/>
        public short PageNumber {
            get {
                return this.pageNumberField;
            }
            set {
                this.pageNumberField = value;
            }
        }
        
        /// <remarks/>
        public int Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        public int TotalRecords {
            get {
                return this.totalRecordsField;
            }
            set {
                this.totalRecordsField = value;
            }
        }
        
        /// <remarks/>
        public short TotalPages {
            get {
                return this.totalPagesField;
            }
            set {
                this.totalPagesField = value;
            }
        }
        
        /// <remarks/>
        public ParcelIDInfo[] ParcelIDInfoList {
            get {
                return this.parcelIDInfoListField;
            }
            set {
                this.parcelIDInfoListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class ParcelNote {
        
        private long parcelIDField;
        
        private int parcelNoteIDField;
        
        private long interchangeIDField;
        
        private System.DateTime noteDateField;
        
        private string statusCodeField;
        
        private string postedByField;
        
        private int userIDField;
        
        private string noteField;
        
        /// <remarks/>
        public long ParcelID {
            get {
                return this.parcelIDField;
            }
            set {
                this.parcelIDField = value;
            }
        }
        
        /// <remarks/>
        public int ParcelNoteID {
            get {
                return this.parcelNoteIDField;
            }
            set {
                this.parcelNoteIDField = value;
            }
        }
        
        /// <remarks/>
        public long InterchangeID {
            get {
                return this.interchangeIDField;
            }
            set {
                this.interchangeIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime NoteDate {
            get {
                return this.noteDateField;
            }
            set {
                this.noteDateField = value;
            }
        }
        
        /// <remarks/>
        public string StatusCode {
            get {
                return this.statusCodeField;
            }
            set {
                this.statusCodeField = value;
            }
        }
        
        /// <remarks/>
        public string PostedBy {
            get {
                return this.postedByField;
            }
            set {
                this.postedByField = value;
            }
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class CertificateRootInfo {
        
        private string passwordField;
        
        private byte[] privatePFXField;
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] PrivatePFX {
            get {
                return this.privatePFXField;
            }
            set {
                this.privatePFXField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class CertificateInfo {
        
        private int certKeyIDField;
        
        private string partnerAS2IDField;
        
        private string partnerURLField;
        
        private CertificateType typeField;
        
        private CertificateUsage usageField;
        
        private string secureHashAlgorithmField;
        
        private string subjectField;
        
        private string issuerField;
        
        private bool hasPrivateKeyField;
        
        private byte[] publicCertificateField;
        
        private System.DateTime beginUsageField;
        
        private System.DateTime endUsageField;
        
        private System.DateTime notBeforeField;
        
        private System.DateTime notAfterField;
        
        private string serialNumberField;
        
        private string thumbprintField;
        
        private Status statusField;
        
        private CertificateRootInfo rootInfoField;
        
        /// <remarks/>
        public int CertKeyID {
            get {
                return this.certKeyIDField;
            }
            set {
                this.certKeyIDField = value;
            }
        }
        
        /// <remarks/>
        public string PartnerAS2ID {
            get {
                return this.partnerAS2IDField;
            }
            set {
                this.partnerAS2IDField = value;
            }
        }
        
        /// <remarks/>
        public string PartnerURL {
            get {
                return this.partnerURLField;
            }
            set {
                this.partnerURLField = value;
            }
        }
        
        /// <remarks/>
        public CertificateType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public CertificateUsage Usage {
            get {
                return this.usageField;
            }
            set {
                this.usageField = value;
            }
        }
        
        /// <remarks/>
        public string SecureHashAlgorithm {
            get {
                return this.secureHashAlgorithmField;
            }
            set {
                this.secureHashAlgorithmField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public string Issuer {
            get {
                return this.issuerField;
            }
            set {
                this.issuerField = value;
            }
        }
        
        /// <remarks/>
        public bool HasPrivateKey {
            get {
                return this.hasPrivateKeyField;
            }
            set {
                this.hasPrivateKeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] PublicCertificate {
            get {
                return this.publicCertificateField;
            }
            set {
                this.publicCertificateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime BeginUsage {
            get {
                return this.beginUsageField;
            }
            set {
                this.beginUsageField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndUsage {
            get {
                return this.endUsageField;
            }
            set {
                this.endUsageField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime NotBefore {
            get {
                return this.notBeforeField;
            }
            set {
                this.notBeforeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime NotAfter {
            get {
                return this.notAfterField;
            }
            set {
                this.notAfterField = value;
            }
        }
        
        /// <remarks/>
        public string SerialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        public string Thumbprint {
            get {
                return this.thumbprintField;
            }
            set {
                this.thumbprintField = value;
            }
        }
        
        /// <remarks/>
        public Status Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public CertificateRootInfo RootInfo {
            get {
                return this.rootInfoField;
            }
            set {
                this.rootInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum CertificateType {
        
        /// <remarks/>
        X509,
        
        /// <remarks/>
        PGP,
        
        /// <remarks/>
        SSH,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum CertificateUsage {
        
        /// <remarks/>
        SSL,
        
        /// <remarks/>
        Encryption,
        
        /// <remarks/>
        Signature,
        
        /// <remarks/>
        EncryptionAndSignature,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class as2CommInfo {
        
        private int commIDField;
        
        private System.DateTime createdField;
        
        private System.DateTime modifiedField;
        
        private bool hostedField;
        
        private string identifierField;
        
        private UserIDInfo ownerField;
        
        private int networkIDField;
        
        private int mailboxIDField;
        
        private UseType useTypeField;
        
        private string uRLField;
        
        private string mimeTypeOverrideField;
        
        private bool signDataField;
        
        private bool encryptDataField;
        
        private bool compressDataField;
        
        private System.DateTime beginUsageField;
        
        private System.DateTime endUsageField;
        
        private Status statusField;
        
        private ReceiptType receiptField;
        
        private bool sSLClientAuthenticationField;
        
        private HTTPAuthInfo hTTPAuthenticationField;
        
        private CertificateInfo[] certificatesField;
        
        /// <remarks/>
        public int CommID {
            get {
                return this.commIDField;
            }
            set {
                this.commIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public bool Hosted {
            get {
                return this.hostedField;
            }
            set {
                this.hostedField = value;
            }
        }
        
        /// <remarks/>
        public string Identifier {
            get {
                return this.identifierField;
            }
            set {
                this.identifierField = value;
            }
        }
        
        /// <remarks/>
        public UserIDInfo Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkID {
            get {
                return this.networkIDField;
            }
            set {
                this.networkIDField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxID {
            get {
                return this.mailboxIDField;
            }
            set {
                this.mailboxIDField = value;
            }
        }
        
        /// <remarks/>
        public UseType UseType {
            get {
                return this.useTypeField;
            }
            set {
                this.useTypeField = value;
            }
        }
        
        /// <remarks/>
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        /// <remarks/>
        public string MimeTypeOverride {
            get {
                return this.mimeTypeOverrideField;
            }
            set {
                this.mimeTypeOverrideField = value;
            }
        }
        
        /// <remarks/>
        public bool SignData {
            get {
                return this.signDataField;
            }
            set {
                this.signDataField = value;
            }
        }
        
        /// <remarks/>
        public bool EncryptData {
            get {
                return this.encryptDataField;
            }
            set {
                this.encryptDataField = value;
            }
        }
        
        /// <remarks/>
        public bool CompressData {
            get {
                return this.compressDataField;
            }
            set {
                this.compressDataField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime BeginUsage {
            get {
                return this.beginUsageField;
            }
            set {
                this.beginUsageField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndUsage {
            get {
                return this.endUsageField;
            }
            set {
                this.endUsageField = value;
            }
        }
        
        /// <remarks/>
        public Status Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public ReceiptType Receipt {
            get {
                return this.receiptField;
            }
            set {
                this.receiptField = value;
            }
        }
        
        /// <remarks/>
        public bool SSLClientAuthentication {
            get {
                return this.sSLClientAuthenticationField;
            }
            set {
                this.sSLClientAuthenticationField = value;
            }
        }
        
        /// <remarks/>
        public HTTPAuthInfo HTTPAuthentication {
            get {
                return this.hTTPAuthenticationField;
            }
            set {
                this.hTTPAuthenticationField = value;
            }
        }
        
        /// <remarks/>
        public CertificateInfo[] Certificates {
            get {
                return this.certificatesField;
            }
            set {
                this.certificatesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum ReceiptType {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        SynchronousUnsigned,
        
        /// <remarks/>
        SynchronousSigned,
        
        /// <remarks/>
        AsynchronousUnsigned,
        
        /// <remarks/>
        AsynchronousSigned,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class CertificateRoot {
        
        private string passwordField;
        
        private byte[] privatePFXField;
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] PrivatePFX {
            get {
                return this.privatePFXField;
            }
            set {
                this.privatePFXField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class Certificate {
        
        private int certKeyIDField;
        
        private string partnerIDField;
        
        private string partnerURLField;
        
        private CertificateType typeField;
        
        private CertificateUsage usageField;
        
        private string keyIDField;
        
        private string userIDField;
        
        private string secureHashAlgorithmField;
        
        private string subjectField;
        
        private string issuerField;
        
        private bool hasPrivateKeyField;
        
        private byte[] publicCertificateField;
        
        private System.DateTime beginUsageField;
        
        private System.DateTime endUsageField;
        
        private System.DateTime notBeforeField;
        
        private System.DateTime notAfterField;
        
        private string serialNumberField;
        
        private string thumbprintField;
        
        private Status statusField;
        
        private CertificateRoot rootInfoField;
        
        private CertStoreTypes certTypeField;
        
        /// <remarks/>
        public int CertKeyID {
            get {
                return this.certKeyIDField;
            }
            set {
                this.certKeyIDField = value;
            }
        }
        
        /// <remarks/>
        public string PartnerID {
            get {
                return this.partnerIDField;
            }
            set {
                this.partnerIDField = value;
            }
        }
        
        /// <remarks/>
        public string PartnerURL {
            get {
                return this.partnerURLField;
            }
            set {
                this.partnerURLField = value;
            }
        }
        
        /// <remarks/>
        public CertificateType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public CertificateUsage Usage {
            get {
                return this.usageField;
            }
            set {
                this.usageField = value;
            }
        }
        
        /// <remarks/>
        public string KeyID {
            get {
                return this.keyIDField;
            }
            set {
                this.keyIDField = value;
            }
        }
        
        /// <remarks/>
        public string UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string SecureHashAlgorithm {
            get {
                return this.secureHashAlgorithmField;
            }
            set {
                this.secureHashAlgorithmField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public string Issuer {
            get {
                return this.issuerField;
            }
            set {
                this.issuerField = value;
            }
        }
        
        /// <remarks/>
        public bool HasPrivateKey {
            get {
                return this.hasPrivateKeyField;
            }
            set {
                this.hasPrivateKeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] PublicCertificate {
            get {
                return this.publicCertificateField;
            }
            set {
                this.publicCertificateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime BeginUsage {
            get {
                return this.beginUsageField;
            }
            set {
                this.beginUsageField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndUsage {
            get {
                return this.endUsageField;
            }
            set {
                this.endUsageField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime NotBefore {
            get {
                return this.notBeforeField;
            }
            set {
                this.notBeforeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime NotAfter {
            get {
                return this.notAfterField;
            }
            set {
                this.notAfterField = value;
            }
        }
        
        /// <remarks/>
        public string SerialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        public string Thumbprint {
            get {
                return this.thumbprintField;
            }
            set {
                this.thumbprintField = value;
            }
        }
        
        /// <remarks/>
        public Status Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public CertificateRoot RootInfo {
            get {
                return this.rootInfoField;
            }
            set {
                this.rootInfoField = value;
            }
        }
        
        /// <remarks/>
        public CertStoreTypes CertType {
            get {
                return this.certTypeField;
            }
            set {
                this.certTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum CertStoreTypes {
        
        /// <remarks/>
        cstUser,
        
        /// <remarks/>
        cstMachine,
        
        /// <remarks/>
        cstPFXFile,
        
        /// <remarks/>
        cstPFXBlob,
        
        /// <remarks/>
        cstJKSFile,
        
        /// <remarks/>
        cstJKSBlob,
        
        /// <remarks/>
        cstPEMKeyFile,
        
        /// <remarks/>
        cstPEMKeyBlob,
        
        /// <remarks/>
        cstPublicKeyFile,
        
        /// <remarks/>
        cstPublicKeyBlob,
        
        /// <remarks/>
        cstSSHPublicKeyBlob,
        
        /// <remarks/>
        cstP7BFile,
        
        /// <remarks/>
        cstP7BBlob,
        
        /// <remarks/>
        cstSSHPublicKeyFile,
        
        /// <remarks/>
        cstPPKFile,
        
        /// <remarks/>
        cstPPKBlob,
        
        /// <remarks/>
        cstXMLFile,
        
        /// <remarks/>
        cstXMLBlob,
        
        /// <remarks/>
        cstJWKFile,
        
        /// <remarks/>
        cstJWKBlob,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class CommIDInfo {
        
        private int commIDField;
        
        private NetworkGatewayCommChannel typeField;
        
        private string versionField;
        
        private System.DateTime createdField;
        
        private System.DateTime modifiedField;
        
        private bool hostedField;
        
        private string identifierField;
        
        private UserIDInfo ownerField;
        
        private int networkIDField;
        
        private int mailboxIDField;
        
        private UseType useTypeField;
        
        private string uRLField;
        
        private string mimeTypeOverrideField;
        
        private bool signDataField;
        
        private bool encryptDataField;
        
        private bool compressDataField;
        
        private System.DateTime beginUsageField;
        
        private System.DateTime endUsageField;
        
        private Status statusField;
        
        private ReceiptType receiptField;
        
        private bool sSLClientAuthenticationField;
        
        private HTTPAuthInfo hTTPAuthenticationField;
        
        private Certificate[] certificatesField;
        
        /// <remarks/>
        public int CommID {
            get {
                return this.commIDField;
            }
            set {
                this.commIDField = value;
            }
        }
        
        /// <remarks/>
        public NetworkGatewayCommChannel Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public bool Hosted {
            get {
                return this.hostedField;
            }
            set {
                this.hostedField = value;
            }
        }
        
        /// <remarks/>
        public string Identifier {
            get {
                return this.identifierField;
            }
            set {
                this.identifierField = value;
            }
        }
        
        /// <remarks/>
        public UserIDInfo Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        public int NetworkID {
            get {
                return this.networkIDField;
            }
            set {
                this.networkIDField = value;
            }
        }
        
        /// <remarks/>
        public int MailboxID {
            get {
                return this.mailboxIDField;
            }
            set {
                this.mailboxIDField = value;
            }
        }
        
        /// <remarks/>
        public UseType UseType {
            get {
                return this.useTypeField;
            }
            set {
                this.useTypeField = value;
            }
        }
        
        /// <remarks/>
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        /// <remarks/>
        public string MimeTypeOverride {
            get {
                return this.mimeTypeOverrideField;
            }
            set {
                this.mimeTypeOverrideField = value;
            }
        }
        
        /// <remarks/>
        public bool SignData {
            get {
                return this.signDataField;
            }
            set {
                this.signDataField = value;
            }
        }
        
        /// <remarks/>
        public bool EncryptData {
            get {
                return this.encryptDataField;
            }
            set {
                this.encryptDataField = value;
            }
        }
        
        /// <remarks/>
        public bool CompressData {
            get {
                return this.compressDataField;
            }
            set {
                this.compressDataField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime BeginUsage {
            get {
                return this.beginUsageField;
            }
            set {
                this.beginUsageField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndUsage {
            get {
                return this.endUsageField;
            }
            set {
                this.endUsageField = value;
            }
        }
        
        /// <remarks/>
        public Status Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public ReceiptType Receipt {
            get {
                return this.receiptField;
            }
            set {
                this.receiptField = value;
            }
        }
        
        /// <remarks/>
        public bool SSLClientAuthentication {
            get {
                return this.sSLClientAuthenticationField;
            }
            set {
                this.sSLClientAuthenticationField = value;
            }
        }
        
        /// <remarks/>
        public HTTPAuthInfo HTTPAuthentication {
            get {
                return this.hTTPAuthenticationField;
            }
            set {
                this.hTTPAuthenticationField = value;
            }
        }
        
        /// <remarks/>
        public Certificate[] Certificates {
            get {
                return this.certificatesField;
            }
            set {
                this.certificatesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public partial class CallBackLogInfo {
        
        private int callBackLogIDField;
        
        private System.DateTime dateField;
        
        private short callNumberField;
        
        private int returnCodeField;
        
        private string messageField;
        
        /// <remarks/>
        public int CallBackLogID {
            get {
                return this.callBackLogIDField;
            }
            set {
                this.callBackLogIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public short CallNumber {
            get {
                return this.callNumberField;
            }
            set {
                this.callNumberField = value;
            }
        }
        
        /// <remarks/>
        public int ReturnCode {
            get {
                return this.returnCodeField;
            }
            set {
                this.returnCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum StatusCallBack {
        
        /// <remarks/>
        Active,
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Completed,
        
        /// <remarks/>
        Error,
        
        /// <remarks/>
        Canceled,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum StatisticsPeriod {
        
        /// <remarks/>
        Hour,
        
        /// <remarks/>
        Day,
        
        /// <remarks/>
        Week,
        
        /// <remarks/>
        Month,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum CertificateSecureHashAlgorithm {
        
        /// <remarks/>
        sha1,
        
        /// <remarks/>
        sha2,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum ParcelStatus {
        
        /// <remarks/>
        InBoxReady,
        
        /// <remarks/>
        InBoxTransferred,
        
        /// <remarks/>
        x1256Pending,
        
        /// <remarks/>
        as2Receive,
        
        /// <remarks/>
        as2MDNSent,
        
        /// <remarks/>
        as2MDNPending,
        
        /// <remarks/>
        as2MDNRejected,
        
        /// <remarks/>
        as2MDNConfirmed,
        
        /// <remarks/>
        as2Sent,
        
        /// <remarks/>
        as2SendFailed,
        
        /// <remarks/>
        gisbReceived,
        
        /// <remarks/>
        gisbSent,
        
        /// <remarks/>
        gisbSendFailed,
        
        /// <remarks/>
        cxmlReceived,
        
        /// <remarks/>
        cxmlSent,
        
        /// <remarks/>
        cxmlSendFailed,
        
        /// <remarks/>
        ftpReceived,
        
        /// <remarks/>
        x400Received,
        
        /// <remarks/>
        smtpReceived,
        
        /// <remarks/>
        oftpReceived,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum EMailSystem {
        
        /// <remarks/>
        smtp,
        
        /// <remarks/>
        x400,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum EMailPayload {
        
        /// <remarks/>
        Body,
        
        /// <remarks/>
        Attachment,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum OrderBy {
        
        /// <remarks/>
        Description,
        
        /// <remarks/>
        QID,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum eMailTo {
        
        /// <remarks/>
        NoEMail,
        
        /// <remarks/>
        Requestor,
        
        /// <remarks/>
        Network,
        
        /// <remarks/>
        RequestorAndNetwork,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        RequestorAndOther,
        
        /// <remarks/>
        NetworkAndOther,
        
        /// <remarks/>
        EMailAll,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum NetworkContactType {
        
        /// <remarks/>
        Owner,
        
        /// <remarks/>
        Errors,
        
        /// <remarks/>
        Interconnects,
        
        /// <remarks/>
        Notices,
        
        /// <remarks/>
        Reports,
        
        /// <remarks/>
        Accounting,
        
        /// <remarks/>
        CustomerService,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://os.ecgrid.io/")]
    public enum NetworkWebsiteType {
        
        /// <remarks/>
        Home,
        
        /// <remarks/>
        Support,
        
        /// <remarks/>
        Login,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CallBackPendingListExACompletedEventHandler(object sender, CallBackPendingListExACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallBackPendingListExACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallBackPendingListExACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CallBackQueueIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CallBackQueueIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CallBackFailedListCompletedEventHandler(object sender, CallBackFailedListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallBackFailedListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallBackFailedListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CallBackQueueIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CallBackQueueIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CallBackFailedListExCompletedEventHandler(object sender, CallBackFailedListExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallBackFailedListExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallBackFailedListExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CallBackQueueIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CallBackQueueIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReportMonthlyCompletedEventHandler(object sender, ReportMonthlyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportMonthlyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportMonthlyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReportMonthlyExCompletedEventHandler(object sender, ReportMonthlyExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportMonthlyExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportMonthlyExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReportTrafficStatsCompletedEventHandler(object sender, ReportTrafficStatsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportTrafficStatsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportTrafficStatsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReportTrafficStatsExCompletedEventHandler(object sender, ReportTrafficStatsExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportTrafficStatsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportTrafficStatsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReportTrafficStatsPublicCompletedEventHandler(object sender, ReportTrafficStatsPublicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportTrafficStatsPublicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportTrafficStatsPublicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReportInstantStatsCompletedEventHandler(object sender, ReportInstantStatsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportInstantStatsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportInstantStatsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReportInstantStatsExCompletedEventHandler(object sender, ReportInstantStatsExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportInstantStatsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportInstantStatsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReportMailboxStatsCompletedEventHandler(object sender, ReportMailboxStatsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportMailboxStatsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportMailboxStatsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReportMailboxStatsExCompletedEventHandler(object sender, ReportMailboxStatsExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportMailboxStatsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportMailboxStatsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReportMailboxInterchangeStatsCompletedEventHandler(object sender, ReportMailboxInterchangeStatsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportMailboxInterchangeStatsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportMailboxInterchangeStatsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReportMailboxInterchangeStatsExCompletedEventHandler(object sender, ReportMailboxInterchangeStatsExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportMailboxInterchangeStatsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportMailboxInterchangeStatsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReportInterchangeStatsCompletedEventHandler(object sender, ReportInterchangeStatsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportInterchangeStatsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportInterchangeStatsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReportInterchangeStatsExCompletedEventHandler(object sender, ReportInterchangeStatsExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportInterchangeStatsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportInterchangeStatsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CommAddCompletedEventHandler(object sender, CommAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CommSetPairCompletedEventHandler(object sender, CommSetPairCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommSetPairCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommSetPairCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CommPairCompletedEventHandler(object sender, CommPairCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommPairCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommPairCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CommUpdateCompletedEventHandler(object sender, CommUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CommListCompletedEventHandler(object sender, CommListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CommListExCompletedEventHandler(object sender, CommListExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommListExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommListExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CommFindCompletedEventHandler(object sender, CommFindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommFindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommFindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CommInfoCompletedEventHandler(object sender, CommInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CommSetStatusCompletedEventHandler(object sender, CommSetStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommSetStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommSetStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CertificateAddPublicCompletedEventHandler(object sender, CertificateAddPublicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CertificateAddPublicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CertificateAddPublicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CertificateAddPublicACompletedEventHandler(object sender, CertificateAddPublicACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CertificateAddPublicACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CertificateAddPublicACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CertAddPrivateCompletedEventHandler(object sender, CertAddPrivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CertAddPrivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CertAddPrivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public as2CommInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((as2CommInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CertAddPrivateACompletedEventHandler(object sender, CertAddPrivateACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CertAddPrivateACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CertAddPrivateACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public as2CommInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((as2CommInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CertificateCreatePrivateCompletedEventHandler(object sender, CertificateCreatePrivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CertificateCreatePrivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CertificateCreatePrivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CertificateRenewPrivateCompletedEventHandler(object sender, CertificateRenewPrivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CertificateRenewPrivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CertificateRenewPrivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CommIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CommIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CertificateTerminateCompletedEventHandler(object sender, CertificateTerminateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CertificateTerminateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CertificateTerminateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CommDefaultMailboxCompletedEventHandler(object sender, CommDefaultMailboxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommDefaultMailboxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommDefaultMailboxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NowUTCCompletedEventHandler(object sender, NowUTCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NowUTCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NowUTCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeDateCompletedEventHandler(object sender, InterchangeDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void VersionCompletedEventHandler(object sender, VersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void X400FormatCompletedEventHandler(object sender, X400FormatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class X400FormatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal X400FormatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelUploadExACompletedEventHandler(object sender, ParcelUploadExACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelUploadExACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelUploadExACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelUpdateStatusCompletedEventHandler(object sender, ParcelUpdateStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelUpdateStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelUpdateStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelUpdateLocalStatusCompletedEventHandler(object sender, ParcelUpdateLocalStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelUpdateLocalStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelUpdateLocalStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelUploadMftCompletedEventHandler(object sender, ParcelUploadMftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelUploadMftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelUploadMftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelUploadMftACompletedEventHandler(object sender, ParcelUploadMftACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelUploadMftACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelUploadMftACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelTestCompletedEventHandler(object sender, ParcelTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelSetMailbagControlIDCompletedEventHandler(object sender, ParcelSetMailbagControlIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelSetMailbagControlIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelSetMailbagControlIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelFindMailbagControlIDCompletedEventHandler(object sender, ParcelFindMailbagControlIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelFindMailbagControlIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelFindMailbagControlIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelFindMailbagControlIDToCompletedEventHandler(object sender, ParcelFindMailbagControlIDToCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelFindMailbagControlIDToCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelFindMailbagControlIDToCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelManifestCompletedEventHandler(object sender, ParcelManifestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelManifestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelManifestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ManifestInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ManifestInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeManifestCompletedEventHandler(object sender, InterchangeManifestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeManifestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeManifestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ManifestInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ManifestInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelNoteListCompletedEventHandler(object sender, ParcelNoteListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelNoteListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelNoteListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelNote[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelNote[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelInBoxArchiveCompletedEventHandler(object sender, ParcelInBoxArchiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelInBoxArchiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelInBoxArchiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelInBoxArchiveExCompletedEventHandler(object sender, ParcelInBoxArchiveExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelInBoxArchiveExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelInBoxArchiveExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelInBoxArchiveExShortCompletedEventHandler(object sender, ParcelInBoxArchiveExShortCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelInBoxArchiveExShortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelInBoxArchiveExShortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelInBoxArchiveDescExCompletedEventHandler(object sender, ParcelInBoxArchiveDescExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelInBoxArchiveDescExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelInBoxArchiveDescExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelOutBoxArchiveCompletedEventHandler(object sender, ParcelOutBoxArchiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelOutBoxArchiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelOutBoxArchiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelOutBoxArchiveExCompletedEventHandler(object sender, ParcelOutBoxArchiveExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelOutBoxArchiveExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelOutBoxArchiveExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelOutBoxArchiveExShortCompletedEventHandler(object sender, ParcelOutBoxArchiveExShortCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelOutBoxArchiveExShortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelOutBoxArchiveExShortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelOutBoxArchiveDescExCompletedEventHandler(object sender, ParcelOutBoxArchiveDescExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelOutBoxArchiveDescExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelOutBoxArchiveDescExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelOutBoxErrorCompletedEventHandler(object sender, ParcelOutBoxErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelOutBoxErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelOutBoxErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelOutBoxErrorExCompletedEventHandler(object sender, ParcelOutBoxErrorExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelOutBoxErrorExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelOutBoxErrorExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelOutBoxInProcessCompletedEventHandler(object sender, ParcelOutBoxInProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelOutBoxInProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelOutBoxInProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelOutBoxInProcessExCompletedEventHandler(object sender, ParcelOutBoxInProcessExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelOutBoxInProcessExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelOutBoxInProcessExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeInfoCompletedEventHandler(object sender, InterchangeInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeInBoxCompletedEventHandler(object sender, InterchangeInBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeInBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeInBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeInBoxArchiveCompletedEventHandler(object sender, InterchangeInBoxArchiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeInBoxArchiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeInBoxArchiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeInBoxExCompletedEventHandler(object sender, InterchangeInBoxExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeInBoxExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeInBoxExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeInBoxArchiveExCompletedEventHandler(object sender, InterchangeInBoxArchiveExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeInBoxArchiveExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeInBoxArchiveExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeOutBoxCompletedEventHandler(object sender, InterchangeOutBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeOutBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeOutBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeOutBoxArchiveCompletedEventHandler(object sender, InterchangeOutBoxArchiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeOutBoxArchiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeOutBoxArchiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeOutBoxExCompletedEventHandler(object sender, InterchangeOutBoxExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeOutBoxExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeOutBoxExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeOutBoxArchiveExCompletedEventHandler(object sender, InterchangeOutBoxArchiveExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeOutBoxArchiveExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeOutBoxArchiveExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeOutBoxPendingCompletedEventHandler(object sender, InterchangeOutBoxPendingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeOutBoxPendingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeOutBoxPendingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeOutBoxPendingExCompletedEventHandler(object sender, InterchangeOutBoxPendingExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeOutBoxPendingExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeOutBoxPendingExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeInBoxPendingCompletedEventHandler(object sender, InterchangeInBoxPendingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeInBoxPendingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeInBoxPendingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeInBoxPendingExCompletedEventHandler(object sender, InterchangeInBoxPendingExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeInBoxPendingExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeInBoxPendingExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeInBoxBlockedCompletedEventHandler(object sender, InterchangeInBoxBlockedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeInBoxBlockedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeInBoxBlockedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeInBoxBlockedExCompletedEventHandler(object sender, InterchangeInBoxBlockedExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeInBoxBlockedExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeInBoxBlockedExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeOutBoxBlockedCompletedEventHandler(object sender, InterchangeOutBoxBlockedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeOutBoxBlockedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeOutBoxBlockedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeOutBoxBlockedExCompletedEventHandler(object sender, InterchangeOutBoxBlockedExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeOutBoxBlockedExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeOutBoxBlockedExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeHeaderInfoCompletedEventHandler(object sender, InterchangeHeaderInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeHeaderInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeHeaderInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeHeaderInfoBCompletedEventHandler(object sender, InterchangeHeaderInfoBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeHeaderInfoBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeHeaderInfoBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeOutBoxNoRouteCompletedEventHandler(object sender, InterchangeOutBoxNoRouteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeOutBoxNoRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeOutBoxNoRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeOutBoxNoRouteExCompletedEventHandler(object sender, InterchangeOutBoxNoRouteExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeOutBoxNoRouteExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeOutBoxNoRouteExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeResendCompletedEventHandler(object sender, InterchangeResendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeResendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeResendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterchangeIDStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterchangeIDStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterchangeCancelCompletedEventHandler(object sender, InterchangeCancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterchangeCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterchangeCancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CallBackEventInfoCompletedEventHandler(object sender, CallBackEventInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallBackEventInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallBackEventInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CallBackEventIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CallBackEventIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CallBackEventListExCompletedEventHandler(object sender, CallBackEventListExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallBackEventListExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallBackEventListExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CallBackEventIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CallBackEventIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CallBackAddExCompletedEventHandler(object sender, CallBackAddExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallBackAddExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallBackAddExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CallBackEventIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CallBackEventIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CallBackEventSetStatusCompletedEventHandler(object sender, CallBackEventSetStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallBackEventSetStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallBackEventSetStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CallBackQueueInfoCompletedEventHandler(object sender, CallBackQueueInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallBackQueueInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallBackQueueInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CallBackQueueIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CallBackQueueIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CallBackTestCompletedEventHandler(object sender, CallBackTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallBackTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallBackTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CallBackQueueIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CallBackQueueIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CallBackPendingListCompletedEventHandler(object sender, CallBackPendingListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallBackPendingListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallBackPendingListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CallBackQueueIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CallBackQueueIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CallBackPendingListExCompletedEventHandler(object sender, CallBackPendingListExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallBackPendingListExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallBackPendingListExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CallBackQueueIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CallBackQueueIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MailboxDescriptionCompletedEventHandler(object sender, MailboxDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailboxDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailboxDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MailboxUseCompletedEventHandler(object sender, MailboxUseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailboxUseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailboxUseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MailboxListCompletedEventHandler(object sender, MailboxListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailboxListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailboxListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MailboxIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MailboxIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MailboxListExCompletedEventHandler(object sender, MailboxListExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailboxListExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailboxListExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MailboxIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MailboxIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPAddCompletedEventHandler(object sender, TPAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPAddVANCompletedEventHandler(object sender, TPAddVANCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPAddVANCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPAddVANCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPAddExCompletedEventHandler(object sender, TPAddExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPAddExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPAddExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPMoveCompletedEventHandler(object sender, TPMoveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPMoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPMoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPMoveMailboxCompletedEventHandler(object sender, TPMoveMailboxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPMoveMailboxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPMoveMailboxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPMoveExCompletedEventHandler(object sender, TPMoveExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPMoveExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPMoveExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPUpdateDescriptionCompletedEventHandler(object sender, TPUpdateDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPUpdateDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPUpdateDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPUpdateDataEMailCompletedEventHandler(object sender, TPUpdateDataEMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPUpdateDataEMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPUpdateDataEMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPActivateCompletedEventHandler(object sender, TPActivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPActivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPActivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPSuspendCompletedEventHandler(object sender, TPSuspendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPSuspendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPSuspendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPTerminateCompletedEventHandler(object sender, TPTerminateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPTerminateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPTerminateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPSetRoutingGroupCompletedEventHandler(object sender, TPSetRoutingGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPSetRoutingGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPSetRoutingGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPInfoCompletedEventHandler(object sender, TPInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ECGridIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ECGridIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPSearchCompletedEventHandler(object sender, TPSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ECGridIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ECGridIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPSearchExCompletedEventHandler(object sender, TPSearchExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPSearchExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPSearchExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ECGridIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ECGridIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPListCompletedEventHandler(object sender, TPListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ECGridIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ECGridIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPListExCompletedEventHandler(object sender, TPListExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPListExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPListExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ECGridIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ECGridIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPListExPagedCompletedEventHandler(object sender, TPListExPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPListExPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPListExPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ECGridIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ECGridIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPListByOwnerCompletedEventHandler(object sender, TPListByOwnerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPListByOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPListByOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ECGridIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ECGridIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPFindExCompletedEventHandler(object sender, TPFindExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPFindExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPFindExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ECGridIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ECGridIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPGetMailboxDefaultCompletedEventHandler(object sender, TPGetMailboxDefaultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPGetMailboxDefaultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPGetMailboxDefaultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ECGridIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ECGridIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPSetMailboxDefaultCompletedEventHandler(object sender, TPSetMailboxDefaultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPSetMailboxDefaultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPSetMailboxDefaultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TPSetOwnerCompletedEventHandler(object sender, TPSetOwnerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPSetOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TPSetOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterconnectAddCompletedEventHandler(object sender, InterconnectAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterconnectAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterconnectAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterconnectIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterconnectIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterconnectNoteCompletedEventHandler(object sender, InterconnectNoteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterconnectNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterconnectNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterconnectCancelCompletedEventHandler(object sender, InterconnectCancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterconnectCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterconnectCancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterconnectInfoCompletedEventHandler(object sender, InterconnectInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterconnectInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterconnectInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterconnectIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterconnectIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterconnectInfoGUIDCompletedEventHandler(object sender, InterconnectInfoGUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterconnectInfoGUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterconnectInfoGUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterconnectIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterconnectIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterconnectNoteListCompletedEventHandler(object sender, InterconnectNoteListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterconnectNoteListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterconnectNoteListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterconnectNote[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterconnectNote[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterconnectListByECGridIDCompletedEventHandler(object sender, InterconnectListByECGridIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterconnectListByECGridIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterconnectListByECGridIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterconnectIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterconnectIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterconnectListByStatusCompletedEventHandler(object sender, InterconnectListByStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterconnectListByStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterconnectListByStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterconnectIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterconnectIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterconnectListByStatusExCompletedEventHandler(object sender, InterconnectListByStatusExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterconnectListByStatusExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterconnectListByStatusExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InterconnectIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InterconnectIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterconnectCountCompletedEventHandler(object sender, InterconnectCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterconnectCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterconnectCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InterconnectCountExCompletedEventHandler(object sender, InterconnectCountExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterconnectCountExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterconnectCountExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MigrationAddCompletedEventHandler(object sender, MigrationAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MigrationAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MigrationAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MigrationAddExCompletedEventHandler(object sender, MigrationAddExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MigrationAddExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MigrationAddExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MigrationListCompletedEventHandler(object sender, MigrationListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MigrationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MigrationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MigrationIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MigrationIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MigrationListExCompletedEventHandler(object sender, MigrationListExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MigrationListExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MigrationListExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MigrationIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MigrationIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MigrationInfoCompletedEventHandler(object sender, MigrationInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MigrationInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MigrationInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MigrationIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MigrationIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MigrationAddTPCompletedEventHandler(object sender, MigrationAddTPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MigrationAddTPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MigrationAddTPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CarbonCopyAddCompletedEventHandler(object sender, CarbonCopyAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CarbonCopyAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CarbonCopyAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CarbonCopyAddExCompletedEventHandler(object sender, CarbonCopyAddExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CarbonCopyAddExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CarbonCopyAddExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CarbonCopyActivateCompletedEventHandler(object sender, CarbonCopyActivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CarbonCopyActivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CarbonCopyActivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CarbonCopySuspendCompletedEventHandler(object sender, CarbonCopySuspendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CarbonCopySuspendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CarbonCopySuspendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CarbonCopyTerminateCompletedEventHandler(object sender, CarbonCopyTerminateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CarbonCopyTerminateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CarbonCopyTerminateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CarbonCopyInfoCompletedEventHandler(object sender, CarbonCopyInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CarbonCopyInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CarbonCopyInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CarbonCopyIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CarbonCopyIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CarbonCopyListCompletedEventHandler(object sender, CarbonCopyListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CarbonCopyListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CarbonCopyListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CarbonCopyIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CarbonCopyIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CarbonCopyListExCompletedEventHandler(object sender, CarbonCopyListExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CarbonCopyListExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CarbonCopyListExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CarbonCopyIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CarbonCopyIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelInBoxCompletedEventHandler(object sender, ParcelInBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelInBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelInBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelInBoxExCompletedEventHandler(object sender, ParcelInBoxExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelInBoxExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelInBoxExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelInBoxExShortCompletedEventHandler(object sender, ParcelInBoxExShortCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelInBoxExShortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelInBoxExShortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfoCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfoCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelInfoCompletedEventHandler(object sender, ParcelInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParcelIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParcelIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelDownloadCompletedEventHandler(object sender, ParcelDownloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelDownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FileInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FileInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelDownloadACompletedEventHandler(object sender, ParcelDownloadACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelDownloadACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelDownloadACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FileInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FileInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelDownloadS3CompletedEventHandler(object sender, ParcelDownloadS3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelDownloadS3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelDownloadS3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelDownloadNoUpdateCompletedEventHandler(object sender, ParcelDownloadNoUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelDownloadNoUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelDownloadNoUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FileInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FileInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelDownloadNoUpdateACompletedEventHandler(object sender, ParcelDownloadNoUpdateACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelDownloadNoUpdateACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelDownloadNoUpdateACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FileInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FileInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelDownloadConfirmCompletedEventHandler(object sender, ParcelDownloadConfirmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelDownloadConfirmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelDownloadConfirmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelAcknowledgmentNoteCompletedEventHandler(object sender, ParcelAcknowledgmentNoteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelAcknowledgmentNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelAcknowledgmentNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelDownloadCancelCompletedEventHandler(object sender, ParcelDownloadCancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelDownloadCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelDownloadCancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelDownloadConfirmPendingAckCompletedEventHandler(object sender, ParcelDownloadConfirmPendingAckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelDownloadConfirmPendingAckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelDownloadConfirmPendingAckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelDownloadResetCompletedEventHandler(object sender, ParcelDownloadResetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelDownloadResetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelDownloadResetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelResendCompletedEventHandler(object sender, ParcelResendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelResendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelResendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelUploadCompletedEventHandler(object sender, ParcelUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelUploadACompletedEventHandler(object sender, ParcelUploadACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelUploadACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelUploadACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ParcelUploadExCompletedEventHandler(object sender, ParcelUploadExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParcelUploadExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ParcelUploadExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GenerateAPIKeyCompletedEventHandler(object sender, GenerateAPIKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateAPIKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateAPIKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GeneratePasswordCompletedEventHandler(object sender, GeneratePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneratePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeneratePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void LogoutCompletedEventHandler(object sender, LogoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void WhoAmICompletedEventHandler(object sender, WhoAmICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WhoAmICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WhoAmICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SessionInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SessionInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserAddCompletedEventHandler(object sender, UserAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserAddExCompletedEventHandler(object sender, UserAddExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserAddExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserAddExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserInfoCompletedEventHandler(object sender, UserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserInfobyLoginCompletedEventHandler(object sender, UserInfobyLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserInfobyLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserInfobyLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserUpdateCompletedEventHandler(object sender, UserUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserPasswordCompletedEventHandler(object sender, UserPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserActivateCompletedEventHandler(object sender, UserActivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserActivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserActivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserSuspendCompletedEventHandler(object sender, UserSuspendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserSuspendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserSuspendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserTerminateCompletedEventHandler(object sender, UserTerminateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserTerminateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserTerminateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserSendSMSCompletedEventHandler(object sender, UserSendSMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserSendSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserSendSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserResetCompletedEventHandler(object sender, UserResetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserResetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserResetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserListCompletedEventHandler(object sender, UserListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserListExCompletedEventHandler(object sender, UserListExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserListExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserListExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserListLockedOutCompletedEventHandler(object sender, UserListLockedOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserListLockedOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserListLockedOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserListLockedOutExCompletedEventHandler(object sender, UserListLockedOutExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserListLockedOutExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserListLockedOutExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserSetNetworkMailboxCompletedEventHandler(object sender, UserSetNetworkMailboxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserSetNetworkMailboxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserSetNetworkMailboxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserSetAuthLevelCompletedEventHandler(object sender, UserSetAuthLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserSetAuthLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserSetAuthLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserSetMaxSessionsCompletedEventHandler(object sender, UserSetMaxSessionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserSetMaxSessionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserSetMaxSessionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UserGetAPIKeyCompletedEventHandler(object sender, UserGetAPIKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserGetAPIKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserGetAPIKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SessionLogCurrentCompletedEventHandler(object sender, SessionLogCurrentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SessionLogCurrentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SessionLogCurrentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SessionLogInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SessionLogInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SessionLogCompletedEventHandler(object sender, SessionLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SessionLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SessionLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SessionLogInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SessionLogInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SessionLogExCompletedEventHandler(object sender, SessionLogExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SessionLogExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SessionLogExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SessionLogInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SessionLogInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void KeyGetCompletedEventHandler(object sender, KeyGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public KeyValue Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((KeyValue)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void KeyListCompletedEventHandler(object sender, KeyListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public KeyValue[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((KeyValue[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void KeySetCompletedEventHandler(object sender, KeySetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeySetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeySetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void KeyRemoveCompletedEventHandler(object sender, KeyRemoveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void StatusListCompletedEventHandler(object sender, StatusListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StatusListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StatusListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StatusInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StatusInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NetworkInfoCompletedEventHandler(object sender, NetworkInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NetworkInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NetworkInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NetworkIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NetworkIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NetworkInfoWithLogCompletedEventHandler(object sender, NetworkInfoWithLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NetworkInfoWithLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NetworkInfoWithLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NetworkIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NetworkIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NetworkListCompletedEventHandler(object sender, NetworkListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NetworkListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NetworkListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NetworkIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NetworkIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NetworkStatusSummaryCompletedEventHandler(object sender, NetworkStatusSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NetworkStatusSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NetworkStatusSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NetworkOutageListCompletedEventHandler(object sender, NetworkOutageListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NetworkOutageListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NetworkOutageListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NetworkIDInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NetworkIDInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NetworkUpdateCompletedEventHandler(object sender, NetworkUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NetworkUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NetworkUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NetworkSetContactCompletedEventHandler(object sender, NetworkSetContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NetworkSetContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NetworkSetContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NetworkGetContactCompletedEventHandler(object sender, NetworkGetContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NetworkGetContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NetworkGetContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NetworkSetWebsiteCompletedEventHandler(object sender, NetworkSetWebsiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NetworkSetWebsiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NetworkSetWebsiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NetworkX12DelimitersCompletedEventHandler(object sender, NetworkX12DelimitersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NetworkX12DelimitersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NetworkX12DelimitersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void NetworkRootDeleteOnDownloadCompletedEventHandler(object sender, NetworkRootDeleteOnDownloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NetworkRootDeleteOnDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NetworkRootDeleteOnDownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MailboxAddCompletedEventHandler(object sender, MailboxAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailboxAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailboxAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MailboxAddExCompletedEventHandler(object sender, MailboxAddExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailboxAddExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailboxAddExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MailboxActivateCompletedEventHandler(object sender, MailboxActivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailboxActivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailboxActivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MailboxSuspendCompletedEventHandler(object sender, MailboxSuspendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailboxSuspendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailboxSuspendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MailboxTerminateCompletedEventHandler(object sender, MailboxTerminateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailboxTerminateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailboxTerminateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MailboxManagedCompletedEventHandler(object sender, MailboxManagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailboxManagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailboxManagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MailboxDeleteOnDownloadCompletedEventHandler(object sender, MailboxDeleteOnDownloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailboxDeleteOnDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailboxDeleteOnDownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MailboxInfoCompletedEventHandler(object sender, MailboxInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailboxInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailboxInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MailboxIDInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MailboxIDInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MailboxNameCompletedEventHandler(object sender, MailboxNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailboxNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailboxNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MailboxSetContactCompletedEventHandler(object sender, MailboxSetContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailboxSetContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailboxSetContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MailboxX12DelimitersCompletedEventHandler(object sender, MailboxX12DelimitersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailboxX12DelimitersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailboxX12DelimitersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void MailboxInBoxTimeoutCompletedEventHandler(object sender, MailboxInBoxTimeoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MailboxInBoxTimeoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MailboxInBoxTimeoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591